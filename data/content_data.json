{   
    "c":{
        
    "0":"<span><\/span><span class=\"c1\">\/\/ Single-line comments start with \/\/ - only available in C99 and later.<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">Multi-line comments look like this. They work in C89 as well.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">Multi-line comments don&#39;t nest \/* Be careful *\/<\/span>  <span class=\"c1\">\/\/ comment ends on this line...<\/span>\r\n<span class=\"err\">*\/<\/span> <span class=\"c1\">\/\/ ...not this one!<\/span>\r\n\r\n<span class=\"c1\">\/\/ Constants: #define &lt;keyword&gt;<\/span>\r\n<span class=\"c1\">\/\/ Constants are written in all-caps out of convention, not requirement<\/span>\r\n<span class=\"cp\">#define DAYS_IN_YEAR 365<\/span>\r\n\r\n<span class=\"c1\">\/\/ Enumeration constants are also ways to declare constants.<\/span>\r\n<span class=\"c1\">\/\/ All statements must end with a semicolon<\/span>\r\n<span class=\"k\">enum<\/span> <span class=\"n\">days<\/span> <span class=\"p\">{<\/span><span class=\"n\">SUN<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"n\">MON<\/span><span class=\"p\">,<\/span> <span class=\"n\">TUE<\/span><span class=\"p\">,<\/span> <span class=\"n\">WED<\/span><span class=\"p\">,<\/span> <span class=\"n\">THU<\/span><span class=\"p\">,<\/span> <span class=\"n\">FRI<\/span><span class=\"p\">,<\/span> <span class=\"n\">SAT<\/span><span class=\"p\">};<\/span>\r\n<span class=\"c1\">\/\/ MON gets 2 automatically, TUE gets 3, etc.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Import headers with #include<\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;stdlib.h&gt;<\/span><span class=\"cp\"><\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;stdio.h&gt;<\/span><span class=\"cp\"><\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;string.h&gt;<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"c1\">\/\/ (File names between &lt;angle brackets&gt; are headers from the C standard library.)<\/span>\r\n<span class=\"c1\">\/\/ For your own headers, use double quotes instead of angle brackets:<\/span>\r\n<span class=\"c1\">\/\/#include &quot;my_header.h&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Declare function signatures in advance in a .h file, or at the top of<\/span>\r\n<span class=\"c1\">\/\/ your .c file.<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">function_1<\/span><span class=\"p\">();<\/span>\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">function_2<\/span><span class=\"p\">(<\/span><span class=\"kt\">void<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"c1\">\/\/ Must declare a &#39;function prototype&#39; before main() when functions occur after<\/span>\r\n<span class=\"c1\">\/\/ your main() function.<\/span>\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">add_two_ints<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">x1<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">x2<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ function prototype<\/span>\r\n<span class=\"c1\">\/\/ although `int add_two_ints(int, int);` is also valid (no need to name the args),<\/span>\r\n<span class=\"c1\">\/\/ it is recommended to name arguments in the prototype as well for easier inspection<\/span>\r\n\r\n<span class=\"c1\">\/\/ Your program&#39;s entry point is a function called<\/span>\r\n<span class=\"c1\">\/\/ main with an integer return type.<\/span>\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">main<\/span><span class=\"p\">(<\/span><span class=\"kt\">void<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"c1\">\/\/ your program<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ The command line arguments used to run your program are also passed to main<\/span>\r\n<span class=\"c1\">\/\/ argc being the number of arguments - your program&#39;s name counts as 1<\/span>\r\n<span class=\"c1\">\/\/ argv is an array of character arrays - containing the arguments themselves<\/span>\r\n<span class=\"c1\">\/\/ argv[0] = name of your program, argv[1] = first argument, etc.<\/span>\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">main<\/span> <span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">argc<\/span><span class=\"p\">,<\/span> <span class=\"kt\">char<\/span><span class=\"o\">**<\/span> <span class=\"n\">argv<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"c1\">\/\/ print output using printf, for &quot;print formatted&quot;<\/span>\r\n  <span class=\"c1\">\/\/ %d is an integer, \\n is a newline<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"mi\">0<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; Prints 0<\/span>\r\n\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n  <span class=\"c1\">\/\/ Types<\/span>\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n  <span class=\"c1\">\/\/ All variables MUST be declared at the top of the current block scope<\/span>\r\n  <span class=\"c1\">\/\/ we declare them dynamically along the code for the sake of the tutorial<\/span>\r\n  <span class=\"c1\">\/\/ (however, C99-compliant compilers allow declarations near the point where<\/span>\r\n  <span class=\"c1\">\/\/ the value is used)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ ints are usually 4 bytes<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">x_int<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ shorts are usually 2 bytes<\/span>\r\n  <span class=\"kt\">short<\/span> <span class=\"n\">x_short<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ chars are guaranteed to be 1 byte<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">x_char<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">y_char<\/span> <span class=\"o\">=<\/span> <span class=\"sc\">&#39;y&#39;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Char literals are quoted with &#39;&#39;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ longs are often 4 to 8 bytes; long longs are guaranteed to be at least<\/span>\r\n  <span class=\"c1\">\/\/ 8 bytes<\/span>\r\n  <span class=\"kt\">long<\/span> <span class=\"n\">x_long<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">long<\/span> <span class=\"kt\">long<\/span> <span class=\"n\">x_long_long<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ floats are usually 32-bit floating point numbers<\/span>\r\n  <span class=\"kt\">float<\/span> <span class=\"n\">x_float<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">0.0f<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ &#39;f&#39; suffix here denotes floating point literal<\/span>\r\n\r\n  <span class=\"c1\">\/\/ doubles are usually 64-bit floating-point numbers<\/span>\r\n  <span class=\"kt\">double<\/span> <span class=\"n\">x_double<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">0.0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ real numbers without any suffix are doubles<\/span>\r\n\r\n  <span class=\"c1\">\/\/ integer types may be unsigned (greater than or equal to zero)<\/span>\r\n  <span class=\"kt\">unsigned<\/span> <span class=\"kt\">short<\/span> <span class=\"n\">ux_short<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">unsigned<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">ux_int<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">unsigned<\/span> <span class=\"kt\">long<\/span> <span class=\"kt\">long<\/span> <span class=\"n\">ux_long_long<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ chars inside single quotes are integers in machine&#39;s character set.<\/span>\r\n  <span class=\"sc\">&#39;0&#39;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 48 in the ASCII character set.<\/span>\r\n  <span class=\"sc\">&#39;A&#39;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 65 in the ASCII character set.<\/span>\r\n\r\n  <span class=\"c1\">\/\/ sizeof(T) gives you the size of a variable with type T in bytes<\/span>\r\n  <span class=\"c1\">\/\/ sizeof(obj) yields the size of the expression (variable, literal, etc.).<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%zu<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span><span class=\"p\">));<\/span> <span class=\"c1\">\/\/ =&gt; 4 (on most machines with 4-byte words)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ If the argument of the `sizeof` operator is an expression, then its argument<\/span>\r\n  <span class=\"c1\">\/\/ is not evaluated (except VLAs (see below)).<\/span>\r\n  <span class=\"c1\">\/\/ The value it yields in this case is a compile-time constant.<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">a<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"c1\">\/\/ size_t is an unsigned integer type of at least 2 bytes used to represent<\/span>\r\n  <span class=\"c1\">\/\/ the size of an object.<\/span>\r\n  <span class=\"kt\">size_t<\/span> <span class=\"n\">size<\/span> <span class=\"o\">=<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"n\">a<\/span><span class=\"o\">++<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ a++ is not evaluated<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;sizeof(a++) = %zu where a = %d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">size<\/span><span class=\"p\">,<\/span> <span class=\"n\">a<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"c1\">\/\/ prints &quot;sizeof(a++) = 4 where a = 1&quot; (on a 32-bit architecture)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Arrays must be initialized with a concrete size.<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">my_char_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">20<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ This array occupies 1 * 20 = 20 bytes<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">my_int_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">20<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ This array occupies 4 * 20 = 80 bytes<\/span>\r\n  <span class=\"c1\">\/\/ (assuming 4-byte words)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can initialize an array to 0 thusly:<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">my_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">20<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"mi\">0<\/span><span class=\"p\">};<\/span>\r\n  <span class=\"c1\">\/\/ where the &quot;{0}&quot; part is called an &quot;array initializer&quot;.<\/span>\r\n  <span class=\"c1\">\/\/ NOTE that you get away without explicitly declaring the size of the array,<\/span>\r\n  <span class=\"c1\">\/\/ IF you initialize the array on the same line. So, the following declaration<\/span>\r\n  <span class=\"c1\">\/\/ is equivalent:<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">my_array<\/span><span class=\"p\">[]<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"mi\">0<\/span><span class=\"p\">};<\/span>\r\n  <span class=\"c1\">\/\/ BUT, then you have to evaluate the size of the array at run-time, like this:<\/span>\r\n  <span class=\"kt\">size_t<\/span> <span class=\"n\">my_array_size<\/span> <span class=\"o\">=<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"n\">my_array<\/span><span class=\"p\">)<\/span> <span class=\"o\">\/<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"n\">my_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]);<\/span>\r\n  <span class=\"c1\">\/\/ WARNING If you adopt this approach, you should evaluate the size *before*<\/span>\r\n  <span class=\"c1\">\/\/ you begin passing the array to function (see later discussion), because<\/span>\r\n  <span class=\"c1\">\/\/ arrays get &quot;downgraded&quot; to raw pointers when they are passed to functions<\/span>\r\n  <span class=\"c1\">\/\/ (so the statement above will produce the wrong result inside the function).<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Indexing an array is like other languages -- or,<\/span>\r\n  <span class=\"c1\">\/\/ rather, other languages are like C<\/span>\r\n  <span class=\"n\">my_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ =&gt; 0<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Arrays are mutable; it&#39;s just memory!<\/span>\r\n  <span class=\"n\">my_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">my_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">]);<\/span> <span class=\"c1\">\/\/ =&gt; 2<\/span>\r\n\r\n  <span class=\"c1\">\/\/ In C99 (and as an optional feature in C11), variable-length arrays (VLAs)<\/span>\r\n  <span class=\"c1\">\/\/ can be declared as well. The size of such an array need not be a compile<\/span>\r\n  <span class=\"c1\">\/\/ time constant:<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Enter the array size: &quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ ask the user for an array size<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">array_size<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">fscanf<\/span><span class=\"p\">(<\/span><span class=\"n\">stdin<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;%d&quot;<\/span><span class=\"p\">,<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">array_size<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">var_length_array<\/span><span class=\"p\">[<\/span><span class=\"n\">array_size<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ declare the VLA<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;sizeof array = %zu<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"k\">sizeof<\/span> <span class=\"n\">var_length_array<\/span><span class=\"p\">);<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Example:<\/span>\r\n  <span class=\"c1\">\/\/ &gt; Enter the array size: 10<\/span>\r\n  <span class=\"c1\">\/\/ &gt; sizeof array = 40<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Strings are just arrays of chars terminated by a NULL (0x00) byte,<\/span>\r\n  <span class=\"c1\">\/\/ represented in strings as the special character &#39;\\0&#39;.<\/span>\r\n  <span class=\"c1\">\/\/ (We don&#39;t have to include the NULL byte in string literals; the compiler<\/span>\r\n  <span class=\"c1\">\/\/  inserts it at the end of the array for us.)<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">a_string<\/span><span class=\"p\">[<\/span><span class=\"mi\">20<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;This is a string&quot;<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%s<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">a_string<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ %s formats a string<\/span>\r\n\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">a_string<\/span><span class=\"p\">[<\/span><span class=\"mi\">16<\/span><span class=\"p\">]);<\/span> <span class=\"c1\">\/\/ =&gt; 0<\/span>\r\n  <span class=\"c1\">\/\/ i.e., byte #17 is 0 (as are 18, 19, and 20)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ If we have characters between single quotes, that&#39;s a character literal.<\/span>\r\n  <span class=\"c1\">\/\/ It&#39;s of type `int`, and *not* `char` (for historical reasons).<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">cha<\/span> <span class=\"o\">=<\/span> <span class=\"sc\">&#39;a&#39;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ fine<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">chb<\/span> <span class=\"o\">=<\/span> <span class=\"sc\">&#39;a&#39;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ fine too (implicit conversion from int to char)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Multi-dimensional arrays:<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">multi_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">2<\/span><span class=\"p\">][<\/span><span class=\"mi\">5<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">},<\/span>\r\n    <span class=\"p\">{<\/span><span class=\"mi\">6<\/span><span class=\"p\">,<\/span> <span class=\"mi\">7<\/span><span class=\"p\">,<\/span> <span class=\"mi\">8<\/span><span class=\"p\">,<\/span> <span class=\"mi\">9<\/span><span class=\"p\">,<\/span> <span class=\"mi\">0<\/span><span class=\"p\">}<\/span>\r\n  <span class=\"p\">};<\/span>\r\n  <span class=\"c1\">\/\/ access elements:<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">array_int<\/span> <span class=\"o\">=<\/span> <span class=\"n\">multi_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">][<\/span><span class=\"mi\">2<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ =&gt; 3<\/span>\r\n\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n  <span class=\"c1\">\/\/ Operators<\/span>\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Shorthands for multiple declarations:<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">i1<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"n\">i2<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">float<\/span> <span class=\"n\">f1<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">1.0<\/span><span class=\"p\">,<\/span> <span class=\"n\">f2<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">2.0<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">b<\/span><span class=\"p\">,<\/span> <span class=\"n\">c<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">b<\/span> <span class=\"o\">=<\/span> <span class=\"n\">c<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Arithmetic is straightforward<\/span>\r\n  <span class=\"n\">i1<\/span> <span class=\"o\">+<\/span> <span class=\"n\">i2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 3<\/span>\r\n  <span class=\"n\">i2<\/span> <span class=\"o\">-<\/span> <span class=\"n\">i1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 1<\/span>\r\n  <span class=\"n\">i2<\/span> <span class=\"o\">*<\/span> <span class=\"n\">i1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 2<\/span>\r\n  <span class=\"n\">i1<\/span> <span class=\"o\">\/<\/span> <span class=\"n\">i2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0 (0.5, but truncated towards 0)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You need to cast at least one integer to float to get a floating-point result<\/span>\r\n  <span class=\"p\">(<\/span><span class=\"kt\">float<\/span><span class=\"p\">)<\/span><span class=\"n\">i1<\/span> <span class=\"o\">\/<\/span> <span class=\"n\">i2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0.5f<\/span>\r\n  <span class=\"n\">i1<\/span> <span class=\"o\">\/<\/span> <span class=\"p\">(<\/span><span class=\"kt\">double<\/span><span class=\"p\">)<\/span><span class=\"n\">i2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0.5 \/\/ Same with double<\/span>\r\n  <span class=\"n\">f1<\/span> <span class=\"o\">\/<\/span> <span class=\"n\">f2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0.5, plus or minus epsilon<\/span>\r\n  <span class=\"c1\">\/\/ Floating-point numbers and calculations are not exact<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Modulo is there as well<\/span>\r\n  <span class=\"mi\">11<\/span> <span class=\"o\">%<\/span> <span class=\"mi\">3<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 2<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Comparison operators are probably familiar, but<\/span>\r\n  <span class=\"c1\">\/\/ there is no Boolean type in C. We use ints instead.<\/span>\r\n  <span class=\"c1\">\/\/ (Or _Bool or bool in C99.)<\/span>\r\n  <span class=\"c1\">\/\/ 0 is false, anything else is true. (The comparison<\/span>\r\n  <span class=\"c1\">\/\/ operators always yield 0 or 1.)<\/span>\r\n  <span class=\"mi\">3<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0 (false)<\/span>\r\n  <span class=\"mi\">3<\/span> <span class=\"o\">!=<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 1 (true)<\/span>\r\n  <span class=\"mi\">3<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 1<\/span>\r\n  <span class=\"mi\">3<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0<\/span>\r\n  <span class=\"mi\">2<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 1<\/span>\r\n  <span class=\"mi\">2<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 1<\/span>\r\n\r\n  <span class=\"c1\">\/\/ C is not Python - comparisons don&#39;t chain.<\/span>\r\n  <span class=\"c1\">\/\/ Warning: The line below will compile, but it means `(0 &lt; a) &lt; 2`.<\/span>\r\n  <span class=\"c1\">\/\/ This expression is always true, because (0 &lt; a) could be either 1 or 0.<\/span>\r\n  <span class=\"c1\">\/\/ In this case it&#39;s 1, because (0 &lt; 1).<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">between_0_and_2<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">a<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"c1\">\/\/ Instead use:<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">between_0_and_2<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">a<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"n\">a<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Logic works on ints<\/span>\r\n  <span class=\"o\">!<\/span><span class=\"mi\">3<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0 (Logical not)<\/span>\r\n  <span class=\"o\">!<\/span><span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 1<\/span>\r\n  <span class=\"mi\">1<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 1 (Logical and)<\/span>\r\n  <span class=\"mi\">0<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0<\/span>\r\n  <span class=\"mi\">0<\/span> <span class=\"o\">||<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 1 (Logical or)<\/span>\r\n  <span class=\"mi\">0<\/span> <span class=\"o\">||<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Conditional ternary expression ( ? : )<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">e<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">f<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">z<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">z<\/span> <span class=\"o\">=<\/span> <span class=\"p\">(<\/span><span class=\"n\">e<\/span> <span class=\"o\">&gt;<\/span> <span class=\"n\">f<\/span><span class=\"p\">)<\/span> <span class=\"o\">?<\/span> <span class=\"nl\">e<\/span> <span class=\"p\">:<\/span> <span class=\"n\">f<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 10 &quot;if e &gt; f return e, else return f.&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Increment and decrement operators:<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">j<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">s<\/span> <span class=\"o\">=<\/span> <span class=\"n\">j<\/span><span class=\"o\">++<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Return j THEN increase j. (s = 0, j = 1)<\/span>\r\n  <span class=\"n\">s<\/span> <span class=\"o\">=<\/span> <span class=\"o\">++<\/span><span class=\"n\">j<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Increase j THEN return j. (s = 2, j = 2)<\/span>\r\n  <span class=\"c1\">\/\/ same with j-- and --j<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Bitwise operators!<\/span>\r\n  <span class=\"o\">~<\/span><span class=\"mh\">0x0F<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0xFFFFFFF0 (bitwise negation, &quot;1&#39;s complement&quot;, example result for 32-bit int)<\/span>\r\n  <span class=\"mh\">0x0F<\/span> <span class=\"o\">&amp;<\/span> <span class=\"mh\">0xF0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0x00 (bitwise AND)<\/span>\r\n  <span class=\"mh\">0x0F<\/span> <span class=\"o\">|<\/span> <span class=\"mh\">0xF0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0xFF (bitwise OR)<\/span>\r\n  <span class=\"mh\">0x04<\/span> <span class=\"o\">^<\/span> <span class=\"mh\">0x0F<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0x0B (bitwise XOR)<\/span>\r\n  <span class=\"mh\">0x01<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0x02 (bitwise left shift (by 1))<\/span>\r\n  <span class=\"mh\">0x02<\/span> <span class=\"o\">&gt;&gt;<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ =&gt; 0x01 (bitwise right shift (by 1))<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Be careful when shifting signed integers - the following are undefined:<\/span>\r\n  <span class=\"c1\">\/\/ - shifting into the sign bit of a signed integer (int a = 1 &lt;&lt; 31)<\/span>\r\n  <span class=\"c1\">\/\/ - left-shifting a negative number (int a = -1 &lt;&lt; 2)<\/span>\r\n  <span class=\"c1\">\/\/ - shifting by an offset which is &gt;= the width of the type of the LHS:<\/span>\r\n  <span class=\"c1\">\/\/   int a = 1 &lt;&lt; 32; \/\/ UB if int is 32 bits wide<\/span>\r\n\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n  <span class=\"c1\">\/\/ Control Structures<\/span>\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n  <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;I am never run<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"p\">}<\/span> <span class=\"k\">else<\/span> <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;I am also never run<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"p\">}<\/span> <span class=\"k\">else<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;I print<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"p\">}<\/span>\r\n\r\n  <span class=\"c1\">\/\/ While loops exist<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">ii<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">while<\/span> <span class=\"p\">(<\/span><span class=\"n\">ii<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span> <span class=\"c1\">\/\/ANY value less than ten is true.<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d, &quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">ii<\/span><span class=\"o\">++<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ ii++ increments ii AFTER using its current value.<\/span>\r\n  <span class=\"p\">}<\/span> <span class=\"c1\">\/\/ =&gt; prints &quot;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;<\/span>\r\n\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">kk<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">do<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d, &quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">kk<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"p\">}<\/span> <span class=\"k\">while<\/span> <span class=\"p\">(<\/span><span class=\"o\">++<\/span><span class=\"n\">kk<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ ++kk increments kk BEFORE using its current value.<\/span>\r\n  <span class=\"c1\">\/\/ =&gt; prints &quot;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;<\/span>\r\n\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n\r\n  <span class=\"c1\">\/\/ For loops too<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">jj<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">jj<\/span><span class=\"o\">=<\/span><span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">jj<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span> <span class=\"n\">jj<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d, &quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">jj<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"p\">}<\/span> <span class=\"c1\">\/\/ =&gt; prints &quot;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;<\/span>\r\n\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n\r\n ",


    
    "1":"<span class=\"c1\">\/\/ *****NOTES*****:<\/span>\r\n  <span class=\"c1\">\/\/ Loops and Functions MUST have a body. If no body is needed:<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">i<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"p\">;<\/span> <span class=\"c1\">\/\/ use semicolon to act as the body (null statement)<\/span>\r\n  <span class=\"p\">}<\/span>\r\n  <span class=\"c1\">\/\/ Or<\/span>\r\n  <span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span><span class=\"o\">++<\/span><span class=\"p\">);<\/span>\r\n\r\n  <span class=\"c1\">\/\/ branching with multiple choices: switch()<\/span>\r\n  <span class=\"k\">switch<\/span> <span class=\"p\">(<\/span><span class=\"n\">a<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"mi\">0<\/span><span class=\"o\">:<\/span> <span class=\"c1\">\/\/ labels need to be integral *constant* expressions (such as enums)<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Hey, &#39;a&#39; equals 0!<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">break<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ if you don&#39;t break, control flow falls over labels<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"mi\">1<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Huh, &#39;a&#39; equals 1!<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">break<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"c1\">\/\/ Be careful - without a &quot;break&quot;, execution continues until the<\/span>\r\n    <span class=\"c1\">\/\/ next &quot;break&quot; is reached.<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"mi\">3<\/span><span class=\"o\">:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"mi\">4<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Look at that.. &#39;a&#39; is either 3, or 4<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">break<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">default<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"c1\">\/\/ if `some_integral_expression` didn&#39;t match any of the labels<\/span>\r\n    <span class=\"n\">fputs<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Error!<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">stderr<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"n\">exit<\/span><span class=\"p\">(<\/span><span class=\"o\">-<\/span><span class=\"mi\">1<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">break<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"p\">}<\/span>\r\n  <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">  using &quot;goto&quot; in C<\/span>\r\n<span class=\"cm\">  *\/<\/span>\r\n  <span class=\"k\">typedef<\/span> <span class=\"k\">enum<\/span> <span class=\"p\">{<\/span> <span class=\"nb\">false<\/span><span class=\"p\">,<\/span> <span class=\"nb\">true<\/span> <span class=\"p\">}<\/span> <span class=\"kt\">bool<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"c1\">\/\/ for C don&#39;t have bool as data type before C99 :(<\/span>\r\n  <span class=\"kt\">bool<\/span> <span class=\"n\">disaster<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">false<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">i<\/span><span class=\"p\">,<\/span> <span class=\"n\">j<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">=<\/span><span class=\"mi\">0<\/span><span class=\"p\">;<\/span><span class=\"n\">i<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">100<\/span><span class=\"p\">;<\/span><span class=\"o\">++<\/span><span class=\"n\">i<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"k\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">j<\/span><span class=\"o\">=<\/span><span class=\"mi\">0<\/span><span class=\"p\">;<\/span><span class=\"n\">j<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">100<\/span><span class=\"p\">;<\/span><span class=\"o\">++<\/span><span class=\"n\">j<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"p\">{<\/span>\r\n    <span class=\"k\">if<\/span><span class=\"p\">((<\/span><span class=\"n\">i<\/span> <span class=\"o\">+<\/span> <span class=\"n\">j<\/span><span class=\"p\">)<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"mi\">150<\/span><span class=\"p\">)<\/span>\r\n        <span class=\"n\">disaster<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">true<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"k\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">disaster<\/span><span class=\"p\">)<\/span>\r\n        <span class=\"k\">goto<\/span> <span class=\"n\">error<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"p\">}<\/span>\r\n  <span class=\"nl\">error<\/span> <span class=\"p\">:<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Error occurred at i = %d &amp; j = %d.<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">i<\/span><span class=\"p\">,<\/span> <span class=\"n\">j<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">  https:\/\/ideone.com\/GuPhd6<\/span>\r\n<span class=\"cm\">  this will print out &quot;Error occurred at i = 51 &amp; j = 99.&quot;<\/span>\r\n<span class=\"cm\">  *\/<\/span>\r\n\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n  <span class=\"c1\">\/\/ Typecasting<\/span>\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Every value in C has a type, but you can cast one value into another type<\/span>\r\n  <span class=\"c1\">\/\/ if you want (with some constraints).<\/span>\r\n\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">x_hex<\/span> <span class=\"o\">=<\/span> <span class=\"mh\">0x01<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ You can assign vars with hex literals<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Casting between types will attempt to preserve their numeric values<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_hex<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; Prints 1<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"kt\">short<\/span><span class=\"p\">)<\/span> <span class=\"n\">x_hex<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; Prints 1<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"kt\">char<\/span><span class=\"p\">)<\/span> <span class=\"n\">x_hex<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; Prints 1<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Types will overflow without warning<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"kt\">unsigned<\/span> <span class=\"kt\">char<\/span><span class=\"p\">)<\/span> <span class=\"mi\">257<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; 1 (Max char = 255 if char is 8 bits long)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ For determining the max value of a `char`, a `signed char` and an `unsigned char`,<\/span>\r\n  <span class=\"c1\">\/\/ respectively, use the CHAR_MAX, SCHAR_MAX and UCHAR_MAX macros from &lt;limits.h&gt;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Integral types can be cast to floating-point types, and vice-versa.<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%f<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"kt\">double<\/span><span class=\"p\">)<\/span> <span class=\"mi\">100<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ %f always formats a double...<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%f<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"kt\">float<\/span><span class=\"p\">)<\/span>  <span class=\"mi\">100<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ ...even with a float.<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"kt\">char<\/span><span class=\"p\">)<\/span><span class=\"mf\">100.0<\/span><span class=\"p\">);<\/span>\r\n\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n  <span class=\"c1\">\/\/ Pointers<\/span>\r\n  <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n  <span class=\"c1\">\/\/ A pointer is a variable declared to store a memory address. Its declaration will<\/span>\r\n  <span class=\"c1\">\/\/ also tell you the type of data it points to. You can retrieve the memory address<\/span>\r\n  <span class=\"c1\">\/\/ of your variables, then mess with them.<\/span>\r\n\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%p<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"kt\">void<\/span> <span class=\"o\">*<\/span><span class=\"p\">)<\/span><span class=\"o\">&amp;<\/span><span class=\"n\">x<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Use &amp; to retrieve the address of a variable<\/span>\r\n  <span class=\"c1\">\/\/ (%p formats an object pointer of type void *)<\/span>\r\n  <span class=\"c1\">\/\/ =&gt; Prints some address in memory;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Pointers start with * in their declaration<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"o\">*<\/span><span class=\"n\">px<\/span><span class=\"p\">,<\/span> <span class=\"n\">not_a_pointer<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ px is a pointer to an int<\/span>\r\n  <span class=\"n\">px<\/span> <span class=\"o\">=<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">x<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Stores the address of x in px<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%p<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"kt\">void<\/span> <span class=\"o\">*<\/span><span class=\"p\">)<\/span><span class=\"n\">px<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; Prints some address in memory<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%zu, %zu<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"n\">px<\/span><span class=\"p\">),<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"n\">not_a_pointer<\/span><span class=\"p\">));<\/span>\r\n  <span class=\"c1\">\/\/ =&gt; Prints &quot;8, 4&quot; on a typical 64-bit system<\/span>\r\n\r\n  <span class=\"c1\">\/\/ To retrieve the value at the address a pointer is pointing to,<\/span>\r\n  <span class=\"c1\">\/\/ put * in front to dereference it.<\/span>\r\n  <span class=\"c1\">\/\/ Note: yes, it may be confusing that &#39;*&#39; is used for _both_ declaring a<\/span>\r\n  <span class=\"c1\">\/\/ pointer and dereferencing it.<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"o\">*<\/span><span class=\"n\">px<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; Prints 0, the value of x<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can also change the value the pointer is pointing to.<\/span>\r\n  <span class=\"c1\">\/\/ We&#39;ll have to wrap the dereference in parenthesis because<\/span>\r\n  <span class=\"c1\">\/\/ ++ has a higher precedence than *.<\/span>\r\n  <span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">px<\/span><span class=\"p\">)<\/span><span class=\"o\">++<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Increment the value px is pointing to by 1<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"o\">*<\/span><span class=\"n\">px<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; Prints 1<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">x<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; Prints 1<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Arrays are a good way to allocate a contiguous block of memory<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">x_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">20<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/declares array of size 20 (cannot change size)<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">xx<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">xx<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">xx<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">20<\/span><span class=\"p\">;<\/span> <span class=\"n\">xx<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">x_array<\/span><span class=\"p\">[<\/span><span class=\"n\">xx<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">20<\/span> <span class=\"o\">-<\/span> <span class=\"n\">xx<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"p\">}<\/span> <span class=\"c1\">\/\/ Initialize x_array to 20, 19, 18,... 2, 1<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Declare a pointer of type int and initialize it to point to x_array<\/span>\r\n  <span class=\"kt\">int<\/span><span class=\"o\">*<\/span> <span class=\"n\">x_ptr<\/span> <span class=\"o\">=<\/span> <span class=\"n\">x_array<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"c1\">\/\/ x_ptr now points to the first element in the array (the integer 20).<\/span>\r\n  <span class=\"c1\">\/\/ This works because arrays often decay into pointers to their first element.<\/span>\r\n  <span class=\"c1\">\/\/ For example, when an array is passed to a function or is assigned to a pointer,<\/span>\r\n  <span class=\"c1\">\/\/ it decays into (implicitly converted to) a pointer.<\/span>\r\n  <span class=\"c1\">\/\/ Exceptions: when the array is the argument of the `&amp;` (address-of) operator:<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">arr<\/span><span class=\"p\">[<\/span><span class=\"mi\">10<\/span><span class=\"p\">];<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">ptr_to_arr<\/span><span class=\"p\">)[<\/span><span class=\"mi\">10<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">arr<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ &amp;arr is NOT of type `int *`!<\/span>\r\n  <span class=\"c1\">\/\/ It&#39;s of type &quot;pointer to array&quot; (of ten `int`s).<\/span>\r\n  <span class=\"c1\">\/\/ or when the array is a string literal used for initializing a char array:<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">otherarr<\/span><span class=\"p\">[]<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;foobarbazquirk&quot;<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"c1\">\/\/ or when it&#39;s the argument of the `sizeof` or `alignof` operator:<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">arraythethird<\/span><span class=\"p\">[<\/span><span class=\"mi\">10<\/span><span class=\"p\">];<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"o\">*<\/span><span class=\"n\">ptr<\/span> <span class=\"o\">=<\/span> <span class=\"n\">arraythethird<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ equivalent with int *ptr = &amp;arr[0];<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%zu, %zu<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"n\">arraythethird<\/span><span class=\"p\">),<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"n\">ptr<\/span><span class=\"p\">));<\/span>\r\n  <span class=\"c1\">\/\/ probably prints &quot;40, 4&quot; or &quot;40, 8&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Pointers are incremented and decremented based on their type<\/span>\r\n  <span class=\"c1\">\/\/ (this is called pointer arithmetic)<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"o\">*<\/span><span class=\"p\">(<\/span><span class=\"n\">x_ptr<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span><span class=\"p\">));<\/span> <span class=\"c1\">\/\/ =&gt; Prints 19<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_array<\/span><span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">]);<\/span> <span class=\"c1\">\/\/ =&gt; Prints 19<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can also dynamically allocate contiguous blocks of memory with the<\/span>\r\n  <span class=\"c1\">\/\/ standard library function malloc, which takes one argument of type size_t<\/span>\r\n  <span class=\"c1\">\/\/ representing the number of bytes to allocate (usually from the heap, although this<\/span>\r\n  <span class=\"c1\">\/\/ may not be true on e.g. embedded systems - the C standard says nothing about it).<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"o\">*<\/span><span class=\"n\">my_ptr<\/span> <span class=\"o\">=<\/span> <span class=\"n\">malloc<\/span><span class=\"p\">(<\/span><span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">my_ptr<\/span><span class=\"p\">)<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">20<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">xx<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">xx<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">20<\/span><span class=\"p\">;<\/span> <span class=\"n\">xx<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"o\">*<\/span><span class=\"p\">(<\/span><span class=\"n\">my_ptr<\/span> <span class=\"o\">+<\/span> <span class=\"n\">xx<\/span><span class=\"p\">)<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">20<\/span> <span class=\"o\">-<\/span> <span class=\"n\">xx<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ my_ptr[xx] = 20-xx<\/span>\r\n  <span class=\"p\">}<\/span> <span class=\"c1\">\/\/ Initialize memory to 20, 19, 18, 17... 2, 1 (as ints)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Be careful passing user-provided values to malloc! If you want<\/span>\r\n  <span class=\"c1\">\/\/ to be safe, you can use calloc instead (which, unlike malloc, also zeros out the memory)<\/span>\r\n  <span class=\"kt\">int<\/span><span class=\"o\">*<\/span> <span class=\"n\">my_other_ptr<\/span> <span class=\"o\">=<\/span> <span class=\"n\">calloc<\/span><span class=\"p\">(<\/span><span class=\"mi\">20<\/span><span class=\"p\">,<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span><span class=\"p\">));<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Note that there is no standard way to get the length of a<\/span>\r\n  <span class=\"c1\">\/\/ dynamically allocated array in C. Because of this, if your arrays are<\/span>\r\n  <span class=\"c1\">\/\/ going to be passed around your program a lot, you need another variable<\/span>\r\n  <span class=\"c1\">\/\/ to keep track of the number of elements (size) of an array. See the<\/span>\r\n  <span class=\"c1\">\/\/ functions section for more info.<\/span>\r\n  <span class=\"kt\">size_t<\/span> <span class=\"n\">size<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"o\">*<\/span><span class=\"n\">my_arr<\/span> <span class=\"o\">=<\/span> <span class=\"n\">calloc<\/span><span class=\"p\">(<\/span><span class=\"n\">size<\/span><span class=\"p\">,<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span><span class=\"p\">));<\/span>\r\n  <span class=\"c1\">\/\/ Add an element to the array<\/span>\r\n  <span class=\"n\">size<\/span><span class=\"o\">++<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">my_arr<\/span> <span class=\"o\">=<\/span> <span class=\"n\">realloc<\/span><span class=\"p\">(<\/span><span class=\"n\">my_arr<\/span><span class=\"p\">,<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"o\">*<\/span> <span class=\"n\">size<\/span><span class=\"p\">);<\/span>\r\n  <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"n\">my_arr<\/span> <span class=\"o\">==<\/span> <span class=\"nb\">NULL<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/Remember to check for realloc failure!<\/span>\r\n    <span class=\"k\">return<\/span>\r\n  <span class=\"p\">}<\/span>\r\n  <span class=\"n\">my_arr<\/span><span class=\"p\">[<\/span><span class=\"mi\">10<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Dereferencing memory that you haven&#39;t allocated gives<\/span>\r\n  <span class=\"c1\">\/\/ &quot;unpredictable results&quot; - the program is said to invoke &quot;undefined behavior&quot;<\/span>\r\n  <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"o\">*<\/span><span class=\"p\">(<\/span><span class=\"n\">my_ptr<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">21<\/span><span class=\"p\">));<\/span> <span class=\"c1\">\/\/ =&gt; Prints who-knows-what? It may even crash.<\/span>\r\n\r\n  <span class=\"c1\">\/\/ When you&#39;re done with a malloc&#39;d block of memory, you need to free it,<\/span>\r\n  <span class=\"c1\">\/\/ or else no one else can use it until your program terminates<\/span>\r\n  <span class=\"c1\">\/\/ (this is called a &quot;memory leak&quot;):<\/span>\r\n  <span class=\"n\">free<\/span><span class=\"p\">(<\/span><span class=\"n\">my_ptr<\/span><span class=\"p\">);<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Strings are arrays of char, but they are usually represented as a<\/span>\r\n  <span class=\"c1\">\/\/ pointer-to-char (which is a pointer to the first element of the array).<\/span>\r\n  <span class=\"c1\">\/\/ It&#39;s good practice to use `const char *&#39; when referring to a string literal,<\/span>\r\n  <span class=\"c1\">\/\/ since string literals shall not be modified (i.e. &quot;foo&quot;[0] = &#39;a&#39; is ILLEGAL.)<\/span>\r\n  <span class=\"k\">const<\/span> <span class=\"kt\">char<\/span> <span class=\"o\">*<\/span><span class=\"n\">my_str<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;This is my very own string literal&quot;<\/span><span class=\"p\">;<\/span>\r\n  <span><\/span><span class=\"c1\"># This is a comment<\/span>\r\n\r\n<span class=\"c1\"># In Ruby, (almost) everything is an object.<\/span>\r\n<span class=\"c1\"># This includes numbers...<\/span>\r\n<span class=\"mi\">3<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; Integer<\/span>\r\n\r\n<span class=\"c1\"># ...and strings...<\/span>\r\n<span class=\"s2\">&quot;Hello&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; String<\/span>\r\n\r\n<span class=\"c1\"># ...and even methods!<\/span>\r\n<span class=\"s2\">&quot;Hello&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">method<\/span><span class=\"p\">(<\/span><span class=\"ss\">:class<\/span><span class=\"p\">)<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; Method<\/span>\r\n\r\n<span class=\"c1\"># Some basic arithmetic<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; 2<\/span>\r\n<span class=\"mi\">8<\/span> <span class=\"o\">-<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; 7<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span> <span class=\"c1\">#=&gt; 20<\/span>\r\n<span class=\"mi\">35<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 7<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">**<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 32<\/span>\r\n<span class=\"mi\">5<\/span> <span class=\"o\">%<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">#=&gt; 2<\/span>\r\n\r\n<span class=\"c1\"># Bitwise operators<\/span>\r\n<span class=\"mi\">3<\/span> <span class=\"o\">&amp;<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 1<\/span>\r\n<span class=\"mi\">3<\/span> <span class=\"o\">|<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 7<\/span>\r\n<span class=\"mi\">3<\/span> <span class=\"o\">^<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 6<\/span>\r\n\r\n<span class=\"c1\"># Arithmetic is just syntactic sugar<\/span>\r\n<span class=\"c1\"># for calling a method on an object<\/span>\r\n<span class=\"mi\">1<\/span><span class=\"o\">.<\/span><span class=\"n n-Operator\">+<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; 4<\/span>\r\n<span class=\"mi\">10<\/span><span class=\"o\">.<\/span><span class=\"n n-Operator\">*<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 50<\/span>\r\n<span class=\"mi\">100<\/span><span class=\"o\">.<\/span><span class=\"n\">methods<\/span><span class=\"o\">.<\/span><span class=\"n\">include?<\/span><span class=\"p\">(<\/span><span class=\"ss\">:\/<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># Special values are objects<\/span>\r\n<span class=\"kp\">nil<\/span> <span class=\"c1\"># equivalent to null in other languages<\/span>\r\n<span class=\"kp\">true<\/span> <span class=\"c1\"># truth<\/span>\r\n<span class=\"kp\">false<\/span> <span class=\"c1\"># falsehood<\/span>\r\n\r\n<span class=\"kp\">nil<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; NilClass<\/span>\r\n<span class=\"kp\">true<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; TrueClass<\/span>\r\n<span class=\"kp\">false<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; FalseClass<\/span>\r\n\r\n<span class=\"c1\"># Equality<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n\r\n<span class=\"c1\"># Inequality<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">!=<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">!=<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># Apart from false itself, nil is the only other &#39;falsey&#39; value<\/span>\r\n\r\n<span class=\"o\">!!<\/span><span class=\"kp\">nil<\/span>   <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"o\">!!<\/span><span class=\"kp\">false<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"o\">!!<\/span><span class=\"mi\">0<\/span>     <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"o\">!!<\/span><span class=\"s2\">&quot;&quot;<\/span>    <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># More comparisons<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">2<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"mi\">2<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># Combined comparison operator (returns `1` when the first argument is greater, <\/span>\r\n<span class=\"c1\"># `-1` when the second argument is greater, and `0` otherwise)<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;=&gt;<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">#=&gt; -1 (1 &lt; 10)<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"o\">&lt;=&gt;<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; 1 (10 &gt; 1)<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;=&gt;<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; 0 (1 == 1)<\/span>\r\n\r\n<span class=\"c1\"># Logical operators<\/span>\r\n<span class=\"kp\">true<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"kp\">false<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"kp\">true<\/span> <span class=\"o\">||<\/span> <span class=\"kp\">false<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># There are alternate versions of the logical operators with much lower<\/span>\r\n<span class=\"c1\"># precedence. These are meant to be used as flow-control constructs to chain<\/span>\r\n<span class=\"c1\"># statements together until one of them returns true or false.<\/span>\r\n\r\n<span class=\"c1\"># `do_something_else` only called if `do_something` succeeds.<\/span>\r\n<span class=\"n\">do_something<\/span><span class=\"p\">()<\/span> <span class=\"ow\">and<\/span> <span class=\"n\">do_something_else<\/span><span class=\"p\">()<\/span>\r\n<span class=\"c1\"># `log_error` only called if `do_something` fails.<\/span>\r\n<span class=\"n\">do_something<\/span><span class=\"p\">()<\/span> <span class=\"ow\">or<\/span> <span class=\"n\">log_error<\/span><span class=\"p\">()<\/span>\r\n\r\n<span class=\"c1\"># String interpolation<\/span>\r\n\r\n<span class=\"n\">placeholder<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;use string interpolation&#39;<\/span>\r\n<span class=\"s2\">&quot;I can <\/span><span class=\"si\">#{<\/span><span class=\"n\">placeholder<\/span><span class=\"si\">}<\/span><span class=\"s2\"> when using double quoted strings&quot;<\/span>\r\n<span class=\"c1\">#=&gt; &quot;I can use string interpolation when using double quoted strings&quot;<\/span>\r\n\r\n<span class=\"c1\"># You can combine strings using `+`, but not with other types<\/span>\r\n<span class=\"s1\">&#39;hello &#39;<\/span> <span class=\"o\">+<\/span> <span class=\"s1\">&#39;world&#39;<\/span>  <span class=\"c1\">#=&gt; &quot;hello world&quot;<\/span>\r\n<span class=\"s1\">&#39;hello &#39;<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">#=&gt; TypeError: can&#39;t convert Fixnum into String<\/span>\r\n<span class=\"s1\">&#39;hello &#39;<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">3<\/span><span class=\"o\">.<\/span><span class=\"n\">to_s<\/span> <span class=\"c1\">#=&gt; &quot;hello 3&quot;<\/span>\r\n<span class=\"s2\">&quot;hello <\/span><span class=\"si\">#{<\/span><span class=\"mi\">3<\/span><span class=\"si\">}<\/span><span class=\"s2\">&quot;<\/span> <span class=\"c1\">#=&gt; &quot;hello 3&quot;<\/span>\r\n\r\n<span class=\"c1\"># ...or combine strings and operators<\/span>\r\n<span class=\"s1\">&#39;hello &#39;<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">#=&gt; &quot;hello hello hello &quot;<\/span>\r\n\r\n<span class=\"c1\"># ...or append to string<\/span>\r\n<span class=\"s1\">&#39;hello&#39;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s1\">&#39; world&#39;<\/span> <span class=\"c1\">#=&gt; &quot;hello world&quot;<\/span>\r\n\r\n<span class=\"c1\"># You can print to the output with a newline at the end<\/span>\r\n<span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;I&#39;m printing!&quot;<\/span>\r\n<span class=\"c1\">#=&gt; I&#39;m printing!<\/span>\r\n<span class=\"c1\">#=&gt; nil<\/span>\r\n\r\n<span class=\"c1\"># ...or print to the output without a newline<\/span>\r\n<span class=\"nb\">print<\/span> <span class=\"s2\">&quot;I&#39;m printing!&quot;<\/span>\r\n<span class=\"c1\">#=&gt; &quot;I&#39;m printing!&quot; =&gt; nil<\/span>\r\n\r\n<span class=\"c1\"># Variables<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">25<\/span> <span class=\"c1\">#=&gt; 25<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"c1\">#=&gt; 25<\/span>\r\n\r\n<span class=\"c1\"># Note that assignment returns the value assigned.<\/span>\r\n<span class=\"c1\"># This means you can do multiple assignment.<\/span>\r\n\r\n<span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">#=&gt; 10<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"c1\">#=&gt; 10<\/span>\r\n<span class=\"n\">y<\/span> <span class=\"c1\">#=&gt; 10<\/span>\r\n\r\n<span class=\"c1\"># By convention, use snake_case for variable names.<\/span>\r\n<span class=\"n\">snake_case<\/span> <span class=\"o\">=<\/span> <span class=\"kp\">true<\/span>\r\n\r\n<span class=\"c1\"># Use descriptive variable names<\/span>\r\n<span class=\"n\">path_to_project_root<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;\/good\/name\/&#39;<\/span>\r\n<span class=\"n\">m<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;\/bad\/name\/&#39;<\/span>\r\n\r\n<span class=\"c1\"># Symbols are immutable, reusable constants represented internally by an<\/span>\r\n",

        "2":"<span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%c<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"o\">*<\/span><span class=\"n\">my_str<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ =&gt; &#39;T&#39;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ This is not the case if the string is an array<\/span>\r\n  <span class=\"c1\">\/\/ (potentially initialized with a string literal)<\/span>\r\n  <span class=\"c1\">\/\/ that resides in writable memory, as in:<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">foo<\/span><span class=\"p\">[]<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;foo&quot;<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">foo<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"sc\">&#39;a&#39;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ this is legal, foo now contains &quot;aoo&quot;<\/span>\r\n\r\n  <span class=\"n\">function_1<\/span><span class=\"p\">();<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"c1\">\/\/ end main function<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Functions<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Function declaration syntax:<\/span>\r\n<span class=\"c1\">\/\/ &lt;return type&gt; &lt;function name&gt;(&lt;args&gt;)<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">add_two_ints<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">x1<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">x2<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"k\">return<\/span> <span class=\"n\">x1<\/span> <span class=\"o\">+<\/span> <span class=\"n\">x2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Use return to return a value<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">Functions are call by value. When a function is called, the arguments passed to<\/span>\r\n<span class=\"cm\">the function are copies of the original arguments (except arrays). Anything you<\/span>\r\n<span class=\"cm\">do to the arguments in the function do not change the value of the original<\/span>\r\n<span class=\"cm\">argument where the function was called.<\/span>\r\n\r\n<span class=\"cm\">Use pointers if you need to edit the original argument values.<\/span>\r\n\r\n<span class=\"cm\">Example: in-place string reversal<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ A void function returns no value<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">str_reverse<\/span><span class=\"p\">(<\/span><span class=\"kt\">char<\/span> <span class=\"o\">*<\/span><span class=\"n\">str_in<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"kt\">char<\/span> <span class=\"n\">tmp<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">size_t<\/span> <span class=\"n\">ii<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">size_t<\/span> <span class=\"n\">len<\/span> <span class=\"o\">=<\/span> <span class=\"n\">strlen<\/span><span class=\"p\">(<\/span><span class=\"n\">str_in<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ `strlen()` is part of the c standard library<\/span>\r\n                               <span class=\"c1\">\/\/ NOTE: length returned by `strlen` DOESN&#39;T include the<\/span>\r\n                               <span class=\"c1\">\/\/       terminating NULL byte (&#39;\\0&#39;)<\/span>\r\n  <span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">ii<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">ii<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">len<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"n\">ii<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span> <span class=\"c1\">\/\/ in C99 you can directly declare type of `ii` here<\/span>\r\n    <span class=\"n\">tmp<\/span> <span class=\"o\">=<\/span> <span class=\"n\">str_in<\/span><span class=\"p\">[<\/span><span class=\"n\">ii<\/span><span class=\"p\">];<\/span>\r\n    <span class=\"n\">str_in<\/span><span class=\"p\">[<\/span><span class=\"n\">ii<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"n\">str_in<\/span><span class=\"p\">[<\/span><span class=\"n\">len<\/span> <span class=\"o\">-<\/span> <span class=\"n\">ii<\/span> <span class=\"o\">-<\/span> <span class=\"mi\">1<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ ii-th char from end<\/span>\r\n    <span class=\"n\">str_in<\/span><span class=\"p\">[<\/span><span class=\"n\">len<\/span> <span class=\"o\">-<\/span> <span class=\"n\">ii<\/span> <span class=\"o\">-<\/span> <span class=\"mi\">1<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"n\">tmp<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"c1\">\/\/NOTE: string.h header file needs to be included to use strlen()<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">char c[] = &quot;This is a test.&quot;;<\/span>\r\n<span class=\"cm\">str_reverse(c);<\/span>\r\n<span class=\"cm\">printf(&quot;%s\\n&quot;, c); \/\/ =&gt; &quot;.tset a si sihT&quot;<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">as we can return only one variable<\/span>\r\n<span class=\"cm\">to change values of more than one variables we use call by reference<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">swapTwoNumbers<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"o\">*<\/span><span class=\"n\">a<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"o\">*<\/span><span class=\"n\">b<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"kt\">int<\/span> <span class=\"n\">temp<\/span> <span class=\"o\">=<\/span> <span class=\"o\">*<\/span><span class=\"n\">a<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"o\">*<\/span><span class=\"n\">a<\/span> <span class=\"o\">=<\/span> <span class=\"o\">*<\/span><span class=\"n\">b<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"o\">*<\/span><span class=\"n\">b<\/span> <span class=\"o\">=<\/span> <span class=\"n\">temp<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">int first = 10;<\/span>\r\n<span class=\"cm\">int second = 20;<\/span>\r\n<span class=\"cm\">printf(&quot;first: %d\\nsecond: %d\\n&quot;, first, second);<\/span>\r\n<span class=\"cm\">swapTwoNumbers(&amp;first, &amp;second);<\/span>\r\n<span class=\"cm\">printf(&quot;first: %d\\nsecond: %d\\n&quot;, first, second);<\/span>\r\n<span class=\"cm\">\/\/ values will be swapped<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">With regards to arrays, they will always be passed to functions<\/span>\r\n<span class=\"cm\">as pointers. Even if you statically allocate an array like `arr[10]`,<\/span>\r\n<span class=\"cm\">it still gets passed as a pointer to the first element in any function calls.<\/span>\r\n<span class=\"cm\">Again, there is no standard way to get the size of a dynamically allocated<\/span>\r\n<span class=\"cm\">array in C.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n<span class=\"c1\">\/\/ Size must be passed!<\/span>\r\n<span class=\"c1\">\/\/ Otherwise, this function has no way of knowing how big the array is.<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">printIntArray<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"o\">*<\/span><span class=\"n\">arr<\/span><span class=\"p\">,<\/span> <span class=\"kt\">size_t<\/span> <span class=\"n\">size<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"kt\">int<\/span> <span class=\"n\">i<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">size<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;arr[%d] is: %d<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">i<\/span><span class=\"p\">,<\/span> <span class=\"n\">arr<\/span><span class=\"p\">[<\/span><span class=\"n\">i<\/span><span class=\"p\">]);<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">int my_arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };<\/span>\r\n<span class=\"cm\">int size = 10;<\/span>\r\n<span class=\"cm\">printIntArray(my_arr, size);<\/span>\r\n<span class=\"cm\">\/\/ will print &quot;arr[0] is: 1&quot; etc<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ if referring to external variables outside function, you should use the extern keyword.<\/span>\r\n<span class=\"kt\">int<\/span> <span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">testFunc<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"k\">extern<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">i<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/i here is now using external variable i<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ make external variables private to source file with static:<\/span>\r\n<span class=\"k\">static<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">j<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/other files using testFunc2() cannot access variable j<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">testFunc2<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"k\">extern<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">j<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"c1\">\/\/ The static keyword makes a variable inaccessible to code outside the<\/span>\r\n<span class=\"c1\">\/\/ compilation unit. (On almost all systems, a &quot;compilation unit&quot; is a .c<\/span>\r\n<span class=\"c1\">\/\/ file.) static can apply both to global (to the compilation unit) variables,<\/span>\r\n<span class=\"c1\">\/\/ functions, and function-local variables. When using static with<\/span>\r\n<span class=\"c1\">\/\/ function-local variables, the variable is effectively global and retains its<\/span>\r\n<span class=\"c1\">\/\/ value across function calls, but is only accessible within the function it<\/span>\r\n<span class=\"c1\">\/\/ is declared in. Additionally, static variables are initialized to 0 if not<\/span>\r\n<span class=\"c1\">\/\/ declared with some other starting value.<\/span>\r\n<span class=\"c1\">\/\/**You may also declare functions as static to make them private**<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ User-defined types and structs<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Typedefs can be used to create type aliases<\/span>\r\n<span class=\"k\">typedef<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">my_type<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">my_type<\/span> <span class=\"n\">my_type_var<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Structs are just collections of data, the members are allocated sequentially,<\/span>\r\n<span class=\"c1\">\/\/ in the order they are written:<\/span>\r\n<span class=\"k\">struct<\/span> <span class=\"n\">rectangle<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">width<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"kt\">int<\/span> <span class=\"n\">height<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n<span class=\"c1\">\/\/ It&#39;s not generally true that<\/span>\r\n<span class=\"c1\">\/\/ sizeof(struct rectangle) == sizeof(int) + sizeof(int)<\/span>\r\n<span class=\"c1\">\/\/ due to potential padding between the structure members (this is for alignment<\/span>\r\n<span class=\"c1\">\/\/ reasons). [1]<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">function_1<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"k\">struct<\/span> <span class=\"n\">rectangle<\/span> <span class=\"n\">my_rec<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Access struct members with .<\/span>\r\n  <span class=\"n\">my_rec<\/span><span class=\"p\">.<\/span><span class=\"n\">width<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"n\">my_rec<\/span><span class=\"p\">.<\/span><span class=\"n\">height<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">20<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can declare pointers to structs<\/span>\r\n  <span class=\"k\">struct<\/span> <span class=\"n\">rectangle<\/span> <span class=\"o\">*<\/span><span class=\"n\">my_rec_ptr<\/span> <span class=\"o\">=<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">my_rec<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Use dereferencing to set struct pointer members...<\/span>\r\n  <span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">my_rec_ptr<\/span><span class=\"p\">).<\/span><span class=\"n\">width<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">30<\/span><span class=\"p\">;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ ... or even better: prefer the -&gt; shorthand for the sake of readability<\/span>\r\n  <span class=\"n\">my_rec_ptr<\/span><span class=\"o\">-&gt;<\/span><span class=\"n\">height<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Same as (*my_rec_ptr).height = 10;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can apply a typedef to a struct for convenience<\/span>\r\n<span class=\"k\">typedef<\/span> <span class=\"k\">struct<\/span> <span class=\"n\">rectangle<\/span> <span class=\"n\">rect<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">area<\/span><span class=\"p\">(<\/span><span class=\"n\">rect<\/span> <span class=\"n\">r<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"k\">return<\/span> <span class=\"n\">r<\/span><span class=\"p\">.<\/span><span class=\"n\">width<\/span> <span class=\"o\">*<\/span> <span class=\"n\">r<\/span><span class=\"p\">.<\/span><span class=\"n\">height<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ if you have large structs, you can pass them &quot;by pointer&quot; to avoid copying<\/span>\r\n<span class=\"c1\">\/\/ the whole struct:<\/span>\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">areaptr<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">rect<\/span> <span class=\"o\">*<\/span><span class=\"n\">r<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"k\">return<\/span> <span class=\"n\">r<\/span><span class=\"o\">-&gt;<\/span><span class=\"n\">width<\/span> <span class=\"o\">*<\/span> <span class=\"n\">r<\/span><span class=\"o\">-&gt;<\/span><span class=\"n\">height<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Function pointers<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">At run time, functions are located at known memory addresses. Function pointers are<\/span>\r\n<span class=\"cm\">much like any other pointer (they just store a memory address), but can be used<\/span>\r\n<span class=\"cm\">to invoke functions directly, and to pass handlers (or callback functions) around.<\/span>\r\n<span class=\"cm\">However, definition syntax may be initially confusing.<\/span>\r\n\r\n<span class=\"cm\">Example: use str_reverse from a pointer<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">str_reverse_through_pointer<\/span><span class=\"p\">(<\/span><span class=\"kt\">char<\/span> <span class=\"o\">*<\/span><span class=\"n\">str_in<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"c1\">\/\/ Define a function pointer variable, named f.<\/span>\r\n  <span class=\"kt\">void<\/span> <span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">f<\/span><span class=\"p\">)(<\/span><span class=\"kt\">char<\/span> <span class=\"o\">*<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Signature should exactly match the target function.<\/span>\r\n  <span class=\"n\">f<\/span> <span class=\"o\">=<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">str_reverse<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Assign the address for the actual function (determined at run time)<\/span>\r\n  <span class=\"c1\">\/\/ f = str_reverse; would work as well - functions decay into pointers, similar to arrays<\/span>\r\n  <span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">f<\/span><span class=\"p\">)(<\/span><span class=\"n\">str_in<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Just calling the function through the pointer<\/span>\r\n  <span class=\"c1\">\/\/ f(str_in); \/\/ That&#39;s an alternative but equally valid syntax for calling it.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">As long as function signatures match, you can assign any function to the same pointer.<\/span>\r\n<span class=\"cm\">Function pointers are usually typedef&#39;d for simplicity and readability, as follows:<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"k\">typedef<\/span> <span class=\"nf\">void<\/span> <span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">my_fnp_type<\/span><span class=\"p\">)(<\/span><span class=\"kt\">char<\/span> <span class=\"o\">*<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"c1\">\/\/ Then used when declaring the actual pointer variable:<\/span>\r\n<span class=\"c1\">\/\/ ...<\/span>\r\n<span class=\"c1\">\/\/ my_fnp_type f;<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/Special characters:<\/span>\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">&#39;\\a&#39;; \/\/ alert (bell) character<\/span>\r\n<span class=\"cm\">&#39;\\n&#39;; \/\/ newline character<\/span>\r\n<span class=\"cm\">&#39;\\t&#39;; \/\/ tab character (left justifies text)<\/span>\r\n<span class=\"cm\">&#39;\\v&#39;; \/\/ vertical tab<\/span>\r\n<span class=\"cm\">&#39;\\f&#39;; \/\/ new page (form feed)<\/span>\r\n<span class=\"cm\">&#39;\\r&#39;; \/\/ carriage return<\/span>\r\n<span class=\"cm\">&#39;\\b&#39;; \/\/ backspace character<\/span>\r\n<span class=\"cm\">&#39;\\0&#39;; \/\/ NULL character. Usually put at end of strings in C.<\/span>\r\n<span class=\"cm\">\/\/   hello\\n\\0. \\0 used by convention to mark end of string.<\/span>\r\n<span class=\"cm\">&#39;\\\\&#39;; \/\/ backslash<\/span>\r\n<span class=\"cm\">&#39;\\?&#39;; \/\/ question mark<\/span>\r\n<span class=\"cm\">&#39;\\&#39;&#39;; \/\/ single quote<\/span>\r\n<span class=\"cm\">&#39;\\&quot;&#39;; \/\/ double quote<\/span>\r\n<span class=\"cm\">&#39;\\xhh&#39;; \/\/ hexadecimal number. Example: &#39;\\xb&#39; = vertical tab character<\/span>\r\n<span class=\"cm\">&#39;\\0oo&#39;; \/\/ octal number. Example: &#39;\\013&#39; = vertical tab character<\/span>\r\n\r\n<span class=\"cm\">\/\/print formatting:<\/span>\r\n<span class=\"cm\">&quot;%d&quot;;    \/\/ integer<\/span>\r\n<span class=\"cm\">&quot;%3d&quot;;   \/\/ integer with minimum of length 3 digits (right justifies text)<\/span>\r\n<span class=\"cm\">&quot;%s&quot;;    \/\/ string<\/span>\r\n<span class=\"cm\">&quot;%f&quot;;    \/\/ float<\/span>\r\n<span class=\"cm\">&quot;%ld&quot;;   \/\/ long<\/span>\r\n<span class=\"cm\">&quot;%3.2f&quot;; \/\/ minimum 3 digits left and 2 digits right decimal float<\/span>\r\n<span class=\"cm\">&quot;%7.4s&quot;; \/\/ (can do with strings too)<\/span>\r\n<span class=\"cm\">&quot;%c&quot;;    \/\/ char<\/span>\r\n<span class=\"cm\">&quot;%p&quot;;    \/\/ pointer. NOTE: need to (void *)-cast the pointer, before passing<\/span>\r\n<span class=\"cm\">         \/\/                it as an argument to `printf`.<\/span>\r\n<span class=\"cm\">&quot;%x&quot;;    \/\/ hexadecimal<\/span>\r\n<span class=\"cm\">&quot;%o&quot;;    \/\/ octal<\/span>\r\n<span class=\"cm\">&quot;%%&quot;;    \/\/ prints %<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Order of Evaluation<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/---------------------------------------------------\/\/<\/span>\r\n<span class=\"c1\">\/\/        Operators                  | Associativity \/\/<\/span>\r\n<span class=\"c1\">\/\/---------------------------------------------------\/\/<\/span>\r\n<span class=\"c1\">\/\/ () [] -&gt; .                        | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ ! ~ ++ -- + = *(type)sizeof       | right to left \/\/<\/span>\r\n<span class=\"c1\">\/\/ * \/ %                             | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ + -                               | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ &lt;&lt; &gt;&gt;                             | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ &lt; &lt;= &gt; &gt;=                         | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ == !=                             | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ &amp;                                 | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ ^                                 | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ |                                 | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ &amp;&amp;                                | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ ||                                | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/ ?:                                | right to left \/\/<\/span>\r\n<span class=\"c1\">\/\/ = += -= *= \/= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= | right to left \/\/<\/span>\r\n<span class=\"c1\">\/\/ ,                                 | left to right \/\/<\/span>\r\n<span class=\"c1\">\/\/---------------------------------------------------\/\/<\/span>\r\n\r\n<span class=\"cm\">\/******************************* Header Files **********************************<\/span>\r\n\r\n<span class=\"cm\">Header files are an important part of C as they allow for the connection of C<\/span>\r\n<span class=\"cm\">source files and can simplify code and definitions by separating them into<\/span>\r\n<span class=\"cm\">separate files.<\/span>\r\n\r\n<span class=\"cm\">Header files are syntactically similar to C source files but reside in &quot;.h&quot;<\/span>\r\n<span class=\"cm\">files. They can be included in your C source file by using the precompiler<\/span>\r\n<span class=\"cm\">command #include &quot;example.h&quot;, given that example.h exists in the same directory<\/span>\r\n<span class=\"cm\">as the C file.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"cm\">\/* A safe guard to prevent the header from being defined too many times. This *\/<\/span>\r\n<span class=\"cm\">\/* happens in the case of circle dependency, the contents of the header is    *\/<\/span>\r\n<span class=\"cm\">\/* already defined.                                                           *\/<\/span>\r\n<span class=\"cp\">#ifndef EXAMPLE_H <\/span><span class=\"cm\">\/* if EXAMPLE_H is not yet defined. *\/<\/span><span class=\"cp\"><\/span>\r\n<span class=\"cp\">#define EXAMPLE_H <\/span><span class=\"cm\">\/* Define the macro EXAMPLE_H. *\/<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"cm\">\/* Other headers can be included in headers and therefore transitively *\/<\/span>\r\n<span class=\"cm\">\/* included into files that include this header.                       *\/<\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;string.h&gt;<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"cm\">\/* Like c source files macros can be defined in headers and used in files *\/<\/span>\r\n<span class=\"cm\">\/* that include this header file.                                         *\/<\/span>\r\n<span class=\"cp\">#define EXAMPLE_NAME &quot;Dennis Ritchie&quot;<\/span>\r\n\r\n<span class=\"cm\">\/* Function macros can also be defined.  *\/<\/span>\r\n<span class=\"cp\">#define ADD(a, b) ((a) + (b))<\/span>\r\n\r\n<span class=\"cm\">\/* Notice the parenthesis surrounding the arguments -- this is important to   *\/<\/span>\r\n<span class=\"cm\">\/* ensure that a and b don&#39;t get expanded in an unexpected way (e.g. consider *\/<\/span>\r\n<span class=\"cm\">\/* MUL(x, y) (x * y); MUL(1 + 2, 3) would expand to (1 + 2 * 3), yielding an  *\/<\/span>\r\n<span class=\"cm\">\/* incorrect result)                                                          *\/<\/span>\r\n\r\n<span class=\"cm\">\/* Structs and typedefs can be used for consistency between files. *\/<\/span>\r\n<span class=\"k\">typedef<\/span> <span class=\"k\">struct<\/span> <span class=\"n\">Node<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"kt\">int<\/span> <span class=\"n\">val<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"k\">struct<\/span> <span class=\"n\">Node<\/span> <span class=\"o\">*<\/span><span class=\"n\">next<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"n\">Node<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"cm\">\/* So can enumerations. *\/<\/span>\r\n<span class=\"k\">enum<\/span> <span class=\"n\">traffic_light_state<\/span> <span class=\"p\">{<\/span><span class=\"n\">GREEN<\/span><span class=\"p\">,<\/span> <span class=\"n\">YELLOW<\/span><span class=\"p\">,<\/span> <span class=\"n\">RED<\/span><span class=\"p\">};<\/span>\r\n\r\n<span class=\"cm\">\/* Function prototypes can also be defined here for use in multiple files,  *\/<\/span>\r\n<span class=\"cm\">\/* but it is bad practice to define the function in the header. Definitions *\/<\/span>\r\n<span class=\"cm\">\/* should instead be put in a C file.                                       *\/<\/span>\r\n<span class=\"n\">Node<\/span> <span class=\"nf\">createLinkedList<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"o\">*<\/span><span class=\"n\">vals<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">len<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"cm\">\/* Beyond the above elements, other definitions should be left to a C source *\/<\/span>\r\n<span class=\"cm\">\/* file. Excessive includes or definitions should, also not be contained in *\/<\/span>\r\n<span class=\"cm\">\/* a header file but instead put into separate headers or a C file.          *\/<\/span>\r\n\r\n<span class=\"cp\">#endif <\/span><span class=\"cm\">\/* End of the if precompiler directive. *\/<\/span><span class=\"cp\"><\/span>\r\n"
    },






















    "cpp":{
        
        "0":"<span><\/span><span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Comparison to C<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ C++ is _almost_ a superset of C and shares its basic syntax for<\/span>\r\n<span class=\"c1\">\/\/ variable declarations, primitive types, and functions.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Just like in C, your program&#39;s entry point is a function called<\/span>\r\n<span class=\"c1\">\/\/ main with an integer return type.<\/span>\r\n<span class=\"c1\">\/\/ This value serves as the program&#39;s exit status.<\/span>\r\n<span class=\"c1\">\/\/ See http:\/\/en.wikipedia.org\/wiki\/Exit_status for more information.<\/span>\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">main<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">argc<\/span><span class=\"p\">,<\/span> <span class=\"kt\">char<\/span><span class=\"o\">**<\/span> <span class=\"n\">argv<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Command line arguments are passed in by argc and argv in the same way<\/span>\r\n    <span class=\"c1\">\/\/ they are in C.<\/span>\r\n    <span class=\"c1\">\/\/ argc indicates the number of arguments,<\/span>\r\n    <span class=\"c1\">\/\/ and argv is an array of C-style strings (char*)<\/span>\r\n    <span class=\"c1\">\/\/ representing the arguments.<\/span>\r\n    <span class=\"c1\">\/\/ The first argument is the name by which the program was called.<\/span>\r\n    <span class=\"c1\">\/\/ argc and argv can be omitted if you do not care about arguments,<\/span>\r\n    <span class=\"c1\">\/\/ giving the function signature of int main()<\/span>\r\n\r\n    <span class=\"c1\">\/\/ An exit status of 0 indicates success.<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ However, C++ varies in some of the following ways:<\/span>\r\n\r\n<span class=\"c1\">\/\/ In C++, character literals are chars<\/span>\r\n<span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"sc\">&#39;c&#39;<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"kt\">char<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">1<\/span>\r\n\r\n<span class=\"c1\">\/\/ In C, character literals are ints<\/span>\r\n<span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"sc\">&#39;c&#39;<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"k\">sizeof<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span><span class=\"p\">)<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ C++ has strict prototyping<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">func<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ function which accepts no arguments<\/span>\r\n\r\n<span class=\"c1\">\/\/ In C<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">func<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ function which may accept any number of arguments<\/span>\r\n\r\n<span class=\"c1\">\/\/ Use nullptr instead of NULL in C++<\/span>\r\n<span class=\"kt\">int<\/span><span class=\"o\">*<\/span> <span class=\"n\">ip<\/span> <span class=\"o\">=<\/span> <span class=\"k\">nullptr<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ C standard headers are available in C++.<\/span>\r\n<span class=\"c1\">\/\/ C headers end in .h, while<\/span>\r\n<span class=\"c1\">\/\/ C++ headers are prefixed with &quot;c&quot; and have no &quot;.h&quot; suffix.<\/span>\r\n\r\n<span class=\"c1\">\/\/ The C++ standard version:<\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;cstdio&gt;<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"c1\">\/\/ The C standard version:<\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;stdio.h&gt;<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">main<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Hello, world!<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Function overloading<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ C++ supports function overloading<\/span>\r\n<span class=\"c1\">\/\/ provided each function takes different parameters.<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"kt\">char<\/span> <span class=\"k\">const<\/span><span class=\"o\">*<\/span> <span class=\"n\">myString<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;String %s<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">myString<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">myInt<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;My int is %d&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">myInt<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">main<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">print<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Hello&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Resolves to void print(const char*)<\/span>\r\n    <span class=\"n\">print<\/span><span class=\"p\">(<\/span><span class=\"mi\">15<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Resolves to void print(int)<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Default function arguments<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can provide default arguments for a function<\/span>\r\n<span class=\"c1\">\/\/ if they are not provided by the caller.<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">doSomethingWithInts<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">a<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">b<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">4<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Do something with the ints here<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">main<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">doSomethingWithInts<\/span><span class=\"p\">();<\/span>      <span class=\"c1\">\/\/ a = 1,  b = 4<\/span>\r\n    <span class=\"n\">doSomethingWithInts<\/span><span class=\"p\">(<\/span><span class=\"mi\">20<\/span><span class=\"p\">);<\/span>    <span class=\"c1\">\/\/ a = 20, b = 4<\/span>\r\n    <span class=\"n\">doSomethingWithInts<\/span><span class=\"p\">(<\/span><span class=\"mi\">20<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ a = 20, b = 5<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Default arguments must be at the end of the arguments list.<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">invalidDeclaration<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">a<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">b<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Error!<\/span>\r\n<span class=\"p\">{<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Namespaces<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Namespaces provide separate scopes for variable, function,<\/span>\r\n<span class=\"c1\">\/\/ and other declarations.<\/span>\r\n<span class=\"c1\">\/\/ Namespaces can be nested.<\/span>\r\n\r\n<span class=\"k\">namespace<\/span> <span class=\"n\">First<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"k\">namespace<\/span> <span class=\"n\">Nested<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"kt\">void<\/span> <span class=\"n\">foo<\/span><span class=\"p\">()<\/span>\r\n        <span class=\"p\">{<\/span>\r\n            <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;This is First::Nested::foo<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n        <span class=\"p\">}<\/span>\r\n    <span class=\"p\">}<\/span> <span class=\"c1\">\/\/ end namespace Nested<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"c1\">\/\/ end namespace First<\/span>\r\n\r\n<span class=\"k\">namespace<\/span> <span class=\"n\">Second<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"kt\">void<\/span> <span class=\"n\">foo<\/span><span class=\"p\">()<\/span>\r\n    <span class=\"p\">{<\/span>\r\n        <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;This is Second::foo<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"n\">foo<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;This is global foo<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"n\">main<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Includes all symbols from namespace Second into the current scope. Note<\/span>\r\n    <span class=\"c1\">\/\/ that simply foo() no longer works, since it is now ambiguous whether<\/span>\r\n    <span class=\"c1\">\/\/ we&#39;re calling the foo in namespace Second or the top level.<\/span>\r\n    <span class=\"k\">using<\/span> <span class=\"k\">namespace<\/span> <span class=\"n\">Second<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"n\">Second<\/span><span class=\"o\">::<\/span><span class=\"n\">foo<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ prints &quot;This is Second::foo&quot;<\/span>\r\n    <span class=\"n\">First<\/span><span class=\"o\">::<\/span><span class=\"n\">Nested<\/span><span class=\"o\">::<\/span><span class=\"n\">foo<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ prints &quot;This is First::Nested::foo&quot;<\/span>\r\n    <span class=\"o\">::<\/span><span class=\"n\">foo<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ prints &quot;This is global foo&quot;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Input\/Output<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ C++ input and output uses streams<\/span>\r\n<span class=\"c1\">\/\/ cin, cout, and cerr represent stdin, stdout, and stderr.<\/span>\r\n<span class=\"c1\">\/\/ &lt;&lt; is the insertion operator and &gt;&gt; is the extraction operator.<\/span>\r\n\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;iostream&gt; \/\/ Include for I\/O streams<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"k\">using<\/span> <span class=\"k\">namespace<\/span> <span class=\"n\">std<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Streams are in the std namespace (standard library)<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"nf\">main<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n   <span class=\"kt\">int<\/span> <span class=\"n\">myInt<\/span><span class=\"p\">;<\/span>\r\n\r\n   <span class=\"c1\">\/\/ Prints to stdout (or terminal\/screen)<\/span>\r\n   <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Enter your favorite number:<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span>\r\n   <span class=\"c1\">\/\/ Takes in input<\/span>\r\n   <span class=\"n\">cin<\/span> <span class=\"o\">&gt;&gt;<\/span> <span class=\"n\">myInt<\/span><span class=\"p\">;<\/span>\r\n\r\n   <span class=\"c1\">\/\/ cout can also be formatted<\/span>\r\n   <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Your favorite number is &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">myInt<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span>\r\n   <span class=\"c1\">\/\/ prints &quot;Your favorite number is &lt;myInt&gt;&quot;<\/span>\r\n\r\n    <span class=\"n\">cerr<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Used for error messages&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Strings<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Strings in C++ are objects and have many member functions<\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;string&gt;<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"k\">using<\/span> <span class=\"k\">namespace<\/span> <span class=\"n\">std<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Strings are also in the namespace std (standard library)<\/span>\r\n\r\n<span class=\"n\">string<\/span> <span class=\"n\">myString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;Hello&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">string<\/span> <span class=\"n\">myOtherString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot; World&quot;<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ + is used for concatenation.<\/span>\r\n",


        "1":"<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">myString<\/span> <span class=\"o\">+<\/span> <span class=\"n\">myOtherString<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ &quot;Hello World&quot;<\/span>\r\n\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">myString<\/span> <span class=\"o\">+<\/span> <span class=\"s\">&quot; You&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ &quot;Hello You&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ C++ strings are mutable.<\/span>\r\n<span class=\"n\">myString<\/span><span class=\"p\">.<\/span><span class=\"n\">append<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot; Dog&quot;<\/span><span class=\"p\">);<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">myString<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ &quot;Hello Dog&quot;<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ References<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ In addition to pointers like the ones in C,<\/span>\r\n<span class=\"c1\">\/\/ C++ has _references_.<\/span>\r\n<span class=\"c1\">\/\/ These are pointer types that cannot be reassigned once set<\/span>\r\n<span class=\"c1\">\/\/ and cannot be null.<\/span>\r\n<span class=\"c1\">\/\/ They also have the same syntax as the variable itself:<\/span>\r\n<span class=\"c1\">\/\/ No * is needed for dereferencing and<\/span>\r\n<span class=\"c1\">\/\/ &amp; (address of) is not used for assignment.<\/span>\r\n\r\n<span class=\"k\">using<\/span> <span class=\"k\">namespace<\/span> <span class=\"n\">std<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"n\">string<\/span> <span class=\"n\">foo<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;I am foo&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">string<\/span> <span class=\"n\">bar<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;I am bar&quot;<\/span><span class=\"p\">;<\/span>\r\n\r\n\r\n<span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">fooRef<\/span> <span class=\"o\">=<\/span> <span class=\"n\">foo<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ This creates a reference to foo.<\/span>\r\n<span class=\"n\">fooRef<\/span> <span class=\"o\">+=<\/span> <span class=\"s\">&quot;. Hi!&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Modifies foo through the reference<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">fooRef<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Prints &quot;I am foo. Hi!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Doesn&#39;t reassign &quot;fooRef&quot;. This is the same as &quot;foo = bar&quot;, and<\/span>\r\n<span class=\"c1\">\/\/   foo == &quot;I am bar&quot;<\/span>\r\n<span class=\"c1\">\/\/ after this line.<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">fooRef<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">endl<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/Prints the address of foo<\/span>\r\n<span class=\"n\">fooRef<\/span> <span class=\"o\">=<\/span> <span class=\"n\">bar<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">fooRef<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">endl<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/Still prints the address of foo<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">fooRef<\/span><span class=\"p\">;<\/span>  <span class=\"c1\">\/\/ Prints &quot;I am bar&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ The address of fooRef remains the same, i.e. it is still referring to foo.<\/span>\r\n\r\n\r\n<span class=\"k\">const<\/span> <span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">barRef<\/span> <span class=\"o\">=<\/span> <span class=\"n\">bar<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Create a const reference to bar.<\/span>\r\n<span class=\"c1\">\/\/ Like C, const values (and pointers and references) cannot be modified.<\/span>\r\n<span class=\"n\">barRef<\/span> <span class=\"o\">+=<\/span> <span class=\"s\">&quot;. Hi!&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Error, const references cannot be modified.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Sidetrack: Before we talk more about references, we must introduce a concept<\/span>\r\n<span class=\"c1\">\/\/ called a temporary object. Suppose we have the following code:<\/span>\r\n<span class=\"n\">string<\/span> <span class=\"nf\">tempObjectFun<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span> <span class=\"p\">...<\/span> <span class=\"p\">}<\/span>\r\n<span class=\"n\">string<\/span> <span class=\"n\">retVal<\/span> <span class=\"o\">=<\/span> <span class=\"n\">tempObjectFun<\/span><span class=\"p\">();<\/span>\r\n\r\n<span class=\"c1\">\/\/ What happens in the second line is actually:<\/span>\r\n<span class=\"c1\">\/\/   - a string object is returned from tempObjectFun<\/span>\r\n<span class=\"c1\">\/\/   - a new string is constructed with the returned object as argument to the<\/span>\r\n<span class=\"c1\">\/\/     constructor<\/span>\r\n<span class=\"c1\">\/\/   - the returned object is destroyed<\/span>\r\n<span class=\"c1\">\/\/ The returned object is called a temporary object. Temporary objects are<\/span>\r\n<span class=\"c1\">\/\/ created whenever a function returns an object, and they are destroyed at the<\/span>\r\n<span class=\"c1\">\/\/ end of the evaluation of the enclosing expression (Well, this is what the<\/span>\r\n<span class=\"c1\">\/\/ standard says, but compilers are allowed to change this behavior. Look up<\/span>\r\n<span class=\"c1\">\/\/ &quot;return value optimization&quot; if you&#39;re into this kind of details). So in this<\/span>\r\n<span class=\"c1\">\/\/ code:<\/span>\r\n<span class=\"n\">foo<\/span><span class=\"p\">(<\/span><span class=\"n\">bar<\/span><span class=\"p\">(<\/span><span class=\"n\">tempObjectFun<\/span><span class=\"p\">()))<\/span>\r\n\r\n<span class=\"c1\">\/\/ assuming foo and bar exist, the object returned from tempObjectFun is<\/span>\r\n<span class=\"c1\">\/\/ passed to bar, and it is destroyed before foo is called.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Now back to references. The exception to the &quot;at the end of the enclosing<\/span>\r\n<span class=\"c1\">\/\/ expression&quot; rule is if a temporary object is bound to a const reference, in<\/span>\r\n<span class=\"c1\">\/\/ which case its life gets extended to the current scope:<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"n\">constReferenceTempObjectFun<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"c1\">\/\/ constRef gets the temporary object, and it is valid until the end of this<\/span>\r\n  <span class=\"c1\">\/\/ function.<\/span>\r\n  <span class=\"k\">const<\/span> <span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">constRef<\/span> <span class=\"o\">=<\/span> <span class=\"n\">tempObjectFun<\/span><span class=\"p\">();<\/span>\r\n  <span class=\"p\">...<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Another kind of reference introduced in C++11 is specifically for temporary<\/span>\r\n<span class=\"c1\">\/\/ objects. You cannot have a variable of its type, but it takes precedence in<\/span>\r\n<span class=\"c1\">\/\/ overload resolution:<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"n\">someFun<\/span><span class=\"p\">(<\/span><span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">s<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span> <span class=\"p\">...<\/span> <span class=\"p\">}<\/span>  <span class=\"c1\">\/\/ Regular reference<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">someFun<\/span><span class=\"p\">(<\/span><span class=\"n\">string<\/span><span class=\"o\">&amp;&amp;<\/span> <span class=\"n\">s<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span> <span class=\"p\">...<\/span> <span class=\"p\">}<\/span>  <span class=\"c1\">\/\/ Reference to temporary object<\/span>\r\n\r\n<span class=\"n\">string<\/span> <span class=\"n\">foo<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">someFun<\/span><span class=\"p\">(<\/span><span class=\"n\">foo<\/span><span class=\"p\">);<\/span>  <span class=\"c1\">\/\/ Calls the version with regular reference<\/span>\r\n<span class=\"n\">someFun<\/span><span class=\"p\">(<\/span><span class=\"n\">tempObjectFun<\/span><span class=\"p\">());<\/span>  <span class=\"c1\">\/\/ Calls the version with temporary reference<\/span>\r\n\r\n<span class=\"c1\">\/\/ For example, you will see these two versions of constructors for<\/span>\r\n<span class=\"c1\">\/\/ std::basic_string:<\/span>\r\n<span class=\"n\">basic_string<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">basic_string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">other<\/span><span class=\"p\">);<\/span>\r\n<span class=\"n\">basic_string<\/span><span class=\"p\">(<\/span><span class=\"n\">basic_string<\/span><span class=\"o\">&amp;&amp;<\/span> <span class=\"n\">other<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"c1\">\/\/ Idea being if we are constructing a new string from a temporary object (which<\/span>\r\n<span class=\"c1\">\/\/ is going to be destroyed soon anyway), we can have a more efficient<\/span>\r\n<span class=\"c1\">\/\/ constructor that &quot;salvages&quot; parts of that temporary string. You will see this<\/span>\r\n<span class=\"c1\">\/\/ concept referred to as &quot;move semantics&quot;.<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Enums<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Enums are a way to assign a value to a constant most commonly used for<\/span>\r\n<span class=\"c1\">\/\/ easier visualization and reading of code<\/span>\r\n<span class=\"k\">enum<\/span> <span class=\"n\">ECarTypes<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"n\">Sedan<\/span><span class=\"p\">,<\/span>\r\n  <span class=\"n\">Hatchback<\/span><span class=\"p\">,<\/span>\r\n  <span class=\"n\">SUV<\/span><span class=\"p\">,<\/span>\r\n  <span class=\"n\">Wagon<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n<span class=\"n\">ECarTypes<\/span> <span class=\"nf\">GetPreferredCarType<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"n\">ECarTypes<\/span><span class=\"o\">::<\/span><span class=\"n\">Hatchback<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ As of C++11 there is an easy way to assign a type to the enum which can be<\/span>\r\n<span class=\"c1\">\/\/ useful in serialization of data and converting enums back-and-forth between<\/span>\r\n<span class=\"c1\">\/\/ the desired type and their respective constants<\/span>\r\n<span class=\"k\">enum<\/span> <span class=\"nl\">ECarTypes<\/span> <span class=\"p\">:<\/span> <span class=\"kt\">uint8_t<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"n\">Sedan<\/span><span class=\"p\">,<\/span> <span class=\"c1\">\/\/ 0<\/span>\r\n  <span class=\"n\">Hatchback<\/span><span class=\"p\">,<\/span> <span class=\"c1\">\/\/ 1<\/span>\r\n  <span class=\"n\">SUV<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">254<\/span><span class=\"p\">,<\/span> <span class=\"c1\">\/\/ 254<\/span>\r\n  <span class=\"n\">Hybrid<\/span> <span class=\"c1\">\/\/ 255<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">WriteByteToFile<\/span><span class=\"p\">(<\/span><span class=\"kt\">uint8_t<\/span> <span class=\"n\">InputValue<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Serialize the InputValue to a file<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">WritePreferredCarTypeToFile<\/span><span class=\"p\">(<\/span><span class=\"n\">ECarTypes<\/span> <span class=\"n\">InputCarType<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ The enum is implicitly converted to a uint8_t due to its declared enum type<\/span>\r\n    <span class=\"n\">WriteByteToFile<\/span><span class=\"p\">(<\/span><span class=\"n\">InputCarType<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ On the other hand you may not want enums to be accidentally cast to an integer<\/span>\r\n<span class=\"c1\">\/\/ type or to other enums so it is instead possible to create an enum class which<\/span>\r\n<span class=\"c1\">\/\/ won&#39;t be implicitly converted<\/span>\r\n<span class=\"k\">enum<\/span> <span class=\"k\">class<\/span> <span class=\"nc\">ECarTypes<\/span> <span class=\"o\">:<\/span> <span class=\"kt\">uint8_t<\/span>\r\n<span class=\"p\">{<\/span>\r\n  <span class=\"n\">Sedan<\/span><span class=\"p\">,<\/span> <span class=\"c1\">\/\/ 0<\/span>\r\n  <span class=\"n\">Hatchback<\/span><span class=\"p\">,<\/span> <span class=\"c1\">\/\/ 1<\/span>\r\n  <span class=\"n\">SUV<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">254<\/span><span class=\"p\">,<\/span> <span class=\"c1\">\/\/ 254<\/span>\r\n  <span class=\"n\">Hybrid<\/span> <span class=\"c1\">\/\/ 255<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">WriteByteToFile<\/span><span class=\"p\">(<\/span><span class=\"kt\">uint8_t<\/span> <span class=\"n\">InputValue<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Serialize the InputValue to a file<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">WritePreferredCarTypeToFile<\/span><span class=\"p\">(<\/span><span class=\"n\">ECarTypes<\/span> <span class=\"n\">InputCarType<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Won&#39;t compile even though ECarTypes is a uint8_t due to the enum<\/span>\r\n    <span class=\"c1\">\/\/ being declared as an &quot;enum class&quot;!<\/span>\r\n    <span class=\"n\">WriteByteToFile<\/span><span class=\"p\">(<\/span><span class=\"n\">InputCarType<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Classes and object-oriented programming<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ First example of classes<\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;iostream&gt;<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"c1\">\/\/ Declare a class.<\/span>\r\n<span class=\"c1\">\/\/ Classes are usually declared in header (.h or .hpp) files.<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Dog<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Member variables and functions are private by default.<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">string<\/span> <span class=\"n\">name<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"kt\">int<\/span> <span class=\"n\">weight<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ All members following this are public<\/span>\r\n<span class=\"c1\">\/\/ until &quot;private:&quot; or &quot;protected:&quot; is found.<\/span>\r\n<span class=\"k\">public<\/span><span class=\"o\">:<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Default constructor<\/span>\r\n    <span class=\"n\">Dog<\/span><span class=\"p\">();<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Member function declarations (implementations to follow)<\/span>\r\n    <span class=\"c1\">\/\/ Note that we use std::string here instead of placing<\/span>\r\n    <span class=\"c1\">\/\/ using namespace std;<\/span>\r\n    <span class=\"c1\">\/\/ above.<\/span>\r\n    <span class=\"c1\">\/\/ Never put a &quot;using namespace&quot; statement in a header.<\/span>\r\n    <span class=\"kt\">void<\/span> <span class=\"nf\">setName<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">dogsName<\/span><span class=\"p\">);<\/span>\r\n\r\n    <span class=\"kt\">void<\/span> <span class=\"nf\">setWeight<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">dogsWeight<\/span><span class=\"p\">);<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Functions that do not modify the state of the object<\/span>\r\n    <span class=\"c1\">\/\/ should be marked as const.<\/span>\r\n    <span class=\"c1\">\/\/ This allows you to call them if given a const reference to the object.<\/span>\r\n    <span class=\"c1\">\/\/ Also note the functions must be explicitly declared as _virtual_<\/span>\r\n    <span class=\"c1\">\/\/ in order to be overridden in derived classes.<\/span>\r\n    <span class=\"c1\">\/\/ Functions are not virtual by default for performance reasons.<\/span>\r\n    <span class=\"k\">virtual<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">print<\/span><span class=\"p\">()<\/span> <span class=\"k\">const<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Functions can also be defined inside the class body.<\/span>\r\n    <span class=\"c1\">\/\/ Functions defined as such are automatically inlined.<\/span>\r\n    <span class=\"kt\">void<\/span> <span class=\"nf\">bark<\/span><span class=\"p\">()<\/span> <span class=\"k\">const<\/span> <span class=\"p\">{<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">name<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot; barks!<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span> <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Along with constructors, C++ provides destructors.<\/span>\r\n    <span class=\"c1\">\/\/ These are called when an object is deleted or falls out of scope.<\/span>\r\n    <span class=\"c1\">\/\/ This enables powerful paradigms such as RAII<\/span>\r\n    <span class=\"c1\">\/\/ (see below)<\/span>\r\n    <span class=\"c1\">\/\/ The destructor should be virtual if a class is to be derived from;<\/span>\r\n    <span class=\"c1\">\/\/ if it is not virtual, then the derived class&#39; destructor will<\/span>\r\n    <span class=\"c1\">\/\/ not be called if the object is destroyed through a base-class reference<\/span>\r\n    <span class=\"c1\">\/\/ or pointer.<\/span>\r\n    <span class=\"k\">virtual<\/span> <span class=\"o\">~<\/span><span class=\"n\">Dog<\/span><span class=\"p\">();<\/span>\r\n\r\n<span class=\"p\">};<\/span> <span class=\"c1\">\/\/ A semicolon must follow the class definition.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Class member functions are usually implemented in .cpp files.<\/span>\r\n<span class=\"n\">Dog<\/span><span class=\"o\">::<\/span><span class=\"n\">Dog<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;A dog has been constructed<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Objects (such as strings) should be passed by reference<\/span>\r\n<span class=\"c1\">\/\/ if you are modifying them or const reference if you are not.<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">Dog<\/span><span class=\"o\">::<\/span><span class=\"n\">setName<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">dogsName<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">name<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dogsName<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"n\">Dog<\/span><span class=\"o\">::<\/span><span class=\"n\">setWeight<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">dogsWeight<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">weight<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dogsWeight<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Notice that &quot;virtual&quot; is only needed in the declaration, not the definition.<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">Dog<\/span><span class=\"o\">::<\/span><span class=\"n\">print<\/span><span class=\"p\">()<\/span> <span class=\"k\">const<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Dog is &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">name<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot; and weighs &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">weight<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;kg<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"n\">Dog<\/span><span class=\"o\">::~<\/span><span class=\"n\">Dog<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Goodbye &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">name<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"n\">main<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">Dog<\/span> <span class=\"n\">myDog<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ prints &quot;A dog has been constructed&quot;<\/span>\r\n    <span class=\"n\">myDog<\/span><span class=\"p\">.<\/span><span class=\"n\">setName<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Barkley&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"n\">myDog<\/span><span class=\"p\">.<\/span><span class=\"n\">setWeight<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"n\">myDog<\/span><span class=\"p\">.<\/span><span class=\"n\">print<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ prints &quot;Dog is Barkley and weighs 10 kg&quot;<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"c1\">\/\/ prints &quot;Goodbye Barkley&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Inheritance:<\/span>\r\n\r\n<span class=\"c1\">\/\/ This class inherits everything public and protected from the Dog class<\/span>\r\n<span class=\"c1\">\/\/ as well as private but may not directly access private members\/methods<\/span>\r\n<span class=\"c1\">\/\/ without a public or protected method for doing so<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">OwnedDog<\/span> <span class=\"o\">:<\/span> <span class=\"k\">public<\/span> <span class=\"n\">Dog<\/span> <span class=\"p\">{<\/span>\r\n\r\n<span class=\"k\">public<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"kt\">void<\/span> <span class=\"n\">setOwner<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">dogsOwner<\/span><span class=\"p\">);<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Override the behavior of the print function for all OwnedDogs. See<\/span>\r\n    <span class=\"c1\">\/\/ http:\/\/en.wikipedia.org\/wiki\/Polymorphism_(computer_science)#Subtyping<\/span>\r\n    <span class=\"c1\">\/\/ for a more general introduction if you are unfamiliar with<\/span>\r\n    <span class=\"c1\">\/\/ subtype polymorphism.<\/span>\r\n    <span class=\"c1\">\/\/ The override keyword is optional but makes sure you are actually<\/span>\r\n    <span class=\"c1\">\/\/ overriding the method in a base class.<\/span>\r\n    <span class=\"kt\">void<\/span> <span class=\"nf\">print<\/span><span class=\"p\">()<\/span> <span class=\"k\">const<\/span> <span class=\"k\">override<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"k\">private<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">string<\/span> <span class=\"n\">owner<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n<span class=\"c1\">\/\/ Meanwhile, in the corresponding .cpp file:<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"n\">OwnedDog<\/span><span class=\"o\">::<\/span><span class=\"n\">setOwner<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">dogsOwner<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">owner<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dogsOwner<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">void<\/span> <span class=\"n\">OwnedDog<\/span><span class=\"o\">::<\/span><span class=\"n\">print<\/span><span class=\"p\">()<\/span> <span class=\"k\">const<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">Dog<\/span><span class=\"o\">::<\/span><span class=\"n\">print<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ Call the print function in the base Dog class<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Dog is owned by &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">owner<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"c1\">\/\/ Prints &quot;Dog is &lt;name&gt; and weights &lt;weight&gt;&quot;<\/span>\r\n    <span class=\"c1\">\/\/        &quot;Dog is owned by &lt;owner&gt;&quot;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Initialization and Operator Overloading<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ In C++ you can overload the behavior of operators such as +, -, *, \/, etc.<\/span>\r\n<span class=\"c1\">\/\/ This is done by defining a function which is called<\/span>\r\n<span class=\"c1\">\/\/ whenever the operator is used.<\/span>\r\n\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;iostream&gt;<\/span><span class=\"cp\"><\/span>\r\n<span class=\"k\">using<\/span> <span class=\"k\">namespace<\/span> <span class=\"n\">std<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Point<\/span> <span class=\"p\">{<\/span>\r\n<span class=\"k\">public<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"c1\">\/\/ Member variables can be given default values in this manner.<\/span>\r\n    <span class=\"kt\">double<\/span> <span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"kt\">double<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Define a default constructor which does nothing<\/span>\r\n    <span class=\"c1\">\/\/ but initialize the Point to the default value (0, 0)<\/span>\r\n    <span class=\"n\">Point<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span> <span class=\"p\">};<\/span>\r\n\r\n    <span class=\"c1\">\/\/ The following syntax is known as an initialization list<\/span>\r\n    <span class=\"c1\">\/\/ and is the proper way to initialize class member values<\/span>\r\n    <span class=\"n\">Point<\/span> <span class=\"p\">(<\/span><span class=\"kt\">double<\/span> <span class=\"n\">a<\/span><span class=\"p\">,<\/span> <span class=\"kt\">double<\/span> <span class=\"n\">b<\/span><span class=\"p\">)<\/span> <span class=\"o\">:<\/span>\r\n        <span class=\"n\">x<\/span><span class=\"p\">(<\/span><span class=\"n\">a<\/span><span class=\"p\">),<\/span>\r\n        <span class=\"n\">y<\/span><span class=\"p\">(<\/span><span class=\"n\">b<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">{<\/span> <span class=\"cm\">\/* Do nothing except initialize the values *\/<\/span> <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Overload the + operator.<\/span>\r\n    <span class=\"n\">Point<\/span> <span class=\"k\">operator<\/span><span class=\"o\">+<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">Point<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">)<\/span> <span class=\"k\">const<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Overload the += operator<\/span>\r\n    <span class=\"n\">Point<\/span><span class=\"o\">&amp;<\/span> <span class=\"k\">operator<\/span><span class=\"o\">+=<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">Point<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">);<\/span>\r\n\r\n    <span class=\"c1\">\/\/ It would also make sense to add the - and -= operators,<\/span>\r\n    <span class=\"c1\">\/\/ but we will skip those for brevity.<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n<span class=\"n\">Point<\/span> <span class=\"n\">Point<\/span><span class=\"o\">::<\/span><span class=\"k\">operator<\/span><span class=\"o\">+<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">Point<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">)<\/span> <span class=\"k\">const<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Create a new point that is the sum of this one and rhs.<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"n\">Point<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">+<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">.<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span> <span class=\"o\">+<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">.<\/span><span class=\"n\">y<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ It&#39;s good practice to return a reference to the leftmost variable of<\/span>\r\n<span class=\"c1\">\/\/ an assignment. `(a += b) == c` will work this way.<\/span>\r\n<span class=\"n\">Point<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">Point<\/span><span class=\"o\">::<\/span><span class=\"k\">operator<\/span><span class=\"o\">+=<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">Point<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">x<\/span> <span class=\"o\">+=<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">.<\/span><span class=\"n\">x<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"n\">y<\/span> <span class=\"o\">+=<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">.<\/span><span class=\"n\">y<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"c1\">\/\/ `this` is a pointer to the object, on which a method is called.<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"o\">*<\/span><span class=\"k\">this<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"n\">main<\/span> <span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">Point<\/span> <span class=\"n\">up<\/span> <span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">,<\/span><span class=\"mi\">1<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"n\">Point<\/span> <span class=\"nf\">right<\/span> <span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span><span class=\"mi\">0<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"c1\">\/\/ This calls the Point + operator<\/span>\r\n    <span class=\"c1\">\/\/ Point up calls the + (function) with right as its parameter<\/span>\r\n    <span class=\"n\">Point<\/span> <span class=\"n\">result<\/span> <span class=\"o\">=<\/span> <span class=\"n\">up<\/span> <span class=\"o\">+<\/span> <span class=\"n\">right<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"c1\">\/\/ Prints &quot;Result is upright (1,1)&quot;<\/span>\r\n    <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Result is upright (&quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">result<\/span><span class=\"p\">.<\/span><span class=\"n\">x<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"sc\">&#39;,&#39;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">result<\/span><span class=\"p\">.<\/span><span class=\"n\">y<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;)<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Templates<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Templates in C++ are mostly used for generic programming, though they are<\/span>\r\n<span class=\"c1\">\/\/ much more powerful than generic constructs in other languages. They also<\/span>\r\n<span class=\"c1\">\/\/ support explicit and partial specialization and functional-style type<\/span>\r\n<span class=\"c1\">\/\/ classes; in fact, they are a Turing-complete functional language embedded<\/span>\r\n<span class=\"c1\">\/\/ in C++!<\/span>\r\n\r\n<span class=\"c1\">\/\/ We start with the kind of generic programming you might be familiar with. To<\/span>\r\n<span class=\"c1\">\/\/ define a class or function that takes a type parameter:<\/span>\r\n<span class=\"k\">template<\/span><span class=\"o\">&lt;<\/span><span class=\"k\">class<\/span> <span class=\"nc\">T<\/span><span class=\"o\">&gt;<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Box<\/span> <span class=\"p\">{<\/span>\r\n<span class=\"k\">public<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"c1\">\/\/ In this class, T can be used as any other type.<\/span>\r\n",




        "2":"<span class=\"kt\">void<\/span> <span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">T<\/span><span class=\"o\">&amp;<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span> <span class=\"p\">...<\/span> <span class=\"p\">}<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n<span class=\"c1\">\/\/ During compilation, the compiler actually generates copies of each template<\/span>\r\n<span class=\"c1\">\/\/ with parameters substituted, so the full definition of the class must be<\/span>\r\n<span class=\"c1\">\/\/ present at each invocation. This is why you will see template classes defined<\/span>\r\n<span class=\"c1\">\/\/ entirely in header files.<\/span>\r\n\r\n<span class=\"c1\">\/\/ To instantiate a template class on the stack:<\/span>\r\n<span class=\"n\">Box<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">intBox<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ and you can use it as you would expect:<\/span>\r\n<span class=\"n\">intBox<\/span><span class=\"p\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"mi\">123<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can, of course, nest templates:<\/span>\r\n<span class=\"n\">Box<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">Box<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"o\">&gt;<\/span> <span class=\"o\">&gt;<\/span> <span class=\"n\">boxOfBox<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">boxOfBox<\/span><span class=\"p\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"n\">intBox<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"c1\">\/\/ Until C++11, you had to place a space between the two &#39;&gt;&#39;s, otherwise &#39;&gt;&gt;&#39;<\/span>\r\n<span class=\"c1\">\/\/ would be parsed as the right shift operator.<\/span>\r\n\r\n<span class=\"c1\">\/\/ You will sometimes see<\/span>\r\n<span class=\"c1\">\/\/   template&lt;typename T&gt;<\/span>\r\n<span class=\"c1\">\/\/ instead. The &#39;class&#39; keyword and &#39;typename&#39; keywords are _mostly_<\/span>\r\n<span class=\"c1\">\/\/ interchangeable in this case. For the full explanation, see<\/span>\r\n<span class=\"c1\">\/\/   http:\/\/en.wikipedia.org\/wiki\/Typename<\/span>\r\n<span class=\"c1\">\/\/ (yes, that keyword has its own Wikipedia page).<\/span>\r\n\r\n<span class=\"c1\">\/\/ Similarly, a template function:<\/span>\r\n<span class=\"k\">template<\/span><span class=\"o\">&lt;<\/span><span class=\"k\">class<\/span> <span class=\"nc\">T<\/span><span class=\"o\">&gt;<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">barkThreeTimes<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">T<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">input<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">input<\/span><span class=\"p\">.<\/span><span class=\"n\">bark<\/span><span class=\"p\">();<\/span>\r\n    <span class=\"n\">input<\/span><span class=\"p\">.<\/span><span class=\"n\">bark<\/span><span class=\"p\">();<\/span>\r\n    <span class=\"n\">input<\/span><span class=\"p\">.<\/span><span class=\"n\">bark<\/span><span class=\"p\">();<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Notice that nothing is specified about the type parameters here. The compiler<\/span>\r\n<span class=\"c1\">\/\/ will generate and then type-check every invocation of the template, so the<\/span>\r\n<span class=\"c1\">\/\/ above function works with any type &#39;T&#39; that has a const &#39;bark&#39; method!<\/span>\r\n\r\n<span class=\"n\">Dog<\/span> <span class=\"n\">fluffy<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">fluffy<\/span><span class=\"p\">.<\/span><span class=\"n\">setName<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Fluffy&quot;<\/span><span class=\"p\">)<\/span>\r\n<span class=\"n\">barkThreeTimes<\/span><span class=\"p\">(<\/span><span class=\"n\">fluffy<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Prints &quot;Fluffy barks&quot; three times.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Template parameters don&#39;t have to be classes:<\/span>\r\n<span class=\"k\">template<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span> <span class=\"n\">Y<\/span><span class=\"o\">&gt;<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">printMessage<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Learn C++ in &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">Y<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot; minutes!&quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">endl<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ And you can explicitly specialize templates for more efficient code. Of<\/span>\r\n<span class=\"c1\">\/\/ course, most real-world uses of specialization are not as trivial as this.<\/span>\r\n<span class=\"c1\">\/\/ Note that you still need to declare the function (or class) as a template<\/span>\r\n<span class=\"c1\">\/\/ even if you explicitly specified all parameters.<\/span>\r\n<span class=\"k\">template<\/span><span class=\"o\">&lt;&gt;<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">printMessage<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">10<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Learn C++ faster in only 10 minutes!&quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">endl<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"n\">printMessage<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">20<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">();<\/span>  <span class=\"c1\">\/\/ Prints &quot;Learn C++ in 20 minutes!&quot;<\/span>\r\n<span class=\"n\">printMessage<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">10<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">();<\/span>  <span class=\"c1\">\/\/ Prints &quot;Learn C++ faster in only 10 minutes!&quot;<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Exception Handling<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ The standard library provides a few exception types<\/span>\r\n<span class=\"c1\">\/\/ (see http:\/\/en.cppreference.com\/w\/cpp\/error\/exception)<\/span>\r\n<span class=\"c1\">\/\/ but any type can be thrown as an exception<\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;exception&gt;<\/span><span class=\"cp\"><\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;stdexcept&gt;<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"c1\">\/\/ All exceptions thrown inside the _try_ block can be caught by subsequent<\/span>\r\n<span class=\"c1\">\/\/ _catch_ handlers.<\/span>\r\n<span class=\"k\">try<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Do not allocate exceptions on the heap using _new_.<\/span>\r\n    <span class=\"k\">throw<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">runtime_error<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;A problem occurred&quot;<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Catch exceptions by const reference if they are objects<\/span>\r\n<span class=\"k\">catch<\/span> <span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">exception<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">ex<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">ex<\/span><span class=\"p\">.<\/span><span class=\"n\">what<\/span><span class=\"p\">();<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Catches any exception not caught by previous _catch_ blocks<\/span>\r\n<span class=\"k\">catch<\/span> <span class=\"p\">(...)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;Unknown exception caught&quot;<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"k\">throw<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Re-throws the exception<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ RAII<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ RAII stands for &quot;Resource Acquisition Is Initialization&quot;.<\/span>\r\n<span class=\"c1\">\/\/ It is often considered the most powerful paradigm in C++<\/span>\r\n<span class=\"c1\">\/\/ and is the simple concept that a constructor for an object<\/span>\r\n<span class=\"c1\">\/\/ acquires that object&#39;s resources and the destructor releases them.<\/span>\r\n\r\n<span class=\"c1\">\/\/ To understand how this is useful,<\/span>\r\n<span class=\"c1\">\/\/ consider a function that uses a C file handle:<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">doSomethingWithAFile<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"kt\">char<\/span><span class=\"o\">*<\/span> <span class=\"n\">filename<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ To begin with, assume nothing can fail.<\/span>\r\n\r\n    <span class=\"kt\">FILE<\/span><span class=\"o\">*<\/span> <span class=\"n\">fh<\/span> <span class=\"o\">=<\/span> <span class=\"n\">fopen<\/span><span class=\"p\">(<\/span><span class=\"n\">filename<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;r&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Open the file in read mode.<\/span>\r\n\r\n    <span class=\"n\">doSomethingWithTheFile<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"n\">doSomethingElseWithIt<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span>\r\n\r\n    <span class=\"n\">fclose<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Close the file handle.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Unfortunately, things are quickly complicated by error handling.<\/span>\r\n<span class=\"c1\">\/\/ Suppose fopen can fail, and that doSomethingWithTheFile and<\/span>\r\n<span class=\"c1\">\/\/ doSomethingElseWithIt return error codes if they fail.<\/span>\r\n<span class=\"c1\">\/\/  (Exceptions are the preferred way of handling failure,<\/span>\r\n<span class=\"c1\">\/\/   but some programmers, especially those with a C background,<\/span>\r\n<span class=\"c1\">\/\/   disagree on the utility of exceptions).<\/span>\r\n<span class=\"c1\">\/\/ We now have to check each call for failure and close the file handle<\/span>\r\n<span class=\"c1\">\/\/ if a problem occurred.<\/span>\r\n<span class=\"kt\">bool<\/span> <span class=\"n\">doSomethingWithAFile<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"kt\">char<\/span><span class=\"o\">*<\/span> <span class=\"n\">filename<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"kt\">FILE<\/span><span class=\"o\">*<\/span> <span class=\"n\">fh<\/span> <span class=\"o\">=<\/span> <span class=\"n\">fopen<\/span><span class=\"p\">(<\/span><span class=\"n\">filename<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;r&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Open the file in read mode<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"n\">fh<\/span> <span class=\"o\">==<\/span> <span class=\"k\">nullptr<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ The returned pointer is null on failure.<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"nb\">false<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Report that failure to the caller.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Assume each function returns false if it failed<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">doSomethingWithTheFile<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"n\">fclose<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Close the file handle so it doesn&#39;t leak.<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"nb\">false<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Propagate the error.<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">doSomethingElseWithIt<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"n\">fclose<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Close the file handle so it doesn&#39;t leak.<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"nb\">false<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Propagate the error.<\/span>\r\n    <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"n\">fclose<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Close the file handle so it doesn&#39;t leak.<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"nb\">true<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Indicate success<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ C programmers often clean this up a little bit using goto:<\/span>\r\n<span class=\"kt\">bool<\/span> <span class=\"n\">doSomethingWithAFile<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"kt\">char<\/span><span class=\"o\">*<\/span> <span class=\"n\">filename<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"kt\">FILE<\/span><span class=\"o\">*<\/span> <span class=\"n\">fh<\/span> <span class=\"o\">=<\/span> <span class=\"n\">fopen<\/span><span class=\"p\">(<\/span><span class=\"n\">filename<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;r&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"n\">fh<\/span> <span class=\"o\">==<\/span> <span class=\"k\">nullptr<\/span><span class=\"p\">)<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"nb\">false<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">doSomethingWithTheFile<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">))<\/span>\r\n        <span class=\"k\">goto<\/span> <span class=\"n\">failure<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">doSomethingElseWithIt<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">))<\/span>\r\n        <span class=\"k\">goto<\/span> <span class=\"n\">failure<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"n\">fclose<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Close the file<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"nb\">true<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Indicate success<\/span>\r\n\r\n<span class=\"nl\">failure<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"n\">fclose<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"nb\">false<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Propagate the error<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ If the functions indicate errors using exceptions,<\/span>\r\n<span class=\"c1\">\/\/ things are a little cleaner, but still sub-optimal.<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">doSomethingWithAFile<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"kt\">char<\/span><span class=\"o\">*<\/span> <span class=\"n\">filename<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"kt\">FILE<\/span><span class=\"o\">*<\/span> <span class=\"n\">fh<\/span> <span class=\"o\">=<\/span> <span class=\"n\">fopen<\/span><span class=\"p\">(<\/span><span class=\"n\">filename<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;r&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Open the file in shared_ptrread mode<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"n\">fh<\/span> <span class=\"o\">==<\/span> <span class=\"k\">nullptr<\/span><span class=\"p\">)<\/span>\r\n        <span class=\"k\">throw<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">runtime_error<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Could not open the file.&quot;<\/span><span class=\"p\">);<\/span>\r\n\r\n    <span class=\"k\">try<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"n\">doSomethingWithTheFile<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span>\r\n        <span class=\"n\">doSomethingElseWithIt<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"k\">catch<\/span> <span class=\"p\">(...)<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"n\">fclose<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Be sure to close the file if an error occurs.<\/span>\r\n        <span class=\"k\">throw<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Then re-throw the exception.<\/span>\r\n    <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"n\">fclose<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Close the file<\/span>\r\n    <span class=\"c1\">\/\/ Everything succeeded<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Compare this to the use of C++&#39;s file stream class (fstream)<\/span>\r\n<span class=\"c1\">\/\/ fstream uses its destructor to close the file.<\/span>\r\n<span class=\"c1\">\/\/ Recall from above that destructors are automatically called<\/span>\r\n<span class=\"c1\">\/\/ whenever an object falls out of scope.<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"n\">doSomethingWithAFile<\/span><span class=\"p\">(<\/span><span class=\"k\">const<\/span> <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">string<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">filename<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ ifstream is short for input file stream<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">ifstream<\/span> <span class=\"n\">fh<\/span><span class=\"p\">(<\/span><span class=\"n\">filename<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Open the file<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Do things with the file<\/span>\r\n    <span class=\"n\">doSomethingWithTheFile<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"n\">doSomethingElseWithIt<\/span><span class=\"p\">(<\/span><span class=\"n\">fh<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"p\">}<\/span> <span class=\"c1\">\/\/ The file is automatically closed here by the destructor<\/span>\r\n\r\n<span class=\"c1\">\/\/ This has _massive_ advantages:<\/span>\r\n<span class=\"c1\">\/\/ 1. No matter what happens,<\/span>\r\n<span class=\"c1\">\/\/    the resource (in this case the file handle) will be cleaned up.<\/span>\r\n<span class=\"c1\">\/\/    Once you write the destructor correctly,<\/span>\r\n<span class=\"c1\">\/\/    It is _impossible_ to forget to close the handle and leak the resource.<\/span>\r\n<span class=\"c1\">\/\/ 2. Note that the code is much cleaner.<\/span>\r\n<span class=\"c1\">\/\/    The destructor handles closing the file behind the scenes<\/span>\r\n<span class=\"c1\">\/\/    without you having to worry about it.<\/span>\r\n<span class=\"c1\">\/\/ 3. The code is exception safe.<\/span>\r\n<span class=\"c1\">\/\/    An exception can be thrown anywhere in the function and cleanup<\/span>\r\n<span class=\"c1\">\/\/    will still occur.<\/span>\r\n\r\n<span class=\"c1\">\/\/ All idiomatic C++ code uses RAII extensively for all resources.<\/span>\r\n<span class=\"c1\">\/\/ Additional examples include<\/span>\r\n<span class=\"c1\">\/\/ - Memory using unique_ptr and shared_ptr<\/span>\r\n<span class=\"c1\">\/\/ - Containers - the standard library linked list,<\/span>\r\n<span class=\"c1\">\/\/   vector (i.e. self-resizing array), hash maps, and so on<\/span>\r\n<span class=\"c1\">\/\/   all automatically destroy their contents when they fall out of scope.<\/span>\r\n<span class=\"c1\">\/\/ - Mutexes using lock_guard and unique_lock<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Smart Pointer<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Generally a smart pointer is a class which wraps a &quot;raw pointer&quot; (usage of &quot;new&quot;<\/span>\r\n<span class=\"c1\">\/\/ respectively malloc\/calloc in C). The goal is to be able to<\/span>\r\n<span class=\"c1\">\/\/ manage the lifetime of the object being pointed to without ever needing to explicitly delete <\/span>\r\n<span class=\"c1\">\/\/ the object. The term itself simply describes a set of pointers with the<\/span>\r\n<span class=\"c1\">\/\/ mentioned abstraction.<\/span>\r\n<span class=\"c1\">\/\/ Smart pointers should preferred over raw pointers, to prevent<\/span>\r\n<span class=\"c1\">\/\/ risky memory leaks, which happen if you forget to delete an object.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Usage of a raw pointer:<\/span>\r\n<span class=\"n\">Dog<\/span><span class=\"o\">*<\/span> <span class=\"n\">ptr<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">Dog<\/span><span class=\"p\">();<\/span>\r\n<span class=\"n\">ptr<\/span><span class=\"o\">-&gt;<\/span><span class=\"n\">bark<\/span><span class=\"p\">();<\/span>\r\n<span class=\"k\">delete<\/span> <span class=\"n\">ptr<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ By using a smart pointer, you don&#39;t have to worry about the deletion<\/span>\r\n<span class=\"c1\">\/\/ of the object anymore.<\/span>\r\n<span class=\"c1\">\/\/ A smart pointer describes a policy, to count the references to the<\/span>\r\n<span class=\"c1\">\/\/ pointer. The object gets destroyed when the last<\/span>\r\n<span class=\"c1\">\/\/ reference to the object gets destroyed.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Usage of &quot;std::shared_ptr&quot;:<\/span>\r\n<span class=\"kt\">void<\/span> <span class=\"nf\">foo<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">{<\/span>\r\n<span class=\"c1\">\/\/ It&#39;s no longer necessary to delete the Dog.<\/span>\r\n<span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">shared_ptr<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">Dog<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">doggo<\/span><span class=\"p\">(<\/span><span class=\"k\">new<\/span> <span class=\"n\">Dog<\/span><span class=\"p\">());<\/span>\r\n<span class=\"n\">doggo<\/span><span class=\"o\">-&gt;<\/span><span class=\"n\">bark<\/span><span class=\"p\">();<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Beware of possible circular references!!!<\/span>\r\n<span class=\"c1\">\/\/ There will be always a reference, so it will be never destroyed!<\/span>\r\n<span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">shared_ptr<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">Dog<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">doggo_one<\/span><span class=\"p\">(<\/span><span class=\"k\">new<\/span> <span class=\"n\">Dog<\/span><span class=\"p\">());<\/span>\r\n<span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">shared_ptr<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">Dog<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">doggo_two<\/span><span class=\"p\">(<\/span><span class=\"k\">new<\/span> <span class=\"n\">Dog<\/span><span class=\"p\">());<\/span>\r\n<span class=\"n\">doggo_one<\/span> <span class=\"o\">=<\/span> <span class=\"n\">doggo_two<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ p1 references p2<\/span>\r\n<span class=\"n\">doggo_two<\/span> <span class=\"o\">=<\/span> <span class=\"n\">doggo_one<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ p2 references p1<\/span>\r\n\r\n<span class=\"c1\">\/\/ There are several kinds of smart pointers. <\/span>\r\n<span class=\"c1\">\/\/ The way you have to use them is always the same.<\/span>\r\n<span class=\"c1\">\/\/ This leads us to the question: when should we use each kind of smart pointer?<\/span>\r\n<span class=\"c1\">\/\/ std::unique_ptr - use it when you just want to hold one reference to<\/span>\r\n<span class=\"c1\">\/\/ the object.<\/span>\r\n<span class=\"c1\">\/\/ std::shared_ptr - use it when you want to hold multiple references to the<\/span>\r\n<span class=\"c1\">\/\/ same object and want to make sure that it&#39;s deallocated<\/span>\r\n<span class=\"c1\">\/\/ when all references are gone.<\/span>\r\n<span class=\"c1\">\/\/ std::weak_ptr - use it when you want to access<\/span>\r\n<span class=\"c1\">\/\/ the underlying object of a std::shared_ptr without causing that object to stay allocated.<\/span>\r\n<span class=\"c1\">\/\/ Weak pointers are used to prevent circular referencing.<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Containers<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Containers or the Standard Template Library are some predefined templates.<\/span>\r\n<span class=\"c1\">\/\/ They manage the storage space for its elements and provide<\/span>\r\n<span class=\"c1\">\/\/ member functions to access and manipulate them.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Few containers are as follows:<\/span>\r\n\r\n<span class=\"c1\">\/\/ Vector (Dynamic array)<\/span>\r\n<span class=\"c1\">\/\/ Allow us to Define the Array or list of objects at run time<\/span>\r\n<span class=\"cp\">#include<\/span> <span class=\"cpf\">&lt;vector&gt;<\/span><span class=\"cp\"><\/span>\r\n<span class=\"n\">string<\/span> <span class=\"n\">val<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">vector<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">string<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">my_vector<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ initialize the vector<\/span>\r\n<span class=\"n\">cin<\/span> <span class=\"o\">&gt;&gt;<\/span> <span class=\"n\">val<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">my_vector<\/span><span class=\"p\">.<\/span><span class=\"n\">push_back<\/span><span class=\"p\">(<\/span><span class=\"n\">val<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ will push the value of &#39;val&#39; into vector (&quot;array&quot;) my_vector<\/span>\r\n<span class=\"n\">my_vector<\/span><span class=\"p\">.<\/span><span class=\"n\">push_back<\/span><span class=\"p\">(<\/span><span class=\"n\">val<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ will push the value into the vector again (now having two elements)<\/span>\r\n\r\n<span class=\"c1\">\/\/ To iterate through a vector we have 2 choices:<\/span>\r\n<span class=\"c1\">\/\/ Either classic looping (iterating through the vector from index 0 to its last index):<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">my_vector<\/span><span class=\"p\">.<\/span><span class=\"n\">size<\/span><span class=\"p\">();<\/span> <span class=\"n\">i<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">my_vector<\/span><span class=\"p\">[<\/span><span class=\"n\">i<\/span><span class=\"p\">]<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">endl<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ for accessing a vector&#39;s element we can use the operator []<\/span>\r\n",





        "3":"<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ or using an iterator:<\/span>\r\n<span class=\"n\">vector<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">string<\/span><span class=\"o\">&gt;::<\/span><span class=\"n\">iterator<\/span> <span class=\"n\">it<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ initialize the iterator for vector<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">it<\/span> <span class=\"o\">=<\/span> <span class=\"n\">my_vector<\/span><span class=\"p\">.<\/span><span class=\"n\">begin<\/span><span class=\"p\">();<\/span> <span class=\"n\">it<\/span> <span class=\"o\">!=<\/span> <span class=\"n\">my_vector<\/span><span class=\"p\">.<\/span><span class=\"n\">end<\/span><span class=\"p\">();<\/span> <span class=\"o\">++<\/span><span class=\"n\">it<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"o\">*<\/span><span class=\"n\">it<\/span>  <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">endl<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Set<\/span>\r\n<span class=\"c1\">\/\/ Sets are containers that store unique elements following a specific order.<\/span>\r\n<span class=\"c1\">\/\/ Set is a very useful container to store unique values in sorted order<\/span>\r\n<span class=\"c1\">\/\/ without any other functions or code.<\/span>\r\n\r\n<span class=\"cp\">#include<\/span><span class=\"cpf\">&lt;set&gt;<\/span><span class=\"cp\"><\/span>\r\n<span class=\"n\">set<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">ST<\/span><span class=\"p\">;<\/span>    <span class=\"c1\">\/\/ Will initialize the set of int data type<\/span>\r\n<span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"mi\">30<\/span><span class=\"p\">);<\/span>  <span class=\"c1\">\/\/ Will insert the value 30 in set ST<\/span>\r\n<span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">);<\/span>  <span class=\"c1\">\/\/ Will insert the value 10 in set ST<\/span>\r\n<span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"mi\">20<\/span><span class=\"p\">);<\/span>  <span class=\"c1\">\/\/ Will insert the value 20 in set ST<\/span>\r\n<span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"mi\">30<\/span><span class=\"p\">);<\/span>  <span class=\"c1\">\/\/ Will insert the value 30 in set ST<\/span>\r\n<span class=\"c1\">\/\/ Now elements of sets are as follows<\/span>\r\n<span class=\"c1\">\/\/  10 20 30<\/span>\r\n\r\n<span class=\"c1\">\/\/ To erase an element<\/span>\r\n<span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">erase<\/span><span class=\"p\">(<\/span><span class=\"mi\">20<\/span><span class=\"p\">);<\/span>  <span class=\"c1\">\/\/ Will erase element with value 20<\/span>\r\n<span class=\"c1\">\/\/ Set ST: 10 30<\/span>\r\n<span class=\"c1\">\/\/ To iterate through Set we use iterators<\/span>\r\n<span class=\"n\">set<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"o\">&gt;::<\/span><span class=\"n\">iterator<\/span> <span class=\"n\">it<\/span><span class=\"p\">;<\/span>\r\n<span class=\"k\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">it<\/span><span class=\"o\">=<\/span><span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">begin<\/span><span class=\"p\">();<\/span><span class=\"n\">it<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">end<\/span><span class=\"p\">();<\/span><span class=\"n\">it<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"o\">*<\/span><span class=\"n\">it<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">endl<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"c1\">\/\/ Output:<\/span>\r\n<span class=\"c1\">\/\/ 10<\/span>\r\n<span class=\"c1\">\/\/ 30<\/span>\r\n\r\n<span class=\"c1\">\/\/ To clear the complete container we use Container_name.clear()<\/span>\r\n<span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">clear<\/span><span class=\"p\">();<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">ST<\/span><span class=\"p\">.<\/span><span class=\"n\">size<\/span><span class=\"p\">();<\/span>  <span class=\"c1\">\/\/ will print the size of set ST<\/span>\r\n<span class=\"c1\">\/\/ Output: 0<\/span>\r\n\r\n<span class=\"c1\">\/\/ NOTE: for duplicate elements we can use multiset<\/span>\r\n<span class=\"c1\">\/\/ NOTE: For hash sets, use unordered_set. They are more efficient but<\/span>\r\n<span class=\"c1\">\/\/ do not preserve order. unordered_set is available since C++11<\/span>\r\n\r\n<span class=\"c1\">\/\/ Map<\/span>\r\n<span class=\"c1\">\/\/ Maps store elements formed by a combination of a key value<\/span>\r\n<span class=\"c1\">\/\/ and a mapped value, following a specific order.<\/span>\r\n\r\n<span class=\"cp\">#include<\/span><span class=\"cpf\">&lt;map&gt;<\/span><span class=\"cp\"><\/span>\r\n<span class=\"n\">map<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">char<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">mymap<\/span><span class=\"p\">;<\/span>  <span class=\"c1\">\/\/ Will initialize the map with key as char and value as int<\/span>\r\n\r\n<span class=\"n\">mymap<\/span><span class=\"p\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"n\">pair<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">char<\/span><span class=\"p\">,<\/span><span class=\"kt\">int<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"sc\">&#39;A&#39;<\/span><span class=\"p\">,<\/span><span class=\"mi\">1<\/span><span class=\"p\">));<\/span>\r\n<span class=\"c1\">\/\/ Will insert value 1 for key A<\/span>\r\n<span class=\"n\">mymap<\/span><span class=\"p\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"n\">pair<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">char<\/span><span class=\"p\">,<\/span><span class=\"kt\">int<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"sc\">&#39;Z&#39;<\/span><span class=\"p\">,<\/span><span class=\"mi\">26<\/span><span class=\"p\">));<\/span>\r\n<span class=\"c1\">\/\/ Will insert value 26 for key Z<\/span>\r\n\r\n<span class=\"c1\">\/\/ To iterate<\/span>\r\n<span class=\"n\">map<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">char<\/span><span class=\"p\">,<\/span><span class=\"kt\">int<\/span><span class=\"o\">&gt;::<\/span><span class=\"n\">iterator<\/span> <span class=\"n\">it<\/span><span class=\"p\">;<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"n\">it<\/span><span class=\"o\">=<\/span><span class=\"n\">mymap<\/span><span class=\"p\">.<\/span><span class=\"n\">begin<\/span><span class=\"p\">();<\/span> <span class=\"n\">it<\/span><span class=\"o\">!=<\/span><span class=\"n\">mymap<\/span><span class=\"p\">.<\/span><span class=\"n\">end<\/span><span class=\"p\">();<\/span> <span class=\"o\">++<\/span><span class=\"n\">it<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">it<\/span><span class=\"o\">-&gt;<\/span><span class=\"n\">first<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;-&gt;&quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">it<\/span><span class=\"o\">-&gt;<\/span><span class=\"n\">second<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"sc\">&#39;\\n&#39;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"c1\">\/\/ Output:<\/span>\r\n<span class=\"c1\">\/\/ A-&gt;1<\/span>\r\n<span class=\"c1\">\/\/ Z-&gt;26<\/span>\r\n\r\n<span class=\"c1\">\/\/ To find the value corresponding to a key<\/span>\r\n<span class=\"n\">it<\/span> <span class=\"o\">=<\/span> <span class=\"n\">mymap<\/span><span class=\"p\">.<\/span><span class=\"n\">find<\/span><span class=\"p\">(<\/span><span class=\"sc\">&#39;Z&#39;<\/span><span class=\"p\">);<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">it<\/span><span class=\"o\">-&gt;<\/span><span class=\"n\">second<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Output: 26<\/span>\r\n\r\n<span class=\"c1\">\/\/ NOTE: For hash maps, use unordered_map. They are more efficient but do<\/span>\r\n<span class=\"c1\">\/\/ not preserve order. unordered_map is available since C++11.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Containers with object keys of non-primitive values (custom classes) require<\/span>\r\n<span class=\"c1\">\/\/ compare function in the object itself or as a function pointer. Primitives<\/span>\r\n<span class=\"c1\">\/\/ have default comparators, but you can override it.<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Foo<\/span> <span class=\"p\">{<\/span>\r\n<span class=\"k\">public<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"kt\">int<\/span> <span class=\"n\">j<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"n\">Foo<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">a<\/span><span class=\"p\">)<\/span> <span class=\"o\">:<\/span> <span class=\"n\">j<\/span><span class=\"p\">(<\/span><span class=\"n\">a<\/span><span class=\"p\">)<\/span> <span class=\"p\">{}<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"k\">struct<\/span> <span class=\"n\">compareFunction<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"kt\">bool<\/span> <span class=\"k\">operator<\/span><span class=\"p\">()(<\/span><span class=\"k\">const<\/span> <span class=\"n\">Foo<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">a<\/span><span class=\"p\">,<\/span> <span class=\"k\">const<\/span> <span class=\"n\">Foo<\/span><span class=\"o\">&amp;<\/span> <span class=\"n\">b<\/span><span class=\"p\">)<\/span> <span class=\"k\">const<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"n\">a<\/span><span class=\"p\">.<\/span><span class=\"n\">j<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">b<\/span><span class=\"p\">.<\/span><span class=\"n\">j<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"c1\">\/\/ this isn&#39;t allowed (although it can vary depending on compiler)<\/span>\r\n<span class=\"c1\">\/\/ std::map&lt;Foo, int&gt; fooMap;<\/span>\r\n<span class=\"n\">std<\/span><span class=\"o\">::<\/span><span class=\"n\">map<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">Foo<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span><span class=\"p\">,<\/span> <span class=\"n\">compareFunction<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">fooMap<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">fooMap<\/span><span class=\"p\">[<\/span><span class=\"n\">Foo<\/span><span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">)]<\/span>  <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">fooMap<\/span><span class=\"p\">.<\/span><span class=\"n\">find<\/span><span class=\"p\">(<\/span><span class=\"n\">Foo<\/span><span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">));<\/span> <span class=\"c1\">\/\/true<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Lambda Expressions (C++11 and above)<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ lambdas are a convenient way of defining an anonymous function<\/span>\r\n<span class=\"c1\">\/\/ object right at the location where it is invoked or passed as<\/span>\r\n<span class=\"c1\">\/\/ an argument to a function.<\/span>\r\n\r\n<span class=\"c1\">\/\/ For example, consider sorting a vector of pairs using the second<\/span>\r\n<span class=\"c1\">\/\/ value of the pair<\/span>\r\n\r\n<span class=\"n\">vector<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">pair<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span><span class=\"o\">&gt;<\/span> <span class=\"o\">&gt;<\/span> <span class=\"n\">tester<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">tester<\/span><span class=\"p\">.<\/span><span class=\"n\">push_back<\/span><span class=\"p\">(<\/span><span class=\"n\">make_pair<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">));<\/span>\r\n<span class=\"n\">tester<\/span><span class=\"p\">.<\/span><span class=\"n\">push_back<\/span><span class=\"p\">(<\/span><span class=\"n\">make_pair<\/span><span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">9<\/span><span class=\"p\">));<\/span>\r\n<span class=\"n\">tester<\/span><span class=\"p\">.<\/span><span class=\"n\">push_back<\/span><span class=\"p\">(<\/span><span class=\"n\">make_pair<\/span><span class=\"p\">(<\/span><span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">0<\/span><span class=\"p\">));<\/span>\r\n\r\n<span class=\"c1\">\/\/ Pass a lambda expression as third argument to the sort function<\/span>\r\n<span class=\"c1\">\/\/ sort is from the &lt;algorithm&gt; header<\/span>\r\n\r\n<span class=\"n\">sort<\/span><span class=\"p\">(<\/span><span class=\"n\">tester<\/span><span class=\"p\">.<\/span><span class=\"n\">begin<\/span><span class=\"p\">(),<\/span> <span class=\"n\">tester<\/span><span class=\"p\">.<\/span><span class=\"n\">end<\/span><span class=\"p\">(),<\/span> <span class=\"p\">[](<\/span><span class=\"k\">const<\/span> <span class=\"n\">pair<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span><span class=\"o\">&gt;&amp;<\/span> <span class=\"n\">lhs<\/span><span class=\"p\">,<\/span> <span class=\"k\">const<\/span> <span class=\"n\">pair<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"p\">,<\/span> <span class=\"kt\">int<\/span><span class=\"o\">&gt;&amp;<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"n\">lhs<\/span><span class=\"p\">.<\/span><span class=\"n\">second<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">rhs<\/span><span class=\"p\">.<\/span><span class=\"n\">second<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"p\">});<\/span>\r\n\r\n<span class=\"c1\">\/\/ Notice the syntax of the lambda expression,<\/span>\r\n<span class=\"c1\">\/\/ [] in the lambda is used to &quot;capture&quot; variables<\/span>\r\n<span class=\"c1\">\/\/ The &quot;Capture List&quot; defines what from the outside of the lambda should be available inside the function body and how.<\/span>\r\n<span class=\"c1\">\/\/ It can be either:<\/span>\r\n<span class=\"c1\">\/\/     1. a value : [x]<\/span>\r\n<span class=\"c1\">\/\/     2. a reference : [&amp;x]<\/span>\r\n<span class=\"c1\">\/\/     3. any variable currently in scope by reference [&amp;]<\/span>\r\n<span class=\"c1\">\/\/     4. same as 3, but by value [=]<\/span>\r\n<span class=\"c1\">\/\/ Example:<\/span>\r\n\r\n<span class=\"n\">vector<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">dog_ids<\/span><span class=\"p\">;<\/span>\r\n<span class=\"c1\">\/\/ number_of_dogs = 3;<\/span>\r\n<span class=\"k\">for<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">3<\/span><span class=\"p\">;<\/span> <span class=\"n\">i<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"n\">dog_ids<\/span><span class=\"p\">.<\/span><span class=\"n\">push_back<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"n\">weight<\/span><span class=\"p\">[<\/span><span class=\"mi\">3<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"mi\">30<\/span><span class=\"p\">,<\/span> <span class=\"mi\">50<\/span><span class=\"p\">,<\/span> <span class=\"mi\">10<\/span><span class=\"p\">};<\/span>\r\n\r\n<span class=\"c1\">\/\/ Say you want to sort dog_ids according to the dogs&#39; weights<\/span>\r\n<span class=\"c1\">\/\/ So dog_ids should in the end become: [2, 0, 1]<\/span>\r\n\r\n<span class=\"c1\">\/\/ Here&#39;s where lambda expressions come in handy<\/span>\r\n\r\n<span class=\"n\">sort<\/span><span class=\"p\">(<\/span><span class=\"n\">dog_ids<\/span><span class=\"p\">.<\/span><span class=\"n\">begin<\/span><span class=\"p\">(),<\/span> <span class=\"n\">dog_ids<\/span><span class=\"p\">.<\/span><span class=\"n\">end<\/span><span class=\"p\">(),<\/span> <span class=\"p\">[<\/span><span class=\"o\">&amp;<\/span><span class=\"n\">weight<\/span><span class=\"p\">](<\/span><span class=\"k\">const<\/span> <span class=\"kt\">int<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">lhs<\/span><span class=\"p\">,<\/span> <span class=\"k\">const<\/span> <span class=\"kt\">int<\/span> <span class=\"o\">&amp;<\/span><span class=\"n\">rhs<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"n\">weight<\/span><span class=\"p\">[<\/span><span class=\"n\">lhs<\/span><span class=\"p\">]<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">weight<\/span><span class=\"p\">[<\/span><span class=\"n\">rhs<\/span><span class=\"p\">];<\/span>\r\n    <span class=\"p\">});<\/span>\r\n<span class=\"c1\">\/\/ Note we captured &quot;weight&quot; by reference in the above example.<\/span>\r\n<span class=\"c1\">\/\/ More on Lambdas in C++ : http:\/\/stackoverflow.com\/questions\/7627098\/what-is-a-lambda-expression-in-c11<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Range For (C++11 and above)<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can use a range for loop to iterate over a container<\/span>\r\n<span class=\"kt\">int<\/span> <span class=\"n\">arr<\/span><span class=\"p\">[]<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">10<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">};<\/span>\r\n\r\n<span class=\"k\">for<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span> <span class=\"nl\">elem<\/span><span class=\"p\">:<\/span> <span class=\"n\">arr<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">elem<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">endl<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can use &quot;auto&quot; and not worry about the type of the elements of the container<\/span>\r\n<span class=\"c1\">\/\/ For example:<\/span>\r\n\r\n<span class=\"k\">for<\/span><span class=\"p\">(<\/span><span class=\"k\">auto<\/span> <span class=\"nl\">elem<\/span><span class=\"p\">:<\/span> <span class=\"n\">arr<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Do something with each element of arr<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Fun stuff<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Aspects of C++ that may be surprising to newcomers (and even some veterans).<\/span>\r\n<span class=\"c1\">\/\/ This section is, unfortunately, wildly incomplete; C++ is one of the easiest<\/span>\r\n<span class=\"c1\">\/\/ languages with which to shoot yourself in the foot.<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can override private methods!<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Foo<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"k\">virtual<\/span> <span class=\"kt\">void<\/span> <span class=\"n\">bar<\/span><span class=\"p\">();<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">FooSub<\/span> <span class=\"o\">:<\/span> <span class=\"k\">public<\/span> <span class=\"n\">Foo<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"k\">virtual<\/span> <span class=\"kt\">void<\/span> <span class=\"n\">bar<\/span><span class=\"p\">();<\/span>  <span class=\"c1\">\/\/ Overrides Foo::bar!<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ 0 == false == NULL (most of the time)!<\/span>\r\n<span class=\"kt\">bool<\/span><span class=\"o\">*<\/span> <span class=\"n\">pt<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"kt\">bool<\/span><span class=\"p\">;<\/span>\r\n<span class=\"o\">*<\/span><span class=\"n\">pt<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Sets the value points by &#39;pt&#39; to false.<\/span>\r\n<span class=\"n\">pt<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span>  <span class=\"c1\">\/\/ Sets &#39;pt&#39; to the null pointer. Both lines compile without warnings.<\/span>\r\n\r\n<span class=\"c1\">\/\/ nullptr is supposed to fix some of that issue:<\/span>\r\n<span class=\"kt\">int<\/span><span class=\"o\">*<\/span> <span class=\"n\">pt2<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"kt\">int<\/span><span class=\"p\">;<\/span>\r\n<span class=\"o\">*<\/span><span class=\"n\">pt2<\/span> <span class=\"o\">=<\/span> <span class=\"k\">nullptr<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ Doesn&#39;t compile<\/span>\r\n<span class=\"n\">pt2<\/span> <span class=\"o\">=<\/span> <span class=\"k\">nullptr<\/span><span class=\"p\">;<\/span>  <span class=\"c1\">\/\/ Sets pt2 to null.<\/span>\r\n\r\n<span class=\"c1\">\/\/ There is an exception made for bools.<\/span>\r\n<span class=\"c1\">\/\/ This is to allow you to test for null pointers with if(!ptr),<\/span>\r\n<span class=\"c1\">\/\/ but as a consequence you can assign nullptr to a bool directly!<\/span>\r\n<span class=\"o\">*<\/span><span class=\"n\">pt<\/span> <span class=\"o\">=<\/span> <span class=\"k\">nullptr<\/span><span class=\"p\">;<\/span>  <span class=\"c1\">\/\/ This still compiles, even though &#39;*pt&#39; is a bool!<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ &#39;=&#39; != &#39;=&#39; != &#39;=&#39;!<\/span>\r\n<span class=\"c1\">\/\/ Calls Foo::Foo(const Foo&amp;) or some variant (see move semantics) copy<\/span>\r\n<span class=\"c1\">\/\/ constructor.<\/span>\r\n<span class=\"n\">Foo<\/span> <span class=\"n\">f2<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">Foo<\/span> <span class=\"n\">f1<\/span> <span class=\"o\">=<\/span> <span class=\"n\">f2<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Calls Foo::Foo(const Foo&amp;) or variant, but only copies the &#39;Foo&#39; part of<\/span>\r\n<span class=\"c1\">\/\/ &#39;fooSub&#39;. Any extra members of &#39;fooSub&#39; are discarded. This sometimes<\/span>\r\n<span class=\"c1\">\/\/ horrifying behavior is called &quot;object slicing.&quot;<\/span>\r\n<span class=\"n\">FooSub<\/span> <span class=\"n\">fooSub<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">Foo<\/span> <span class=\"n\">f1<\/span> <span class=\"o\">=<\/span> <span class=\"n\">fooSub<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Calls Foo::operator=(Foo&amp;) or variant.<\/span>\r\n<span class=\"n\">Foo<\/span> <span class=\"n\">f1<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">f1<\/span> <span class=\"o\">=<\/span> <span class=\"n\">f2<\/span><span class=\"p\">;<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Tuples (C++11 and above)<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"cp\">#include<\/span><span class=\"cpf\">&lt;tuple&gt;<\/span><span class=\"cp\"><\/span>\r\n\r\n<span class=\"c1\">\/\/ Conceptually, Tuples are similar to  old data structures (C-like structs) but instead of having named data members,<\/span>\r\n<span class=\"c1\">\/\/ its elements are accessed by their order in the tuple.<\/span>\r\n\r\n<span class=\"c1\">\/\/ We start with constructing a tuple.<\/span>\r\n<span class=\"c1\">\/\/ Packing values into tuple<\/span>\r\n<span class=\"k\">auto<\/span> <span class=\"n\">first<\/span> <span class=\"o\">=<\/span> <span class=\"n\">make_tuple<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">,<\/span> <span class=\"sc\">&#39;A&#39;<\/span><span class=\"p\">);<\/span>\r\n<span class=\"k\">const<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">maxN<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">1e9<\/span><span class=\"p\">;<\/span>\r\n<span class=\"k\">const<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">maxL<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">15<\/span><span class=\"p\">;<\/span>\r\n<span class=\"k\">auto<\/span> <span class=\"n\">second<\/span> <span class=\"o\">=<\/span> <span class=\"n\">make_tuple<\/span><span class=\"p\">(<\/span><span class=\"n\">maxN<\/span><span class=\"p\">,<\/span> <span class=\"n\">maxL<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"c1\">\/\/ Printing elements of &#39;first&#39; tuple<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">get<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">0<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"n\">first<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot; &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">get<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">1<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"n\">first<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/prints : 10 A<\/span>\r\n\r\n<span class=\"c1\">\/\/ Printing elements of &#39;second&#39; tuple<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">get<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">0<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"n\">second<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot; &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">get<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">1<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"n\">second<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ prints: 1000000000 15<\/span>\r\n\r\n<span class=\"c1\">\/\/ Unpacking tuple into variables<\/span>\r\n\r\n<span class=\"kt\">int<\/span> <span class=\"n\">first_int<\/span><span class=\"p\">;<\/span>\r\n<span class=\"kt\">char<\/span> <span class=\"n\">first_char<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">tie<\/span><span class=\"p\">(<\/span><span class=\"n\">first_int<\/span><span class=\"p\">,<\/span> <span class=\"n\">first_char<\/span><span class=\"p\">)<\/span> <span class=\"o\">=<\/span> <span class=\"n\">first<\/span><span class=\"p\">;<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">first_int<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot; &quot;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">first_char<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span>  <span class=\"c1\">\/\/ prints : 10 A<\/span>\r\n\r\n<span class=\"c1\">\/\/ We can also create tuple like this.<\/span>\r\n\r\n<span class=\"n\">tuple<\/span><span class=\"o\">&lt;<\/span><span class=\"kt\">int<\/span><span class=\"p\">,<\/span> <span class=\"kt\">char<\/span><span class=\"p\">,<\/span> <span class=\"kt\">double<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">third<\/span><span class=\"p\">(<\/span><span class=\"mi\">11<\/span><span class=\"p\">,<\/span> <span class=\"sc\">&#39;A&#39;<\/span><span class=\"p\">,<\/span> <span class=\"mf\">3.14141<\/span><span class=\"p\">);<\/span>\r\n<span class=\"c1\">\/\/ tuple_size returns number of elements in a tuple (as a constexpr)<\/span>\r\n\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">tuple_size<\/span><span class=\"o\">&lt;<\/span><span class=\"k\">decltype<\/span><span class=\"p\">(<\/span><span class=\"n\">third<\/span><span class=\"p\">)<\/span><span class=\"o\">&gt;::<\/span><span class=\"n\">value<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ prints: 3<\/span>\r\n\r\n<span class=\"c1\">\/\/ tuple_cat concatenates the elements of all the tuples in the same order.<\/span>\r\n\r\n<span class=\"k\">auto<\/span> <span class=\"n\">concatenated_tuple<\/span> <span class=\"o\">=<\/span> <span class=\"n\">tuple_cat<\/span><span class=\"p\">(<\/span><span class=\"n\">first<\/span><span class=\"p\">,<\/span> <span class=\"n\">second<\/span><span class=\"p\">,<\/span> <span class=\"n\">third<\/span><span class=\"p\">);<\/span>\r\n<span class=\"c1\">\/\/ concatenated_tuple becomes = (10, &#39;A&#39;, 1e9, 15, 11, &#39;A&#39;, 3.14141)<\/span>\r\n\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">get<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">0<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"n\">concatenated_tuple<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ prints: 10<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">get<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">3<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"n\">concatenated_tuple<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ prints: 15<\/span>\r\n<span class=\"n\">cout<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"n\">get<\/span><span class=\"o\">&lt;<\/span><span class=\"mi\">5<\/span><span class=\"o\">&gt;<\/span><span class=\"p\">(<\/span><span class=\"n\">concatenated_tuple<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s\">&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ prints: &#39;A&#39;<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ Logical and Bitwise operators<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Most of the operators in C++ are same as in other languages<\/span>\r\n\r\n<span class=\"c1\">\/\/ Logical operators<\/span>\r\n\r\n<span class=\"c1\">\/\/ C++ uses Short-circuit evaluation for boolean expressions, i.e, the second argument is executed or<\/span>\r\n<span class=\"c1\">\/\/ evaluated only if the first argument does not suffice to determine the value of the expression<\/span>\r\n\r\n<span class=\"nb\">true<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"nb\">false<\/span> <span class=\"c1\">\/\/ Performs **logical and** to yield false<\/span>\r\n<span class=\"nb\">true<\/span> <span class=\"o\">||<\/span> <span class=\"nb\">false<\/span> <span class=\"c1\">\/\/ Performs **logical or** to yield true<\/span>\r\n<span class=\"o\">!<\/span> <span class=\"nb\">true<\/span>        <span class=\"c1\">\/\/ Performs **logical not** to yield false<\/span>\r\n\r\n<span class=\"c1\">\/\/ Instead of using symbols equivalent keywords can be used<\/span>\r\n<span class=\"nb\">true<\/span> <span class=\"n\">and<\/span> <span class=\"nb\">false<\/span> <span class=\"c1\">\/\/ Performs **logical and** to yield false<\/span>\r\n<span class=\"nb\">true<\/span> <span class=\"n\">or<\/span> <span class=\"nb\">false<\/span>  <span class=\"c1\">\/\/ Performs **logical or** to yield true<\/span>\r\n<span class=\"n\">not<\/span> <span class=\"nb\">true<\/span>       <span class=\"c1\">\/\/ Performs **logical not** to yield false<\/span>\r\n\r\n<span class=\"c1\">\/\/ Bitwise operators<\/span>\r\n\r\n<span class=\"c1\">\/\/ **&lt;&lt;** Left Shift Operator<\/span>\r\n<span class=\"c1\">\/\/ &lt;&lt; shifts bits to the left<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">\/\/ Shifts bits of 4 to left by 1 to give 8<\/span>\r\n<span class=\"c1\">\/\/ x &lt;&lt; n can be thought as x * 2^n<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ **&gt;&gt;** Right Shift Operator<\/span>\r\n<span class=\"c1\">\/\/ &gt;&gt; shifts bits to the right<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"o\">&gt;&gt;<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">\/\/ Shifts bits of 4 to right by 1 to give 2<\/span>\r\n<span class=\"c1\">\/\/ x &gt;&gt; n can be thought as x \/ 2^n<\/span>\r\n\r\n<span class=\"o\">~<\/span><span class=\"mi\">4<\/span>    <span class=\"c1\">\/\/ Performs a bitwise not<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"o\">|<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">\/\/ Performs bitwise or<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"o\">&amp;<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">\/\/ Performs bitwise and<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"o\">^<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">\/\/ Performs bitwise xor<\/span>\r\n\r\n<span class=\"c1\">\/\/ Equivalent keywords are<\/span>\r\n<span class=\"n\">compl<\/span> <span class=\"mi\">4<\/span>    <span class=\"c1\">\/\/ Performs a bitwise not<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"n\">bitor<\/span> <span class=\"mi\">3<\/span>  <span class=\"c1\">\/\/ Performs bitwise or<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"n\">bitand<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">\/\/ Performs bitwise and<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"n\">xor<\/span> <span class=\"mi\">3<\/span>    <span class=\"c1\">\/\/ Performs bitwise xor<\/span>\r\n"
    },























    "python":{
        "0":"<span><\/span><span class=\"c1\"># Single line comments start with a number symbol.<\/span>\r\n\r\n<span class=\"sd\">&quot;&quot;&quot; Multiline strings can be written<\/span>\r\n<span class=\"sd\">    using three &quot;s, and are often used<\/span>\r\n<span class=\"sd\">    as comments<\/span>\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n\r\n<span class=\"c1\">####################################################<\/span>\r\n<span class=\"c1\"># 1. Primitive Datatypes and Operators<\/span>\r\n<span class=\"c1\">####################################################<\/span>\r\n\r\n<span class=\"c1\"># You have numbers<\/span>\r\n<span class=\"mi\">3<\/span>  <span class=\"c1\"># =&gt; 3<\/span>\r\n\r\n<span class=\"c1\"># Math is what you would expect<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span>  <span class=\"c1\"># =&gt; 2<\/span>\r\n<span class=\"mi\">8<\/span> <span class=\"o\">-<\/span> <span class=\"mi\">1<\/span>  <span class=\"c1\"># =&gt; 7<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span>  <span class=\"c1\"># =&gt; 20<\/span>\r\n<span class=\"mi\">35<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">5<\/span>  <span class=\"c1\"># =&gt; 7<\/span>\r\n\r\n<span class=\"c1\"># Division is a bit tricky. It is integer division and floors the results<\/span>\r\n<span class=\"c1\"># automatically.<\/span>\r\n<span class=\"mi\">5<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">2<\/span>  <span class=\"c1\"># =&gt; 2<\/span>\r\n\r\n<span class=\"c1\"># To fix division we need to learn about floats.<\/span>\r\n<span class=\"mf\">2.0<\/span>  <span class=\"c1\"># This is a float<\/span>\r\n<span class=\"mf\">11.0<\/span> <span class=\"o\">\/<\/span> <span class=\"mf\">4.0<\/span>  <span class=\"c1\"># =&gt; 2.75 ahhh...much better<\/span>\r\n\r\n<span class=\"c1\"># Result of integer division truncated down both for positive and negative.<\/span>\r\n<span class=\"mi\">5<\/span> <span class=\"o\">\/\/<\/span> <span class=\"mi\">3<\/span>  <span class=\"c1\"># =&gt; 1<\/span>\r\n<span class=\"mf\">5.0<\/span> <span class=\"o\">\/\/<\/span> <span class=\"mf\">3.0<\/span>  <span class=\"c1\"># =&gt; 1.0 # works on floats too<\/span>\r\n<span class=\"o\">-<\/span><span class=\"mi\">5<\/span> <span class=\"o\">\/\/<\/span> <span class=\"mi\">3<\/span>  <span class=\"c1\"># =&gt; -2<\/span>\r\n<span class=\"o\">-<\/span><span class=\"mf\">5.0<\/span> <span class=\"o\">\/\/<\/span> <span class=\"mf\">3.0<\/span>  <span class=\"c1\"># =&gt; -2.0<\/span>\r\n\r\n<span class=\"c1\"># Note that we can also import division module(Section 6 Modules)<\/span>\r\n<span class=\"c1\"># to carry out normal division with just one &#39;\/&#39;.<\/span>\r\n<span class=\"kn\">from<\/span> <span class=\"nn\">__future__<\/span> <span class=\"kn\">import<\/span> <span class=\"n\">division<\/span>\r\n\r\n<span class=\"mi\">11<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">4<\/span>  <span class=\"c1\"># =&gt; 2.75  ...normal division<\/span>\r\n<span class=\"mi\">11<\/span> <span class=\"o\">\/\/<\/span> <span class=\"mi\">4<\/span>  <span class=\"c1\"># =&gt; 2 ...floored division<\/span>\r\n\r\n<span class=\"c1\"># Modulo operation<\/span>\r\n<span class=\"mi\">7<\/span> <span class=\"o\">%<\/span> <span class=\"mi\">3<\/span>  <span class=\"c1\"># =&gt; 1<\/span>\r\n\r\n<span class=\"c1\"># Exponentiation (x to the yth power)<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">**<\/span> <span class=\"mi\">4<\/span>  <span class=\"c1\"># =&gt; 16<\/span>\r\n\r\n<span class=\"c1\"># Enforce precedence with parentheses<\/span>\r\n<span class=\"p\">(<\/span><span class=\"mi\">1<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">3<\/span><span class=\"p\">)<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span>  <span class=\"c1\"># =&gt; 8<\/span>\r\n\r\n<span class=\"c1\"># Boolean Operators<\/span>\r\n<span class=\"c1\"># Note &quot;and&quot; and &quot;or&quot; are case-sensitive<\/span>\r\n<span class=\"bp\">True<\/span> <span class=\"ow\">and<\/span> <span class=\"bp\">False<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n<span class=\"bp\">False<\/span> <span class=\"ow\">or<\/span> <span class=\"bp\">True<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># Note using Bool operators with ints<\/span>\r\n<span class=\"mi\">0<\/span> <span class=\"ow\">and<\/span> <span class=\"mi\">2<\/span>  <span class=\"c1\"># =&gt; 0<\/span>\r\n<span class=\"o\">-<\/span><span class=\"mi\">5<\/span> <span class=\"ow\">or<\/span> <span class=\"mi\">0<\/span>  <span class=\"c1\"># =&gt; -5<\/span>\r\n<span class=\"mi\">0<\/span> <span class=\"o\">==<\/span> <span class=\"bp\">False<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">==<\/span> <span class=\"bp\">True<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">==<\/span> <span class=\"bp\">True<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># negate with not<\/span>\r\n<span class=\"ow\">not<\/span> <span class=\"bp\">True<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n<span class=\"ow\">not<\/span> <span class=\"bp\">False<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># Equality is ==<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">1<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">1<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n\r\n<span class=\"c1\"># Inequality is !=<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">!=<\/span> <span class=\"mi\">1<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">!=<\/span> <span class=\"mi\">1<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># More comparisons<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">10<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">2<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"mi\">2<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># Comparisons can be chained!<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">2<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">3<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">3<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">2<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n\r\n<span class=\"c1\"># Strings are created with &quot; or &#39;<\/span>\r\n<span class=\"s2\">&quot;This is a string.&quot;<\/span>\r\n<span class=\"s1\">&#39;This is also a string.&#39;<\/span>\r\n\r\n<span class=\"c1\"># Strings can be added too!<\/span>\r\n<span class=\"s2\">&quot;Hello &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"s2\">&quot;world!&quot;<\/span>  <span class=\"c1\"># =&gt; &quot;Hello world!&quot;<\/span>\r\n<span class=\"c1\"># Strings can be added without using &#39;+&#39;<\/span>\r\n<span class=\"s2\">&quot;Hello &quot;<\/span> <span class=\"s2\">&quot;world!&quot;<\/span>  <span class=\"c1\"># =&gt; &quot;Hello world!&quot;<\/span>\r\n\r\n<span class=\"c1\"># ... or multiplied<\/span>\r\n<span class=\"s2\">&quot;Hello&quot;<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">3<\/span>  <span class=\"c1\"># =&gt; &quot;HelloHelloHello&quot;<\/span>\r\n\r\n<span class=\"c1\"># A string can be treated like a list of characters<\/span>\r\n<span class=\"s2\">&quot;This is a string&quot;<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; &#39;T&#39;<\/span>\r\n\r\n<span class=\"c1\"># You can find the length of a string<\/span>\r\n<span class=\"nb\">len<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;This is a string&quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 16<\/span>\r\n\r\n<span class=\"c1\"># String formatting with %<\/span>\r\n<span class=\"c1\"># Even though the % string operator will be deprecated on Python 3.1 and removed<\/span>\r\n<span class=\"c1\"># later at some time, it may still be good to know how it works.<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;apple&#39;<\/span>\r\n<span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;lemon&#39;<\/span>\r\n<span class=\"n\">z<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;The items in the basket are <\/span><span class=\"si\">%s<\/span><span class=\"s2\"> and <\/span><span class=\"si\">%s<\/span><span class=\"s2\">&quot;<\/span> <span class=\"o\">%<\/span> <span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">)<\/span>\r\n\r\n<span class=\"c1\"># A newer way to format strings is the format method.<\/span>\r\n<span class=\"c1\"># This method is the preferred way<\/span>\r\n<span class=\"s2\">&quot;{} is a {}&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">format<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;This&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;placeholder&quot;<\/span><span class=\"p\">)<\/span>\r\n<span class=\"s2\">&quot;{0} can be {1}&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">format<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;strings&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;formatted&quot;<\/span><span class=\"p\">)<\/span>\r\n<span class=\"c1\"># You can use keywords if you don&#39;t want to count.<\/span>\r\n<span class=\"s2\">&quot;{name} wants to eat {food}&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">format<\/span><span class=\"p\">(<\/span><span class=\"n\">name<\/span><span class=\"o\">=<\/span><span class=\"s2\">&quot;Bob&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">food<\/span><span class=\"o\">=<\/span><span class=\"s2\">&quot;lasagna&quot;<\/span><span class=\"p\">)<\/span>\r\n\r\n<span class=\"c1\"># None is an object<\/span>\r\n<span class=\"bp\">None<\/span>  <span class=\"c1\"># =&gt; None<\/span>\r\n\r\n<span class=\"c1\"># Don&#39;t use the equality &quot;==&quot; symbol to compare objects to None<\/span>\r\n<span class=\"c1\"># Use &quot;is&quot; instead<\/span>\r\n<span class=\"s2\">&quot;etc&quot;<\/span> <span class=\"ow\">is<\/span> <span class=\"bp\">None<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n<span class=\"bp\">None<\/span> <span class=\"ow\">is<\/span> <span class=\"bp\">None<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># The &#39;is&#39; operator tests for object identity. This isn&#39;t<\/span>\r\n<span class=\"c1\"># very useful when dealing with primitive values, but is<\/span>\r\n<span class=\"c1\"># very useful when dealing with objects.<\/span>\r\n\r\n<span class=\"c1\"># Any object can be used in a Boolean context.<\/span>\r\n<span class=\"c1\"># The following values are considered falsey:<\/span>\r\n<span class=\"c1\">#    - None<\/span>\r\n<span class=\"c1\">#    - zero of any numeric type (e.g., 0, 0L, 0.0, 0j)<\/span>\r\n<span class=\"c1\">#    - empty sequences (e.g., &#39;&#39;, (), [])<\/span>\r\n<span class=\"c1\">#    - empty containers (e.g., {}, set())<\/span>\r\n<span class=\"c1\">#    - instances of user-defined classes meeting certain conditions<\/span>\r\n<span class=\"c1\">#      see: https:\/\/docs.python.org\/2\/reference\/datamodel.html#object.__nonzero__<\/span>\r\n<span class=\"c1\">#<\/span>\r\n<span class=\"c1\"># All other values are truthy (using the bool() function on them returns True).<\/span>\r\n<span class=\"nb\">bool<\/span><span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n<span class=\"nb\">bool<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;&quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n\r\n\r\n<span class=\"c1\">####################################################<\/span>\r\n<span class=\"c1\"># 2. Variables and Collections<\/span>\r\n<span class=\"c1\">####################################################<\/span>\r\n\r\n<span class=\"c1\"># Python has a print statement<\/span>\r\n<span class=\"k\">print<\/span> <span class=\"s2\">&quot;I&#39;m Python. Nice to meet you!&quot;<\/span>  <span class=\"c1\"># =&gt; I&#39;m Python. Nice to meet you!<\/span>\r\n\r\n<span class=\"c1\"># Simple way to get input data from console<\/span>\r\n<span class=\"n\">input_string_var<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">raw_input<\/span><span class=\"p\">(<\/span>\r\n    <span class=\"s2\">&quot;Enter some data: &quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># Returns the data as a string<\/span>\r\n<span class=\"n\">input_var<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">input<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;Enter some data: &quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># Evaluates the data as python code<\/span>\r\n<span class=\"c1\"># Warning: Caution is recommended for input() method usage<\/span>\r\n<span class=\"c1\"># Note: In python 3, input() is deprecated and raw_input() is renamed to input()<\/span>\r\n\r\n<span class=\"c1\"># No need to declare variables before assigning to them.<\/span>\r\n<span class=\"n\">some_var<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span>  <span class=\"c1\"># Convention is to use lower_case_with_underscores<\/span>\r\n<span class=\"n\">some_var<\/span>  <span class=\"c1\"># =&gt; 5<\/span>\r\n\r\n<span class=\"c1\"># Accessing a previously unassigned variable is an exception.<\/span>\r\n<span class=\"c1\"># See Control Flow to learn more about exception handling.<\/span>\r\n<span class=\"n\">some_other_var<\/span>  <span class=\"c1\"># Raises a name error<\/span>\r\n\r\n<span class=\"c1\"># if can be used as an expression<\/span>\r\n<span class=\"c1\"># Equivalent of C&#39;s &#39;?:&#39; ternary operator<\/span>\r\n<span class=\"s2\">&quot;yahoo!&quot;<\/span> <span class=\"k\">if<\/span> <span class=\"mi\">3<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">2<\/span> <span class=\"k\">else<\/span> <span class=\"mi\">2<\/span>  <span class=\"c1\"># =&gt; &quot;yahoo!&quot;<\/span>\r\n\r\n<span class=\"c1\"># Lists store sequences<\/span>\r\n<span class=\"n\">li<\/span> <span class=\"o\">=<\/span> <span class=\"p\">[]<\/span>\r\n<span class=\"c1\"># You can start with a prefilled list<\/span>\r\n<span class=\"n\">other_li<\/span> <span class=\"o\">=<\/span> <span class=\"p\">[<\/span><span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">]<\/span>\r\n\r\n<span class=\"c1\"># Add stuff to the end of a list with append<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">append<\/span><span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># li is now [1]<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">append<\/span><span class=\"p\">(<\/span><span class=\"mi\">2<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># li is now [1, 2]<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">append<\/span><span class=\"p\">(<\/span><span class=\"mi\">4<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># li is now [1, 2, 4]<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">append<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># li is now [1, 2, 4, 3]<\/span>\r\n<span class=\"c1\"># Remove from the end with pop<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">pop<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># =&gt; 3 and li is now [1, 2, 4]<\/span>\r\n<span class=\"c1\"># Let&#39;s put it back<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">append<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># li is now [1, 2, 4, 3] again.<\/span>\r\n\r\n<span class=\"c1\"># Access a list like you would any array<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; 1<\/span>\r\n<span class=\"c1\"># Assign new values to indexes that have already been initialized with =<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">42<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; 42<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span>  <span class=\"c1\"># Note: setting it back to the original value<\/span>\r\n<span class=\"c1\"># Look at the last element<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"o\">-<\/span><span class=\"mi\">1<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; 3<\/span>\r\n\r\n<span class=\"c1\"># Looking out of bounds is an IndexError<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"mi\">4<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># Raises an IndexError<\/span>\r\n\r\n<span class=\"c1\"># You can look at ranges with slice syntax.<\/span>\r\n<span class=\"c1\"># (It&#39;s a closed\/open range for you mathy types.)<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">:<\/span><span class=\"mi\">3<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; [2, 4]<\/span>\r\n<span class=\"c1\"># Omit the beginning<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"mi\">2<\/span><span class=\"p\">:]<\/span>  <span class=\"c1\"># =&gt; [4, 3]<\/span>\r\n<span class=\"c1\"># Omit the end<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[:<\/span><span class=\"mi\">3<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; [1, 2, 4]<\/span>\r\n<span class=\"c1\"># Select every second entry<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[::<\/span><span class=\"mi\">2<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt;[1, 4]<\/span>\r\n<span class=\"c1\"># Reverse a copy of the list<\/span>\r\n<span class=\"n\">li<\/span><span class=\"p\">[::<\/span><span class=\"o\">-<\/span><span class=\"mi\">1<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; [3, 4, 2, 1]<\/span>\r\n<span class=\"c1\"># Use any combination of these to make advanced slices<\/span>\r\n<span class=\"c1\"># li[start:end:step]<\/span>\r\n\r\n<span class=\"c1\"># Remove arbitrary elements from a list with &quot;del&quot;<\/span>\r\n<span class=\"k\">del<\/span> <span class=\"n\">li<\/span><span class=\"p\">[<\/span><span class=\"mi\">2<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># li is now [1, 2, 3]<\/span>\r\n\r\n<span class=\"c1\"># You can add lists<\/span>\r\n<span class=\"n\">li<\/span> <span class=\"o\">+<\/span> <span class=\"n\">other_li<\/span>  <span class=\"c1\"># =&gt; [1, 2, 3, 4, 5, 6]<\/span>\r\n<span class=\"c1\"># Note: values for li and for other_li are not modified.<\/span>\r\n\r\n<span class=\"c1\"># Concatenate lists with &quot;extend()&quot;<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">extend<\/span><span class=\"p\">(<\/span><span class=\"n\">other_li<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># Now li is [1, 2, 3, 4, 5, 6]<\/span>\r\n\r\n<span class=\"c1\"># Remove first occurrence of a value<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">remove<\/span><span class=\"p\">(<\/span><span class=\"mi\">2<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># li is now [1, 3, 4, 5, 6]<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">remove<\/span><span class=\"p\">(<\/span><span class=\"mi\">2<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># Raises a ValueError as 2 is not in the list<\/span>\r\n\r\n<span class=\"c1\"># Insert an element at a specific index<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">insert<\/span><span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># li is now [1, 2, 3, 4, 5, 6] again<\/span>\r\n\r\n",




        "1":"<span class=\"c1\"># Get the index of the first item found<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">index<\/span><span class=\"p\">(<\/span><span class=\"mi\">2<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 1<\/span>\r\n<span class=\"n\">li<\/span><span class=\"o\">.<\/span><span class=\"n\">index<\/span><span class=\"p\">(<\/span><span class=\"mi\">7<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># Raises a ValueError as 7 is not in the list<\/span>\r\n\r\n<span class=\"c1\"># Check for existence in a list with &quot;in&quot;<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">li<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># Examine the length with &quot;len()&quot;<\/span>\r\n<span class=\"nb\">len<\/span><span class=\"p\">(<\/span><span class=\"n\">li<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 6<\/span>\r\n\r\n<span class=\"c1\"># Tuples are like lists but are immutable.<\/span>\r\n<span class=\"n\">tup<\/span> <span class=\"o\">=<\/span> <span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">)<\/span>\r\n<span class=\"n\">tup<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; 1<\/span>\r\n<span class=\"n\">tup<\/span><span class=\"p\">[<\/span><span class=\"mi\">0<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">3<\/span>  <span class=\"c1\"># Raises a TypeError<\/span>\r\n\r\n<span class=\"c1\"># You can do all those list thingies on tuples too<\/span>\r\n<span class=\"nb\">len<\/span><span class=\"p\">(<\/span><span class=\"n\">tup<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 3<\/span>\r\n<span class=\"n\">tup<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; (1, 2, 3, 4, 5, 6)<\/span>\r\n<span class=\"n\">tup<\/span><span class=\"p\">[:<\/span><span class=\"mi\">2<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; (1, 2)<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">tup<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># You can unpack tuples (or lists) into variables<\/span>\r\n<span class=\"n\">a<\/span><span class=\"p\">,<\/span> <span class=\"n\">b<\/span><span class=\"p\">,<\/span> <span class=\"n\">c<\/span> <span class=\"o\">=<\/span> <span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># a is now 1, b is now 2 and c is now 3<\/span>\r\n<span class=\"n\">d<\/span><span class=\"p\">,<\/span> <span class=\"n\">e<\/span><span class=\"p\">,<\/span> <span class=\"n\">f<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span>  <span class=\"c1\"># you can leave out the parentheses<\/span>\r\n<span class=\"c1\"># Tuples are created by default if you leave out the parentheses<\/span>\r\n<span class=\"n\">g<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span>  <span class=\"c1\"># =&gt; (4, 5, 6)<\/span>\r\n<span class=\"c1\"># Now look how easy it is to swap two values<\/span>\r\n<span class=\"n\">e<\/span><span class=\"p\">,<\/span> <span class=\"n\">d<\/span> <span class=\"o\">=<\/span> <span class=\"n\">d<\/span><span class=\"p\">,<\/span> <span class=\"n\">e<\/span>  <span class=\"c1\"># d is now 5 and e is now 4<\/span>\r\n\r\n<span class=\"c1\"># Dictionaries store mappings<\/span>\r\n<span class=\"n\">empty_dict<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{}<\/span>\r\n<span class=\"c1\"># Here is a prefilled dictionary<\/span>\r\n<span class=\"n\">filled_dict<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"s2\">&quot;one&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;two&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;three&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">3<\/span><span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\"># Look up values with []<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"p\">[<\/span><span class=\"s2\">&quot;one&quot;<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; 1<\/span>\r\n\r\n<span class=\"c1\"># Get all keys as a list with &quot;keys()&quot;<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">keys<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># =&gt; [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]<\/span>\r\n<span class=\"c1\"># Note - Dictionary key ordering is not guaranteed.<\/span>\r\n<span class=\"c1\"># Your results might not match this exactly.<\/span>\r\n\r\n<span class=\"c1\"># Get all values as a list with &quot;values()&quot;<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">values<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># =&gt; [3, 2, 1]<\/span>\r\n<span class=\"c1\"># Note - Same as above regarding key ordering.<\/span>\r\n\r\n<span class=\"c1\"># Get all key-value pairs as a list of tuples with &quot;items()&quot;<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">items<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># =&gt; [(&quot;one&quot;, 1), (&quot;two&quot;, 2), (&quot;three&quot;, 3)]<\/span>\r\n\r\n<span class=\"c1\"># Check for existence of keys in a dictionary with &quot;in&quot;<\/span>\r\n<span class=\"s2\">&quot;one&quot;<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">filled_dict<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">filled_dict<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n\r\n<span class=\"c1\"># Looking up a non-existing key is a KeyError<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"p\">[<\/span><span class=\"s2\">&quot;four&quot;<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># KeyError<\/span>\r\n\r\n<span class=\"c1\"># Use &quot;get()&quot; method to avoid the KeyError<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">get<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;one&quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 1<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">get<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;four&quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; None<\/span>\r\n<span class=\"c1\"># The get method supports a default argument when the value is missing<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">get<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;one&quot;<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 1<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">get<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;four&quot;<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 4<\/span>\r\n<span class=\"c1\"># note that filled_dict.get(&quot;four&quot;) is still =&gt; None<\/span>\r\n<span class=\"c1\"># (get doesn&#39;t set the value in the dictionary)<\/span>\r\n\r\n<span class=\"c1\"># set the value of a key with a syntax similar to lists<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"p\">[<\/span><span class=\"s2\">&quot;four&quot;<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">4<\/span>  <span class=\"c1\"># now, filled_dict[&quot;four&quot;] =&gt; 4<\/span>\r\n\r\n<span class=\"c1\"># &quot;setdefault()&quot; inserts into a dictionary only if the given key isn&#39;t present<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">setdefault<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;five&quot;<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># filled_dict[&quot;five&quot;] is set to 5<\/span>\r\n<span class=\"n\">filled_dict<\/span><span class=\"o\">.<\/span><span class=\"n\">setdefault<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;five&quot;<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># filled_dict[&quot;five&quot;] is still 5<\/span>\r\n\r\n<span class=\"c1\"># You can declare sets (which are like unordered lists that cannot contain<\/span>\r\n<span class=\"c1\"># duplicate values) using the set object.<\/span>\r\n<span class=\"n\">empty_set<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">set<\/span><span class=\"p\">()<\/span>\r\n<span class=\"c1\"># Initialize a &quot;set()&quot; with a bunch of values<\/span>\r\n<span class=\"n\">some_set<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">set<\/span><span class=\"p\">([<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">])<\/span>  <span class=\"c1\"># some_set is now set([1, 2, 3, 4])<\/span>\r\n\r\n<span class=\"c1\"># order is not guaranteed, even though it may sometimes look sorted<\/span>\r\n<span class=\"n\">another_set<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">set<\/span><span class=\"p\">([<\/span><span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">1<\/span><span class=\"p\">])<\/span>  <span class=\"c1\"># another_set is now set([1, 2, 3, 4])<\/span>\r\n\r\n<span class=\"c1\"># Since Python 2.7, {} can be used to declare a set<\/span>\r\n<span class=\"n\">filled_set<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">}<\/span>  <span class=\"c1\"># =&gt; {1, 2, 3, 4}<\/span>\r\n\r\n<span class=\"c1\"># Add more items to a set<\/span>\r\n<span class=\"n\">filled_set<\/span><span class=\"o\">.<\/span><span class=\"n\">add<\/span><span class=\"p\">(<\/span><span class=\"mi\">5<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># filled_set is now {1, 2, 3, 4, 5}<\/span>\r\n\r\n<span class=\"c1\"># Do set intersection with &amp;<\/span>\r\n<span class=\"n\">other_set<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">}<\/span>\r\n<span class=\"n\">filled_set<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">other_set<\/span>  <span class=\"c1\"># =&gt; {3, 4, 5}<\/span>\r\n\r\n<span class=\"c1\"># Do set union with |<\/span>\r\n<span class=\"n\">filled_set<\/span> <span class=\"o\">|<\/span> <span class=\"n\">other_set<\/span>  <span class=\"c1\"># =&gt; {1, 2, 3, 4, 5, 6}<\/span>\r\n\r\n<span class=\"c1\"># Do set difference with -<\/span>\r\n<span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">}<\/span> <span class=\"o\">-<\/span> <span class=\"p\">{<\/span><span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">}<\/span>  <span class=\"c1\"># =&gt; {1, 4}<\/span>\r\n\r\n<span class=\"c1\"># Do set symmetric difference with ^<\/span>\r\n<span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">}<\/span> <span class=\"o\">^<\/span> <span class=\"p\">{<\/span><span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">}<\/span>  <span class=\"c1\"># =&gt; {1, 4, 5}<\/span>\r\n\r\n<span class=\"c1\"># Check if set on the left is a superset of set on the right<\/span>\r\n<span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">}<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">}<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n\r\n<span class=\"c1\"># Check if set on the left is a subset of set on the right<\/span>\r\n<span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">}<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">}<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># Check for existence in a set with in<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">filled_set<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">filled_set<\/span>  <span class=\"c1\"># =&gt; False<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"ow\">not<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">filled_set<\/span> <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># Check data type of variable<\/span>\r\n<span class=\"nb\">type<\/span><span class=\"p\">(<\/span><span class=\"n\">li<\/span><span class=\"p\">)<\/span>   <span class=\"c1\"># =&gt; list<\/span>\r\n<span class=\"nb\">type<\/span><span class=\"p\">(<\/span><span class=\"n\">filled_dict<\/span><span class=\"p\">)<\/span>   <span class=\"c1\"># =&gt; dict<\/span>\r\n<span class=\"nb\">type<\/span><span class=\"p\">(<\/span><span class=\"mi\">5<\/span><span class=\"p\">)<\/span>   <span class=\"c1\"># =&gt; int<\/span>\r\n\r\n\r\n<span class=\"c1\">####################################################<\/span>\r\n<span class=\"c1\">#  3. Control Flow<\/span>\r\n<span class=\"c1\">####################################################<\/span>\r\n\r\n<span class=\"c1\"># Let&#39;s just make a variable<\/span>\r\n<span class=\"n\">some_var<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span>\r\n\r\n<span class=\"c1\"># Here is an if statement. Indentation is significant in python!<\/span>\r\n<span class=\"c1\"># prints &quot;some_var is smaller than 10&quot;<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"n\">some_var<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"s2\">&quot;some_var is totally bigger than 10.&quot;<\/span>\r\n<span class=\"k\">elif<\/span> <span class=\"n\">some_var<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">:<\/span>  <span class=\"c1\"># This elif clause is optional.<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"s2\">&quot;some_var is smaller than 10.&quot;<\/span>\r\n<span class=\"k\">else<\/span><span class=\"p\">:<\/span>  <span class=\"c1\"># This is optional too.<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"s2\">&quot;some_var is indeed 10.&quot;<\/span>\r\n\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"sd\">For loops iterate over lists<\/span>\r\n<span class=\"sd\">prints:<\/span>\r\n<span class=\"sd\">    dog is a mammal<\/span>\r\n<span class=\"sd\">    cat is a mammal<\/span>\r\n<span class=\"sd\">    mouse is a mammal<\/span>\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"n\">animal<\/span> <span class=\"ow\">in<\/span> <span class=\"p\">[<\/span><span class=\"s2\">&quot;dog&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;cat&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;mouse&quot;<\/span><span class=\"p\">]:<\/span>\r\n    <span class=\"c1\"># You can use {0} to interpolate formatted strings. (See above.)<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"s2\">&quot;{0} is a mammal&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">format<\/span><span class=\"p\">(<\/span><span class=\"n\">animal<\/span><span class=\"p\">)<\/span>\r\n\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"sd\">&quot;range(number)&quot; returns a list of numbers<\/span>\r\n<span class=\"sd\">from zero to the given number<\/span>\r\n<span class=\"sd\">prints:<\/span>\r\n<span class=\"sd\">    0<\/span>\r\n<span class=\"sd\">    1<\/span>\r\n<span class=\"sd\">    2<\/span>\r\n<span class=\"sd\">    3<\/span>\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"n\">i<\/span> <span class=\"ow\">in<\/span> <span class=\"nb\">range<\/span><span class=\"p\">(<\/span><span class=\"mi\">4<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">i<\/span>\r\n\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"sd\">&quot;range(lower, upper)&quot; returns a list of numbers<\/span>\r\n<span class=\"sd\">from the lower number to the upper number<\/span>\r\n<span class=\"sd\">prints:<\/span>\r\n<span class=\"sd\">    4<\/span>\r\n<span class=\"sd\">    5<\/span>\r\n",


        "2":"<span class=\"sd\">    6<\/span>\r\n<span class=\"sd\">    7<\/span>\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"n\">i<\/span> <span class=\"ow\">in<\/span> <span class=\"nb\">range<\/span><span class=\"p\">(<\/span><span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">8<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">i<\/span>\r\n\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"sd\">While loops go until a condition is no longer met.<\/span>\r\n<span class=\"sd\">prints:<\/span>\r\n<span class=\"sd\">    0<\/span>\r\n<span class=\"sd\">    1<\/span>\r\n<span class=\"sd\">    2<\/span>\r\n<span class=\"sd\">    3<\/span>\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span>\r\n<span class=\"k\">while<\/span> <span class=\"n\">x<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">4<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">x<\/span>\r\n    <span class=\"n\">x<\/span> <span class=\"o\">+=<\/span> <span class=\"mi\">1<\/span>  <span class=\"c1\"># Shorthand for x = x + 1<\/span>\r\n\r\n<span class=\"c1\"># Handle exceptions with a try\/except block<\/span>\r\n\r\n<span class=\"c1\"># Works on Python 2.6 and up:<\/span>\r\n<span class=\"k\">try<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"c1\"># Use &quot;raise&quot; to raise an error<\/span>\r\n    <span class=\"k\">raise<\/span> <span class=\"ne\">IndexError<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;This is an index error&quot;<\/span><span class=\"p\">)<\/span>\r\n<span class=\"k\">except<\/span> <span class=\"ne\">IndexError<\/span> <span class=\"k\">as<\/span> <span class=\"n\">e<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"k\">pass<\/span>  <span class=\"c1\"># Pass is just a no-op. Usually you would do recovery here.<\/span>\r\n<span class=\"k\">except<\/span> <span class=\"p\">(<\/span><span class=\"ne\">TypeError<\/span><span class=\"p\">,<\/span> <span class=\"ne\">NameError<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">pass<\/span>  <span class=\"c1\"># Multiple exceptions can be handled together, if required.<\/span>\r\n<span class=\"k\">else<\/span><span class=\"p\">:<\/span>  <span class=\"c1\"># Optional clause to the try\/except block. Must follow all except blocks<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"s2\">&quot;All good!&quot;<\/span>  <span class=\"c1\"># Runs only if the code in try raises no exceptions<\/span>\r\n<span class=\"k\">finally<\/span><span class=\"p\">:<\/span>  <span class=\"c1\"># Execute under all circumstances<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"s2\">&quot;We can clean up resources here&quot;<\/span>\r\n\r\n<span class=\"c1\"># Instead of try\/finally to cleanup resources you can use a with statement<\/span>\r\n<span class=\"k\">with<\/span> <span class=\"nb\">open<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;myfile.txt&quot;<\/span><span class=\"p\">)<\/span> <span class=\"k\">as<\/span> <span class=\"n\">f<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"n\">line<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">f<\/span><span class=\"p\">:<\/span>\r\n        <span class=\"k\">print<\/span> <span class=\"n\">line<\/span>\r\n\r\n\r\n<span class=\"c1\">####################################################<\/span>\r\n<span class=\"c1\"># 4. Functions<\/span>\r\n<span class=\"c1\">####################################################<\/span>\r\n\r\n<span class=\"c1\"># Use &quot;def&quot; to create new functions<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">add<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"s2\">&quot;x is {0} and y is {1}&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">format<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"n\">x<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y<\/span>  <span class=\"c1\"># Return values with a return statement<\/span>\r\n\r\n\r\n<span class=\"c1\"># Calling functions with parameters<\/span>\r\n<span class=\"n\">add<\/span><span class=\"p\">(<\/span><span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; prints out &quot;x is 5 and y is 6&quot; and returns 11<\/span>\r\n\r\n<span class=\"c1\"># Another way to call functions is with keyword arguments<\/span>\r\n<span class=\"n\">add<\/span><span class=\"p\">(<\/span><span class=\"n\">y<\/span><span class=\"o\">=<\/span><span class=\"mi\">6<\/span><span class=\"p\">,<\/span> <span class=\"n\">x<\/span><span class=\"o\">=<\/span><span class=\"mi\">5<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># Keyword arguments can arrive in any order.<\/span>\r\n\r\n\r\n<span class=\"c1\"># You can define functions that take a variable number of<\/span>\r\n<span class=\"c1\"># positional args, which will be interpreted as a tuple by using *<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">varargs<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"n\">args<\/span>\r\n\r\n\r\n<span class=\"n\">varargs<\/span><span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; (1, 2, 3)<\/span>\r\n\r\n\r\n<span class=\"c1\"># You can define functions that take a variable number of<\/span>\r\n<span class=\"c1\"># keyword args, as well, which will be interpreted as a dict by using **<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">keyword_args<\/span><span class=\"p\">(<\/span><span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"n\">kwargs<\/span>\r\n\r\n\r\n<span class=\"c1\"># Let&#39;s call it to see what happens<\/span>\r\n<span class=\"n\">keyword_args<\/span><span class=\"p\">(<\/span><span class=\"n\">big<\/span><span class=\"o\">=<\/span><span class=\"s2\">&quot;foot&quot;<\/span><span class=\"p\">,<\/span> <span class=\"n\">loch<\/span><span class=\"o\">=<\/span><span class=\"s2\">&quot;ness&quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; {&quot;big&quot;: &quot;foot&quot;, &quot;loch&quot;: &quot;ness&quot;}<\/span>\r\n\r\n\r\n<span class=\"c1\"># You can do both at once, if you like<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">all_the_args<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">,<\/span> <span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">args<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">kwargs<\/span>\r\n\r\n\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n<span class=\"sd\">all_the_args(1, 2, a=3, b=4) prints:<\/span>\r\n<span class=\"sd\">    (1, 2)<\/span>\r\n<span class=\"sd\">    {&quot;a&quot;: 3, &quot;b&quot;: 4}<\/span>\r\n<span class=\"sd\">&quot;&quot;&quot;<\/span>\r\n\r\n<span class=\"c1\"># When calling functions, you can do the opposite of args\/kwargs!<\/span>\r\n<span class=\"c1\"># Use * to expand positional args and use ** to expand keyword args.<\/span>\r\n<span class=\"n\">args<\/span> <span class=\"o\">=<\/span> <span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">)<\/span>\r\n<span class=\"n\">kwargs<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"s2\">&quot;a&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;b&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">4<\/span><span class=\"p\">}<\/span>\r\n<span class=\"n\">all_the_args<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># equivalent to all_the_args(1, 2, 3, 4)<\/span>\r\n<span class=\"n\">all_the_args<\/span><span class=\"p\">(<\/span><span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># equivalent to all_the_args(a=3, b=4)<\/span>\r\n<span class=\"n\">all_the_args<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">,<\/span> <span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)<\/span>\r\n\r\n\r\n<span class=\"c1\"># you can pass args and kwargs along to other functions that take args\/kwargs<\/span>\r\n<span class=\"c1\"># by expanding them with * and ** respectively<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">pass_all_the_args<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">,<\/span> <span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"n\">all_the_args<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">,<\/span> <span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">varargs<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">keyword_args<\/span><span class=\"p\">(<\/span><span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">)<\/span>\r\n\r\n\r\n<span class=\"c1\"># Function Scope<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span>\r\n\r\n\r\n<span class=\"k\">def<\/span> <span class=\"nf\">set_x<\/span><span class=\"p\">(<\/span><span class=\"n\">num<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"c1\"># Local var x not the same as global variable x<\/span>\r\n    <span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">num<\/span>  <span class=\"c1\"># =&gt; 43<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">x<\/span>  <span class=\"c1\"># =&gt; 43<\/span>\r\n\r\n\r\n<span class=\"k\">def<\/span> <span class=\"nf\">set_global_x<\/span><span class=\"p\">(<\/span><span class=\"n\">num<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">global<\/span> <span class=\"n\">x<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">x<\/span>  <span class=\"c1\"># =&gt; 5<\/span>\r\n    <span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">num<\/span>  <span class=\"c1\"># global var x is now set to 6<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">x<\/span>  <span class=\"c1\"># =&gt; 6<\/span>\r\n\r\n\r\n<span class=\"n\">set_x<\/span><span class=\"p\">(<\/span><span class=\"mi\">43<\/span><span class=\"p\">)<\/span>\r\n<span class=\"n\">set_global_x<\/span><span class=\"p\">(<\/span><span class=\"mi\">6<\/span><span class=\"p\">)<\/span>\r\n\r\n\r\n<span class=\"c1\"># Python has first class functions<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">create_adder<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">adder<\/span><span class=\"p\">(<\/span><span class=\"n\">y<\/span><span class=\"p\">):<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"n\">x<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y<\/span>\r\n\r\n    <span class=\"k\">return<\/span> <span class=\"n\">adder<\/span>\r\n\r\n\r\n<span class=\"n\">add_10<\/span> <span class=\"o\">=<\/span> <span class=\"n\">create_adder<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">)<\/span>\r\n<span class=\"n\">add_10<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 13<\/span>\r\n\r\n<span class=\"c1\"># There are also anonymous functions<\/span>\r\n<span class=\"p\">(<\/span><span class=\"k\">lambda<\/span> <span class=\"n\">x<\/span><span class=\"p\">:<\/span> <span class=\"n\">x<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">2<\/span><span class=\"p\">)(<\/span><span class=\"mi\">3<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"p\">(<\/span><span class=\"k\">lambda<\/span> <span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">:<\/span> <span class=\"n\">x<\/span> <span class=\"o\">**<\/span> <span class=\"mi\">2<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y<\/span> <span class=\"o\">**<\/span> <span class=\"mi\">2<\/span><span class=\"p\">)(<\/span><span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">1<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 5<\/span>\r\n\r\n<span class=\"c1\"># There are built-in higher order functions<\/span>\r\n<span class=\"nb\">map<\/span><span class=\"p\">(<\/span><span class=\"n\">add_10<\/span><span class=\"p\">,<\/span> <span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">])<\/span>  <span class=\"c1\"># =&gt; [11, 12, 13]<\/span>\r\n<span class=\"nb\">map<\/span><span class=\"p\">(<\/span><span class=\"nb\">max<\/span><span class=\"p\">,<\/span> <span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">],<\/span> <span class=\"p\">[<\/span><span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">1<\/span><span class=\"p\">])<\/span>  <span class=\"c1\"># =&gt; [4, 2, 3]<\/span>\r\n\r\n<span class=\"nb\">filter<\/span><span class=\"p\">(<\/span><span class=\"k\">lambda<\/span> <span class=\"n\">x<\/span><span class=\"p\">:<\/span> <span class=\"n\">x<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"p\">[<\/span><span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">,<\/span> <span class=\"mi\">7<\/span><span class=\"p\">])<\/span>  <span class=\"c1\"># =&gt; [6, 7]<\/span>\r\n\r\n<span class=\"c1\"># We can use list comprehensions for nice maps and filters<\/span>\r\n<span class=\"p\">[<\/span><span class=\"n\">add_10<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span><span class=\"p\">)<\/span> <span class=\"k\">for<\/span> <span class=\"n\">i<\/span> <span class=\"ow\">in<\/span> <span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">]]<\/span>  <span class=\"c1\"># =&gt; [11, 12, 13]<\/span>\r\n<span class=\"p\">[<\/span><span class=\"n\">x<\/span> <span class=\"k\">for<\/span> <span class=\"n\">x<\/span> <span class=\"ow\">in<\/span> <span class=\"p\">[<\/span><span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">,<\/span> <span class=\"mi\">7<\/span><span class=\"p\">]<\/span> <span class=\"k\">if<\/span> <span class=\"n\">x<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">5<\/span><span class=\"p\">]<\/span>  <span class=\"c1\"># =&gt; [6, 7]<\/span>\r\n\r\n<span class=\"c1\"># You can construct set and dict comprehensions as well.<\/span>\r\n<span class=\"p\">{<\/span><span class=\"n\">x<\/span> <span class=\"k\">for<\/span> <span class=\"n\">x<\/span> <span class=\"ow\">in<\/span> <span class=\"s1\">&#39;abcddeef&#39;<\/span> <span class=\"k\">if<\/span> <span class=\"n\">x<\/span> <span class=\"ow\">in<\/span> <span class=\"s1\">&#39;abc&#39;<\/span><span class=\"p\">}<\/span>  <span class=\"c1\"># =&gt; {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;}<\/span>\r\n<span class=\"p\">{<\/span><span class=\"n\">x<\/span><span class=\"p\">:<\/span> <span class=\"n\">x<\/span> <span class=\"o\">**<\/span> <span class=\"mi\">2<\/span> <span class=\"k\">for<\/span> <span class=\"n\">x<\/span> <span class=\"ow\">in<\/span> <span class=\"nb\">range<\/span><span class=\"p\">(<\/span><span class=\"mi\">5<\/span><span class=\"p\">)}<\/span>  <span class=\"c1\"># =&gt; {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}<\/span>\r\n\r\n\r\n<span class=\"c1\">####################################################<\/span>\r\n<span class=\"c1\"># 5. Classes<\/span>\r\n<span class=\"c1\">####################################################<\/span>\r\n\r\n<span class=\"c1\"># We subclass from object to get a class.<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Human<\/span><span class=\"p\">(<\/span><span class=\"nb\">object<\/span><span class=\"p\">):<\/span>\r\n",




        "3":"<span class=\"c1\"># A class attribute. It is shared by all instances of this class<\/span>\r\n    <span class=\"n\">species<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;H. sapiens&quot;<\/span>\r\n\r\n    <span class=\"c1\"># Basic initializer, this is called when this class is instantiated.<\/span>\r\n    <span class=\"c1\"># Note that the double leading and trailing underscores denote objects<\/span>\r\n    <span class=\"c1\"># or attributes that are used by python but that live in user-controlled<\/span>\r\n    <span class=\"c1\"># namespaces. You should not invent such names on your own.<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"fm\">__init__<\/span><span class=\"p\">(<\/span><span class=\"bp\">self<\/span><span class=\"p\">,<\/span> <span class=\"n\">name<\/span><span class=\"p\">):<\/span>\r\n        <span class=\"c1\"># Assign the argument to the instance&#39;s name attribute<\/span>\r\n        <span class=\"bp\">self<\/span><span class=\"o\">.<\/span><span class=\"n\">name<\/span> <span class=\"o\">=<\/span> <span class=\"n\">name<\/span>\r\n\r\n        <span class=\"c1\"># Initialize property<\/span>\r\n        <span class=\"bp\">self<\/span><span class=\"o\">.<\/span><span class=\"n\">age<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span>\r\n\r\n    <span class=\"c1\"># An instance method. All methods take &quot;self&quot; as the first argument<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">say<\/span><span class=\"p\">(<\/span><span class=\"bp\">self<\/span><span class=\"p\">,<\/span> <span class=\"n\">msg<\/span><span class=\"p\">):<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"s2\">&quot;{0}: {1}&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">format<\/span><span class=\"p\">(<\/span><span class=\"bp\">self<\/span><span class=\"o\">.<\/span><span class=\"n\">name<\/span><span class=\"p\">,<\/span> <span class=\"n\">msg<\/span><span class=\"p\">)<\/span>\r\n\r\n    <span class=\"c1\"># A class method is shared among all instances<\/span>\r\n    <span class=\"c1\"># They are called with the calling class as the first argument<\/span>\r\n    <span class=\"nd\">@classmethod<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">get_species<\/span><span class=\"p\">(<\/span><span class=\"bp\">cls<\/span><span class=\"p\">):<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"bp\">cls<\/span><span class=\"o\">.<\/span><span class=\"n\">species<\/span>\r\n\r\n    <span class=\"c1\"># A static method is called without a class or instance reference<\/span>\r\n    <span class=\"nd\">@staticmethod<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">grunt<\/span><span class=\"p\">():<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"s2\">&quot;*grunt*&quot;<\/span>\r\n\r\n    <span class=\"c1\"># A property is just like a getter.<\/span>\r\n    <span class=\"c1\"># It turns the method age() into an read-only attribute<\/span>\r\n    <span class=\"c1\"># of the same name.<\/span>\r\n    <span class=\"nd\">@property<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">age<\/span><span class=\"p\">(<\/span><span class=\"bp\">self<\/span><span class=\"p\">):<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"bp\">self<\/span><span class=\"o\">.<\/span><span class=\"n\">_age<\/span>\r\n\r\n    <span class=\"c1\"># This allows the property to be set<\/span>\r\n    <span class=\"nd\">@age.setter<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">age<\/span><span class=\"p\">(<\/span><span class=\"bp\">self<\/span><span class=\"p\">,<\/span> <span class=\"n\">age<\/span><span class=\"p\">):<\/span>\r\n        <span class=\"bp\">self<\/span><span class=\"o\">.<\/span><span class=\"n\">_age<\/span> <span class=\"o\">=<\/span> <span class=\"n\">age<\/span>\r\n\r\n    <span class=\"c1\"># This allows the property to be deleted<\/span>\r\n    <span class=\"nd\">@age.deleter<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">age<\/span><span class=\"p\">(<\/span><span class=\"bp\">self<\/span><span class=\"p\">):<\/span>\r\n        <span class=\"k\">del<\/span> <span class=\"bp\">self<\/span><span class=\"o\">.<\/span><span class=\"n\">_age<\/span>\r\n\r\n\r\n<span class=\"c1\"># Instantiate a class<\/span>\r\n<span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"n\">Human<\/span><span class=\"p\">(<\/span><span class=\"n\">name<\/span><span class=\"o\">=<\/span><span class=\"s2\">&quot;Ian&quot;<\/span><span class=\"p\">)<\/span>\r\n<span class=\"k\">print<\/span> <span class=\"n\">i<\/span><span class=\"o\">.<\/span><span class=\"n\">say<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;hi&quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># prints out &quot;Ian: hi&quot;<\/span>\r\n\r\n<span class=\"n\">j<\/span> <span class=\"o\">=<\/span> <span class=\"n\">Human<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;Joel&quot;<\/span><span class=\"p\">)<\/span>\r\n<span class=\"k\">print<\/span> <span class=\"n\">j<\/span><span class=\"o\">.<\/span><span class=\"n\">say<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;hello&quot;<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># prints out &quot;Joel: hello&quot;<\/span>\r\n\r\n<span class=\"c1\"># Call our class method<\/span>\r\n<span class=\"n\">i<\/span><span class=\"o\">.<\/span><span class=\"n\">get_species<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># =&gt; &quot;H. sapiens&quot;<\/span>\r\n\r\n<span class=\"c1\"># Change the shared attribute<\/span>\r\n<span class=\"n\">Human<\/span><span class=\"o\">.<\/span><span class=\"n\">species<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;H. neanderthalensis&quot;<\/span>\r\n<span class=\"n\">i<\/span><span class=\"o\">.<\/span><span class=\"n\">get_species<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># =&gt; &quot;H. neanderthalensis&quot;<\/span>\r\n<span class=\"n\">j<\/span><span class=\"o\">.<\/span><span class=\"n\">get_species<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># =&gt; &quot;H. neanderthalensis&quot;<\/span>\r\n\r\n<span class=\"c1\"># Call the static method<\/span>\r\n<span class=\"n\">Human<\/span><span class=\"o\">.<\/span><span class=\"n\">grunt<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># =&gt; &quot;*grunt*&quot;<\/span>\r\n\r\n<span class=\"c1\"># Update the property<\/span>\r\n<span class=\"n\">i<\/span><span class=\"o\">.<\/span><span class=\"n\">age<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">42<\/span>\r\n\r\n<span class=\"c1\"># Get the property<\/span>\r\n<span class=\"n\">i<\/span><span class=\"o\">.<\/span><span class=\"n\">age<\/span>  <span class=\"c1\"># =&gt; 42<\/span>\r\n\r\n<span class=\"c1\"># Delete the property<\/span>\r\n<span class=\"k\">del<\/span> <span class=\"n\">i<\/span><span class=\"o\">.<\/span><span class=\"n\">age<\/span>\r\n<span class=\"n\">i<\/span><span class=\"o\">.<\/span><span class=\"n\">age<\/span>  <span class=\"c1\"># =&gt; raises an AttributeError<\/span>\r\n\r\n<span class=\"c1\">####################################################<\/span>\r\n<span class=\"c1\"># 6. Modules<\/span>\r\n<span class=\"c1\">####################################################<\/span>\r\n\r\n<span class=\"c1\"># You can import modules<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">math<\/span>\r\n\r\n<span class=\"k\">print<\/span> <span class=\"n\">math<\/span><span class=\"o\">.<\/span><span class=\"n\">sqrt<\/span><span class=\"p\">(<\/span><span class=\"mi\">16<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 4.0<\/span>\r\n\r\n<span class=\"c1\"># You can get specific functions from a module<\/span>\r\n<span class=\"kn\">from<\/span> <span class=\"nn\">math<\/span> <span class=\"kn\">import<\/span> <span class=\"n\">ceil<\/span><span class=\"p\">,<\/span> <span class=\"n\">floor<\/span>\r\n\r\n<span class=\"k\">print<\/span> <span class=\"n\">ceil<\/span><span class=\"p\">(<\/span><span class=\"mf\">3.7<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 4.0<\/span>\r\n<span class=\"k\">print<\/span> <span class=\"n\">floor<\/span><span class=\"p\">(<\/span><span class=\"mf\">3.7<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; 3.0<\/span>\r\n\r\n<span class=\"c1\"># You can import all functions from a module.<\/span>\r\n<span class=\"c1\"># Warning: this is not recommended<\/span>\r\n<span class=\"kn\">from<\/span> <span class=\"nn\">math<\/span> <span class=\"kn\">import<\/span> <span class=\"o\">*<\/span>\r\n\r\n<span class=\"c1\"># You can shorten module names<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">math<\/span> <span class=\"kn\">as<\/span> <span class=\"nn\">m<\/span>\r\n\r\n<span class=\"n\">math<\/span><span class=\"o\">.<\/span><span class=\"n\">sqrt<\/span><span class=\"p\">(<\/span><span class=\"mi\">16<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"n\">m<\/span><span class=\"o\">.<\/span><span class=\"n\">sqrt<\/span><span class=\"p\">(<\/span><span class=\"mi\">16<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n<span class=\"c1\"># you can also test that the functions are equivalent<\/span>\r\n<span class=\"kn\">from<\/span> <span class=\"nn\">math<\/span> <span class=\"kn\">import<\/span> <span class=\"n\">sqrt<\/span>\r\n\r\n<span class=\"n\">math<\/span><span class=\"o\">.<\/span><span class=\"n\">sqrt<\/span> <span class=\"o\">==<\/span> <span class=\"n\">m<\/span><span class=\"o\">.<\/span><span class=\"n\">sqrt<\/span> <span class=\"o\">==<\/span> <span class=\"n\">sqrt<\/span>  <span class=\"c1\"># =&gt; True<\/span>\r\n\r\n<span class=\"c1\"># Python modules are just ordinary python files. You<\/span>\r\n<span class=\"c1\"># can write your own, and import them. The name of the<\/span>\r\n<span class=\"c1\"># module is the same as the name of the file.<\/span>\r\n\r\n<span class=\"c1\"># You can find out which functions and attributes<\/span>\r\n<span class=\"c1\"># defines a module.<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">math<\/span>\r\n\r\n<span class=\"nb\">dir<\/span><span class=\"p\">(<\/span><span class=\"n\">math<\/span><span class=\"p\">)<\/span>\r\n\r\n\r\n<span class=\"c1\"># If you have a Python script named math.py in the same<\/span>\r\n<span class=\"c1\"># folder as your current script, the file math.py will<\/span>\r\n<span class=\"c1\"># be loaded instead of the built-in Python module.<\/span>\r\n<span class=\"c1\"># This happens because the local folder has priority<\/span>\r\n<span class=\"c1\"># over Python&#39;s built-in libraries.<\/span>\r\n\r\n\r\n<span class=\"c1\">####################################################<\/span>\r\n<span class=\"c1\"># 7. Advanced<\/span>\r\n<span class=\"c1\">####################################################<\/span>\r\n\r\n<span class=\"c1\"># Generators<\/span>\r\n<span class=\"c1\"># A generator &quot;generates&quot; values as they are requested instead of storing<\/span>\r\n<span class=\"c1\"># everything up front<\/span>\r\n\r\n<span class=\"c1\"># The following method (*NOT* a generator) will double all values and store it<\/span>\r\n<span class=\"c1\"># in `double_arr`. For large size of iterables, that might get huge!<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">double_numbers<\/span><span class=\"p\">(<\/span><span class=\"n\">iterable<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"n\">double_arr<\/span> <span class=\"o\">=<\/span> <span class=\"p\">[]<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"n\">i<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">iterable<\/span><span class=\"p\">:<\/span>\r\n        <span class=\"n\">double_arr<\/span><span class=\"o\">.<\/span><span class=\"n\">append<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"o\">+<\/span> <span class=\"n\">i<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"n\">double_arr<\/span>\r\n\r\n\r\n<span class=\"c1\"># Running the following would mean we&#39;ll double all values first and return all<\/span>\r\n<span class=\"c1\"># of them back to be checked by our condition<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"n\">value<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">double_numbers<\/span><span class=\"p\">(<\/span><span class=\"nb\">range<\/span><span class=\"p\">(<\/span><span class=\"mi\">1000000<\/span><span class=\"p\">)):<\/span>  <span class=\"c1\"># `test_non_generator`<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">value<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"n\">value<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">5<\/span><span class=\"p\">:<\/span>\r\n        <span class=\"k\">break<\/span>\r\n\r\n\r\n<span class=\"c1\"># We could instead use a generator to &quot;generate&quot; the doubled value as the item<\/span>\r\n<span class=\"c1\"># is being requested<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">double_numbers_generator<\/span><span class=\"p\">(<\/span><span class=\"n\">iterable<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"n\">i<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">iterable<\/span><span class=\"p\">:<\/span>\r\n        <span class=\"k\">yield<\/span> <span class=\"n\">i<\/span> <span class=\"o\">+<\/span> <span class=\"n\">i<\/span>\r\n\r\n\r\n<span class=\"c1\"># Running the same code as before, but with a generator, now allows us to iterate<\/span>\r\n<span class=\"c1\"># over the values and doubling them one by one as they are being consumed by<\/span>\r\n<span class=\"c1\"># our logic. Hence as soon as we see a value &gt; 5, we break out of the<\/span>\r\n<span class=\"c1\"># loop and don&#39;t need to double most of the values sent in (MUCH FASTER!)<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"n\">value<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">double_numbers_generator<\/span><span class=\"p\">(<\/span><span class=\"nb\">xrange<\/span><span class=\"p\">(<\/span><span class=\"mi\">1000000<\/span><span class=\"p\">)):<\/span>  <span class=\"c1\"># `test_generator`<\/span>\r\n    <span class=\"k\">print<\/span> <span class=\"n\">value<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"n\">value<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">5<\/span><span class=\"p\">:<\/span>\r\n        <span class=\"k\">break<\/span>\r\n\r\n<span class=\"c1\"># BTW: did you notice the use of `range` in `test_non_generator` and `xrange` in `test_generator`?<\/span>\r\n<span class=\"c1\"># Just as `double_numbers_generator` is the generator version of `double_numbers`<\/span>\r\n<span class=\"c1\"># We have `xrange` as the generator version of `range`<\/span>\r\n<span class=\"c1\"># `range` would return back and array with 1000000 values for us to use<\/span>\r\n<span class=\"c1\"># `xrange` would generate 1000000 values for us as we request \/ iterate over those items<\/span>\r\n\r\n<span class=\"c1\"># Just as you can create a list comprehension, you can create generator<\/span>\r\n<span class=\"c1\"># comprehensions as well.<\/span>\r\n<span class=\"n\">values<\/span> <span class=\"o\">=<\/span> <span class=\"p\">(<\/span><span class=\"o\">-<\/span><span class=\"n\">x<\/span> <span class=\"k\">for<\/span> <span class=\"n\">x<\/span> <span class=\"ow\">in<\/span> <span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">])<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"n\">x<\/span> <span class=\"ow\">in<\/span> <span class=\"n\">values<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"k\">print<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># prints -1 -2 -3 -4 -5 to console\/terminal<\/span>\r\n\r\n<span class=\"c1\"># You can also cast a generator comprehension directly to a list.<\/span>\r\n<span class=\"n\">values<\/span> <span class=\"o\">=<\/span> <span class=\"p\">(<\/span><span class=\"o\">-<\/span><span class=\"n\">x<\/span> <span class=\"k\">for<\/span> <span class=\"n\">x<\/span> <span class=\"ow\">in<\/span> <span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">])<\/span>\r\n<span class=\"n\">gen_to_list<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">list<\/span><span class=\"p\">(<\/span><span class=\"n\">values<\/span><span class=\"p\">)<\/span>\r\n<span class=\"k\">print<\/span><span class=\"p\">(<\/span><span class=\"n\">gen_to_list<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># =&gt; [-1, -2, -3, -4, -5]<\/span>\r\n\r\n<span class=\"c1\"># Decorators<\/span>\r\n<span class=\"c1\"># A decorator is a higher order function, which accepts and returns a function.<\/span>\r\n<span class=\"c1\"># Simple usage example \u2013 add_apples decorator will add &#39;Apple&#39; element into<\/span>\r\n<span class=\"c1\"># fruits list returned by get_fruits target function.<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">add_apples<\/span><span class=\"p\">(<\/span><span class=\"n\">func<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">get_fruits<\/span><span class=\"p\">():<\/span>\r\n        <span class=\"n\">fruits<\/span> <span class=\"o\">=<\/span> <span class=\"n\">func<\/span><span class=\"p\">()<\/span>\r\n        <span class=\"n\">fruits<\/span><span class=\"o\">.<\/span><span class=\"n\">append<\/span><span class=\"p\">(<\/span><span class=\"s1\">&#39;Apple&#39;<\/span><span class=\"p\">)<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"n\">fruits<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"n\">get_fruits<\/span>\r\n\r\n<span class=\"nd\">@add_apples<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">get_fruits<\/span><span class=\"p\">():<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"p\">[<\/span><span class=\"s1\">&#39;Banana&#39;<\/span><span class=\"p\">,<\/span> <span class=\"s1\">&#39;Mango&#39;<\/span><span class=\"p\">,<\/span> <span class=\"s1\">&#39;Orange&#39;<\/span><span class=\"p\">]<\/span>\r\n\r\n<span class=\"c1\"># Prints out the list of fruits with &#39;Apple&#39; element in it:<\/span>\r\n<span class=\"c1\"># Banana, Mango, Orange, Apple<\/span>\r\n<span class=\"k\">print<\/span> <span class=\"s1\">&#39;, &#39;<\/span><span class=\"o\">.<\/span><span class=\"n\">join<\/span><span class=\"p\">(<\/span><span class=\"n\">get_fruits<\/span><span class=\"p\">())<\/span>\r\n\r\n<span class=\"c1\"># in this example beg wraps say<\/span>\r\n<span class=\"c1\"># Beg will call say. If say_please is True then it will change the returned<\/span>\r\n<span class=\"c1\"># message<\/span>\r\n<span class=\"kn\">from<\/span> <span class=\"nn\">functools<\/span> <span class=\"kn\">import<\/span> <span class=\"n\">wraps<\/span>\r\n\r\n\r\n<span class=\"k\">def<\/span> <span class=\"nf\">beg<\/span><span class=\"p\">(<\/span><span class=\"n\">target_function<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"nd\">@wraps<\/span><span class=\"p\">(<\/span><span class=\"n\">target_function<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">wrapper<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">,<\/span> <span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">):<\/span>\r\n        <span class=\"n\">msg<\/span><span class=\"p\">,<\/span> <span class=\"n\">say_please<\/span> <span class=\"o\">=<\/span> <span class=\"n\">target_function<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">args<\/span><span class=\"p\">,<\/span> <span class=\"o\">**<\/span><span class=\"n\">kwargs<\/span><span class=\"p\">)<\/span>\r\n        <span class=\"k\">if<\/span> <span class=\"n\">say_please<\/span><span class=\"p\">:<\/span>\r\n            <span class=\"k\">return<\/span> <span class=\"s2\">&quot;{} {}&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">format<\/span><span class=\"p\">(<\/span><span class=\"n\">msg<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;Please! I am poor :(&quot;<\/span><span class=\"p\">)<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"n\">msg<\/span>\r\n\r\n    <span class=\"k\">return<\/span> <span class=\"n\">wrapper<\/span>\r\n\r\n\r\n<span class=\"nd\">@beg<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">say<\/span><span class=\"p\">(<\/span><span class=\"n\">say_please<\/span><span class=\"o\">=<\/span><span class=\"bp\">False<\/span><span class=\"p\">):<\/span>\r\n    <span class=\"n\">msg<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;Can you buy me a beer?&quot;<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"n\">msg<\/span><span class=\"p\">,<\/span> <span class=\"n\">say_please<\/span>\r\n\r\n\r\n<span class=\"k\">print<\/span> <span class=\"n\">say<\/span><span class=\"p\">()<\/span>  <span class=\"c1\"># Can you buy me a beer?<\/span>\r\n<span class=\"k\">print<\/span> <span class=\"n\">say<\/span><span class=\"p\">(<\/span><span class=\"n\">say_please<\/span><span class=\"o\">=<\/span><span class=\"bp\">True<\/span><span class=\"p\">)<\/span>  <span class=\"c1\"># Can you buy me a beer? Please! I am poor :(<\/span>\r\n"
    },





















    "java":{
        "0":"<span><\/span><span class=\"c1\">\/\/ Single-line comments start with \/\/<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">Multi-line comments look like this.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"cm\">\/**<\/span>\r\n<span class=\"cm\"> * JavaDoc comments look like this. Used to describe the Class or various<\/span>\r\n<span class=\"cm\"> * attributes of a Class.<\/span>\r\n<span class=\"cm\"> * Main attributes:<\/span>\r\n<span class=\"cm\"> *<\/span>\r\n<span class=\"cm\"> * @author         Name (and contact information such as email) of author(s).<\/span>\r\n<span class=\"cm\"> * @version     Current version of the program.<\/span>\r\n<span class=\"cm\"> * @since        When this part of the program was first added.<\/span>\r\n<span class=\"cm\"> * @param         For describing the different parameters for a method.<\/span>\r\n<span class=\"cm\"> * @return        For describing what the method returns.<\/span>\r\n<span class=\"cm\"> * @deprecated  For showing the code is outdated or shouldn&#39;t be used.<\/span>\r\n<span class=\"cm\"> * @see         Links to another part of documentation.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Import ArrayList class inside of the java.util package<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">java.util.ArrayList<\/span><span class=\"o\">;<\/span>\r\n<span class=\"c1\">\/\/ Import all classes inside of java.security package<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">java.security.*<\/span><span class=\"o\">;<\/span>\r\n\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">LearnJava<\/span> <span class=\"o\">{<\/span>\r\n\r\n    <span class=\"c1\">\/\/ In order to run a java program, it must have a main method as an entry<\/span>\r\n    <span class=\"c1\">\/\/ point.<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kd\">static<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">main<\/span><span class=\"o\">(<\/span><span class=\"n\">String<\/span><span class=\"o\">[]<\/span> <span class=\"n\">args<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n\r\n    <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n    <span class=\"c1\">\/\/ Input\/Output<\/span>\r\n    <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">        * Output<\/span>\r\n<span class=\"cm\">        *\/<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Use System.out.println() to print lines.<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Hello World!&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span>\r\n            <span class=\"s\">&quot;Integer: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">10<\/span> <span class=\"o\">+<\/span>\r\n            <span class=\"s\">&quot; Double: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"mf\">3.14<\/span> <span class=\"o\">+<\/span>\r\n            <span class=\"s\">&quot; Boolean: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"kc\">true<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ To print without a newline, use System.out.print().<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">print<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Hello &quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">print<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;World&quot;<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Use System.out.printf() for easy formatted printing.<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">printf<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;pi = %.5f&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">Math<\/span><span class=\"o\">.<\/span><span class=\"na\">PI<\/span><span class=\"o\">);<\/span> <span class=\"c1\">\/\/ =&gt; pi = 3.14159<\/span>\r\n\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">         * Input<\/span>\r\n<span class=\"cm\">         *\/<\/span>\r\n\r\n        <span class=\"c1\">\/\/ use Scanner to read input<\/span>\r\n        <span class=\"c1\">\/\/ must import java.util.Scanner;<\/span>\r\n        <span class=\"n\">Scanner<\/span> <span class=\"n\">scanner<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">Scanner<\/span><span class=\"o\">(<\/span><span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">in<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ read string input<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">name<\/span> <span class=\"o\">=<\/span> <span class=\"n\">scanner<\/span><span class=\"o\">.<\/span><span class=\"na\">next<\/span><span class=\"o\">();<\/span>\r\n\r\n        <span class=\"c1\">\/\/ read byte input<\/span>\r\n        <span class=\"kt\">byte<\/span> <span class=\"n\">numByte<\/span> <span class=\"o\">=<\/span> <span class=\"n\">scanner<\/span><span class=\"o\">.<\/span><span class=\"na\">nextByte<\/span><span class=\"o\">();<\/span>\r\n\r\n        <span class=\"c1\">\/\/ read int input<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">numInt<\/span> <span class=\"o\">=<\/span> <span class=\"n\">scanner<\/span><span class=\"o\">.<\/span><span class=\"na\">nextInt<\/span><span class=\"o\">();<\/span>\r\n\r\n        <span class=\"c1\">\/\/ read long input<\/span>\r\n        <span class=\"kt\">float<\/span> <span class=\"n\">numFloat<\/span> <span class=\"o\">=<\/span> <span class=\"n\">scanner<\/span><span class=\"o\">.<\/span><span class=\"na\">nextFloat<\/span><span class=\"o\">();<\/span>\r\n\r\n        <span class=\"c1\">\/\/ read double input<\/span>\r\n        <span class=\"kt\">double<\/span> <span class=\"n\">numDouble<\/span> <span class=\"o\">=<\/span> <span class=\"n\">scanner<\/span><span class=\"o\">.<\/span><span class=\"na\">nextDouble<\/span><span class=\"o\">();<\/span>\r\n\r\n        <span class=\"c1\">\/\/ read boolean input<\/span>\r\n        <span class=\"kt\">boolean<\/span> <span class=\"n\">bool<\/span> <span class=\"o\">=<\/span> <span class=\"n\">scanner<\/span><span class=\"o\">.<\/span><span class=\"na\">nextBoolean<\/span><span class=\"o\">();<\/span>\r\n\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n        <span class=\"c1\">\/\/ Variables<\/span>\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">        *  Variable Declaration<\/span>\r\n<span class=\"cm\">        *\/<\/span>\r\n        <span class=\"c1\">\/\/ Declare a variable using &lt;type&gt; &lt;name&gt;<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">fooInt<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"c1\">\/\/ Declare multiple variables of the same<\/span>\r\n        <span class=\"c1\">\/\/ type &lt;type&gt; &lt;name1&gt;, &lt;name2&gt;, &lt;name3&gt;<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">fooInt1<\/span><span class=\"o\">,<\/span> <span class=\"n\">fooInt2<\/span><span class=\"o\">,<\/span> <span class=\"n\">fooInt3<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">        *  Variable Initialization<\/span>\r\n<span class=\"cm\">        *\/<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Initialize a variable using &lt;type&gt; &lt;name&gt; = &lt;val&gt;<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">barInt<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"c1\">\/\/ Initialize multiple variables of same type with same<\/span>\r\n        <span class=\"c1\">\/\/ value &lt;type&gt; &lt;name1&gt;, &lt;name2&gt;, &lt;name3&gt;<\/span>\r\n        <span class=\"c1\">\/\/ &lt;name1&gt; = &lt;name2&gt; = &lt;name3&gt; = &lt;val&gt;<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">barInt1<\/span><span class=\"o\">,<\/span> <span class=\"n\">barInt2<\/span><span class=\"o\">,<\/span> <span class=\"n\">barInt3<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">barInt1<\/span> <span class=\"o\">=<\/span> <span class=\"n\">barInt2<\/span> <span class=\"o\">=<\/span> <span class=\"n\">barInt3<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">        *  Variable types<\/span>\r\n<span class=\"cm\">        *\/<\/span>\r\n        <span class=\"c1\">\/\/ Byte - 8-bit signed two&#39;s complement integer<\/span>\r\n        <span class=\"c1\">\/\/ (-128 &lt;= byte &lt;= 127)<\/span>\r\n        <span class=\"kt\">byte<\/span> <span class=\"n\">fooByte<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">100<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ If you would like to interpret a byte as an unsigned integer<\/span>\r\n        <span class=\"c1\">\/\/ then this simple operation can help<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">unsignedIntLessThan256<\/span> <span class=\"o\">=<\/span> <span class=\"mh\">0xff<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">fooByte<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"c1\">\/\/ this contrasts a cast which can be negative.<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">signedInt<\/span> <span class=\"o\">=<\/span> <span class=\"o\">(<\/span><span class=\"kt\">int<\/span><span class=\"o\">)<\/span> <span class=\"n\">fooByte<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Short - 16-bit signed two&#39;s complement integer<\/span>\r\n        <span class=\"c1\">\/\/ (-32,768 &lt;= short &lt;= 32,767)<\/span>\r\n        <span class=\"kt\">short<\/span> <span class=\"n\">fooShort<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10000<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Integer - 32-bit signed two&#39;s complement integer<\/span>\r\n        <span class=\"c1\">\/\/ (-2,147,483,648 &lt;= int &lt;= 2,147,483,647)<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">bazInt<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Long - 64-bit signed two&#39;s complement integer<\/span>\r\n        <span class=\"c1\">\/\/ (-9,223,372,036,854,775,808 &lt;= long &lt;= 9,223,372,036,854,775,807)<\/span>\r\n        <span class=\"kt\">long<\/span> <span class=\"n\">fooLong<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">100000L<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"c1\">\/\/ L is used to denote that this variable value is of type Long;<\/span>\r\n        <span class=\"c1\">\/\/ anything without is treated as integer by default.<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Note: byte, short, int and long are signed. They can have positive and negative values.<\/span>\r\n        <span class=\"c1\">\/\/ There are no unsigned variants.<\/span>\r\n        <span class=\"c1\">\/\/ char, however, is 16-bit unsigned.<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Float - Single-precision 32-bit IEEE 754 Floating Point<\/span>\r\n        <span class=\"c1\">\/\/ 2^-149 &lt;= float &lt;= (2-2^-23) * 2^127<\/span>\r\n        <span class=\"kt\">float<\/span> <span class=\"n\">fooFloat<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">234.5f<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"c1\">\/\/ f or F is used to denote that this variable value is of type float;<\/span>\r\n        <span class=\"c1\">\/\/ otherwise it is treated as double.<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Double - Double-precision 64-bit IEEE 754 Floating Point<\/span>\r\n        <span class=\"c1\">\/\/ 2^-1074 &lt;= x &lt;= (2-2^-52) * 2^1023<\/span>\r\n        <span class=\"kt\">double<\/span> <span class=\"n\">fooDouble<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">123.4<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Boolean - true &amp; false<\/span>\r\n        <span class=\"kt\">boolean<\/span> <span class=\"n\">fooBoolean<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">true<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"kt\">boolean<\/span> <span class=\"n\">barBoolean<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">false<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Char - A single 16-bit Unicode character<\/span>\r\n        <span class=\"kt\">char<\/span> <span class=\"n\">fooChar<\/span> <span class=\"o\">=<\/span> <span class=\"sc\">&#39;A&#39;<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ final variables can&#39;t be reassigned,<\/span>\r\n        <span class=\"kd\">final<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">HOURS_I_WORK_PER_WEEK<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">9001<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"c1\">\/\/ but they can be initialized later.<\/span>\r\n        <span class=\"kd\">final<\/span> <span class=\"kt\">double<\/span> <span class=\"n\">E<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">E<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">2.71828<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ BigInteger - Immutable arbitrary-precision integers<\/span>\r\n        <span class=\"c1\">\/\/<\/span>\r\n        <span class=\"c1\">\/\/ BigInteger is a data type that allows programmers to manipulate<\/span>\r\n        <span class=\"c1\">\/\/ integers longer than 64-bits. Integers are stored as an array of<\/span>\r\n        <span class=\"c1\">\/\/ of bytes and are manipulated using functions built into BigInteger<\/span>\r\n        <span class=\"c1\">\/\/<\/span>\r\n        <span class=\"c1\">\/\/ BigInteger can be initialized using an array of bytes or a string.<\/span>\r\n        <span class=\"n\">BigInteger<\/span> <span class=\"n\">fooBigInteger<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">BigInteger<\/span><span class=\"o\">(<\/span><span class=\"n\">fooByteArray<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ BigDecimal - Immutable, arbitrary-precision signed decimal number<\/span>\r\n        <span class=\"c1\">\/\/<\/span>\r\n        <span class=\"c1\">\/\/ A BigDecimal takes two parts: an arbitrary precision integer<\/span>\r\n        <span class=\"c1\">\/\/ unscaled value and a 32-bit integer scale<\/span>\r\n        <span class=\"c1\">\/\/<\/span>\r\n        <span class=\"c1\">\/\/ BigDecimal allows the programmer complete control over decimal<\/span>\r\n        <span class=\"c1\">\/\/ rounding. It is recommended to use BigDecimal with currency values<\/span>\r\n        <span class=\"c1\">\/\/ and where exact decimal precision is required.<\/span>\r\n        <span class=\"c1\">\/\/<\/span>\r\n        <span class=\"c1\">\/\/ BigDecimal can be initialized with an int, long, double or String<\/span>\r\n        <span class=\"c1\">\/\/ or by initializing the unscaled value (BigInteger) and scale (int).<\/span>\r\n        <span class=\"n\">BigDecimal<\/span> <span class=\"n\">fooBigDecimal<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">BigDecimal<\/span><span class=\"o\">(<\/span><span class=\"n\">fooBigInteger<\/span><span class=\"o\">,<\/span> <span class=\"n\">fooInt<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Be wary of the constructor that takes a float or double as<\/span>\r\n        <span class=\"c1\">\/\/ the inaccuracy of the float\/double will be copied in BigDecimal.<\/span>\r\n        <span class=\"c1\">\/\/ Prefer the String constructor when you need an exact value.<\/span>\r\n        <span class=\"n\">BigDecimal<\/span> <span class=\"n\">tenCents<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">BigDecimal<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;0.1&quot;<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Strings<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">fooString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;My String Is Here!&quot;<\/span><span class=\"o\">;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ \\n is an escaped character that starts a new line<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">barString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;Printing on a new line?\\nNo Problem!&quot;<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"c1\">\/\/ \\t is an escaped character that adds a tab character<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">bazString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;Do you want to add a tab?\\tNo Problem!&quot;<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">fooString<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">barString<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">bazString<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ String Building<\/span>\r\n        <span class=\"c1\">\/\/ #1 - with plus operator<\/span>\r\n        <span class=\"c1\">\/\/ That&#39;s the basic way to do it (optimized under the hood)<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">plusConcatenated<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;Strings can &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"s\">&quot;be concatenated &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"s\">&quot;via + operator.&quot;<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">plusConcatenated<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"c1\">\/\/ Output: Strings can be concatenated via + operator.<\/span>\r\n\r\n        <span class=\"c1\">\/\/ #2 - with StringBuilder<\/span>\r\n        <span class=\"c1\">\/\/ This way doesn&#39;t create any intermediate strings. It just stores the string pieces, and ties them together<\/span>\r\n        <span class=\"c1\">\/\/ when toString() is called.<\/span>\r\n        <span class=\"c1\">\/\/ Hint: This class is not thread safe. A thread-safe alternative (with some impact on performance) is StringBuffer.<\/span>\r\n        <span class=\"n\">StringBuilder<\/span> <span class=\"n\">builderConcatenated<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">StringBuilder<\/span><span class=\"o\">();<\/span>\r\n        <span class=\"n\">builderConcatenated<\/span><span class=\"o\">.<\/span><span class=\"na\">append<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;You &quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">builderConcatenated<\/span><span class=\"o\">.<\/span><span class=\"na\">append<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;can use &quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">builderConcatenated<\/span><span class=\"o\">.<\/span><span class=\"na\">append<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;the StringBuilder class.&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">builderConcatenated<\/span><span class=\"o\">.<\/span><span class=\"na\">toString<\/span><span class=\"o\">());<\/span> <span class=\"c1\">\/\/ only now is the string built<\/span>\r\n        <span class=\"c1\">\/\/ Output: You can use the StringBuilder class.<\/span>\r\n\r\n        <span class=\"c1\">\/\/ StringBuilder is efficient when the fully constructed String is not required until the end of some processing.<\/span>\r\n        <span class=\"n\">StringBuilder<\/span> <span class=\"n\">stringBuilder<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">StringBuilder<\/span><span class=\"o\">();<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">inefficientString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;&quot;<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"k\">for<\/span> <span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span> <span class=\"o\">;<\/span> <span class=\"n\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">;<\/span> <span class=\"n\">i<\/span><span class=\"o\">++)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">stringBuilder<\/span><span class=\"o\">.<\/span><span class=\"na\">append<\/span><span class=\"o\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">).<\/span><span class=\"na\">append<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot; &quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">inefficientString<\/span> <span class=\"o\">+=<\/span> <span class=\"n\">i<\/span> <span class=\"o\">+<\/span> <span class=\"s\">&quot; &quot;<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"o\">}<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">inefficientString<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">stringBuilder<\/span><span class=\"o\">.<\/span><span class=\"na\">toString<\/span><span class=\"o\">());<\/span>\r\n        <span class=\"c1\">\/\/ inefficientString requires a lot more work to produce, as it generates a String on every loop iteration.<\/span>\r\n        <span class=\"c1\">\/\/ Simple concatenation with + is compiled to a StringBuilder and toString()<\/span>\r\n",


        "1":"<span class=\"c1\">\/\/ Avoid string concatenation in loops.<\/span>\r\n\r\n        <span class=\"c1\">\/\/ #3 - with String formatter<\/span>\r\n        <span class=\"c1\">\/\/ Another alternative way to create strings. Fast and readable.<\/span>\r\n        <span class=\"n\">String<\/span><span class=\"o\">.<\/span><span class=\"na\">format<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;%s may prefer %s.&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;Or you&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;String.format()&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"c1\">\/\/ Output: Or you may prefer String.format().<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Arrays<\/span>\r\n        <span class=\"c1\">\/\/ The array size must be decided upon instantiation<\/span>\r\n        <span class=\"c1\">\/\/ The following formats work for declaring an array<\/span>\r\n        <span class=\"c1\">\/\/ &lt;datatype&gt;[] &lt;var name&gt; = new &lt;datatype&gt;[&lt;array size&gt;];<\/span>\r\n        <span class=\"c1\">\/\/ &lt;datatype&gt; &lt;var name&gt;[] = new &lt;datatype&gt;[&lt;array size&gt;];<\/span>\r\n        <span class=\"kt\">int<\/span><span class=\"o\">[]<\/span> <span class=\"n\">intArray<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"kt\">int<\/span><span class=\"o\">[<\/span><span class=\"mi\">10<\/span><span class=\"o\">];<\/span>\r\n        <span class=\"n\">String<\/span><span class=\"o\">[]<\/span> <span class=\"n\">stringArray<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">String<\/span><span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"o\">];<\/span>\r\n        <span class=\"kt\">boolean<\/span> <span class=\"n\">boolArray<\/span><span class=\"o\">[]<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"kt\">boolean<\/span><span class=\"o\">[<\/span><span class=\"mi\">100<\/span><span class=\"o\">];<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Another way to declare &amp; initialize an array<\/span>\r\n        <span class=\"kt\">int<\/span><span class=\"o\">[]<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"o\">{<\/span><span class=\"mi\">9000<\/span><span class=\"o\">,<\/span> <span class=\"mi\">1000<\/span><span class=\"o\">,<\/span> <span class=\"mi\">1337<\/span><span class=\"o\">};<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">names<\/span><span class=\"o\">[]<\/span> <span class=\"o\">=<\/span> <span class=\"o\">{<\/span><span class=\"s\">&quot;Bob&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;John&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;Fred&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;Juan Pedro&quot;<\/span><span class=\"o\">};<\/span>\r\n        <span class=\"kt\">boolean<\/span> <span class=\"n\">bools<\/span><span class=\"o\">[]<\/span> <span class=\"o\">=<\/span> <span class=\"o\">{<\/span><span class=\"kc\">true<\/span><span class=\"o\">,<\/span> <span class=\"kc\">false<\/span><span class=\"o\">,<\/span> <span class=\"kc\">false<\/span><span class=\"o\">};<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Indexing an array - Accessing an element<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;intArray @ 0: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">intArray<\/span><span class=\"o\">[<\/span><span class=\"mi\">0<\/span><span class=\"o\">]);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Arrays are zero-indexed and mutable.<\/span>\r\n        <span class=\"n\">intArray<\/span><span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"o\">]<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;intArray @ 1: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">intArray<\/span><span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"o\">]);<\/span> <span class=\"c1\">\/\/ =&gt; 1<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Other data types worth checking out<\/span>\r\n        <span class=\"c1\">\/\/ ArrayLists - Like arrays except more functionality is offered, and<\/span>\r\n        <span class=\"c1\">\/\/              the size is mutable.<\/span>\r\n        <span class=\"c1\">\/\/ LinkedLists - Implementation of doubly-linked list. All of the<\/span>\r\n        <span class=\"c1\">\/\/               operations perform as could be expected for a<\/span>\r\n        <span class=\"c1\">\/\/               doubly-linked list.<\/span>\r\n        <span class=\"c1\">\/\/ Maps - A mapping of key Objects to value Objects. Map is<\/span>\r\n        <span class=\"c1\">\/\/        an interface and therefore cannot be instantiated.<\/span>\r\n        <span class=\"c1\">\/\/        The type of keys and values contained in a Map must<\/span>\r\n        <span class=\"c1\">\/\/        be specified upon instantiation of the implementing<\/span>\r\n        <span class=\"c1\">\/\/        class. Each key may map to only one corresponding value,<\/span>\r\n        <span class=\"c1\">\/\/        and each key may appear only once (no duplicates).<\/span>\r\n        <span class=\"c1\">\/\/ HashMaps - This class uses a hashtable to implement the Map<\/span>\r\n        <span class=\"c1\">\/\/            interface. This allows the execution time of basic<\/span>\r\n        <span class=\"c1\">\/\/            operations, such as get and insert element, to remain<\/span>\r\n        <span class=\"c1\">\/\/            constant-amortized even for large sets.<\/span>\r\n        <span class=\"c1\">\/\/ TreeMap - A Map that is sorted by its keys. Each modification <\/span>\r\n        <span class=\"c1\">\/\/           maintains the sorting defined by either a Comparator<\/span>\r\n        <span class=\"c1\">\/\/           supplied at instantiation, or comparisons of each Object<\/span>\r\n        <span class=\"c1\">\/\/           if they implement the Comparable interface.<\/span>\r\n        <span class=\"c1\">\/\/           Failure of keys to implement Comparable combined with failure to<\/span>\r\n        <span class=\"c1\">\/\/           supply a Comparator will throw ClassCastExceptions.<\/span>\r\n        <span class=\"c1\">\/\/           Insertion and removal operations take O(log(n)) time<\/span>\r\n        <span class=\"c1\">\/\/           so avoid using this data structure unless you are taking<\/span>\r\n        <span class=\"c1\">\/\/           advantage of the sorting.<\/span>\r\n\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n        <span class=\"c1\">\/\/ Operators<\/span>\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;\\n-&gt;Operators&quot;<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">i1<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"n\">i2<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">2<\/span><span class=\"o\">;<\/span> <span class=\"c1\">\/\/ Shorthand for multiple declarations<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Arithmetic is straightforward<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;1+2 = &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"n\">i1<\/span> <span class=\"o\">+<\/span> <span class=\"n\">i2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; 3<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;2-1 = &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"n\">i2<\/span> <span class=\"o\">-<\/span> <span class=\"n\">i1<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; 1<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;2*1 = &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"n\">i2<\/span> <span class=\"o\">*<\/span> <span class=\"n\">i1<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; 2<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;1\/2 = &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"n\">i1<\/span> <span class=\"o\">\/<\/span> <span class=\"n\">i2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; 0 (int\/int returns int)<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;1\/2.0 = &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"n\">i1<\/span> <span class=\"o\">\/<\/span> <span class=\"o\">(<\/span><span class=\"kt\">double<\/span><span class=\"o\">)<\/span><span class=\"n\">i2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; 0.5<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Modulo<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;11%3 = &quot;<\/span><span class=\"o\">+(<\/span><span class=\"mi\">11<\/span> <span class=\"o\">%<\/span> <span class=\"mi\">3<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; 2<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Comparison operators<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;3 == 2? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"mi\">3<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; false<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;3 != 2? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"mi\">3<\/span> <span class=\"o\">!=<\/span> <span class=\"mi\">2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; true<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;3 &gt; 2? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"mi\">3<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; true<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;3 &lt; 2? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"mi\">3<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; false<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;2 &lt;= 2? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"mi\">2<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; true<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;2 &gt;= 2? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"mi\">2<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"mi\">2<\/span><span class=\"o\">));<\/span> <span class=\"c1\">\/\/ =&gt; true<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Boolean operators<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;3 &gt; 2 &amp;&amp; 2 &gt; 3? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">((<\/span><span class=\"mi\">3<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"o\">(<\/span><span class=\"mi\">2<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)));<\/span> <span class=\"c1\">\/\/ =&gt; false<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;3 &gt; 2 || 2 &gt; 3? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">((<\/span><span class=\"mi\">3<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)<\/span> <span class=\"o\">||<\/span> <span class=\"o\">(<\/span><span class=\"mi\">2<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)));<\/span> <span class=\"c1\">\/\/ =&gt; true<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;!(3 == 2)? &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(!(<\/span><span class=\"mi\">3<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)));<\/span> <span class=\"c1\">\/\/ =&gt; true<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Bitwise operators!<\/span>\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">        ~      Unary bitwise complement<\/span>\r\n<span class=\"cm\">        &lt;&lt;     Signed left shift<\/span>\r\n<span class=\"cm\">        &gt;&gt;     Signed\/Arithmetic right shift<\/span>\r\n<span class=\"cm\">        &gt;&gt;&gt;    Unsigned\/Logical right shift<\/span>\r\n<span class=\"cm\">        &amp;      Bitwise AND<\/span>\r\n<span class=\"cm\">        ^      Bitwise exclusive OR<\/span>\r\n<span class=\"cm\">        |      Bitwise inclusive OR<\/span>\r\n<span class=\"cm\">        *\/<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Increment operators<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;\\n-&gt;Inc\/Dec-rementation&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"c1\">\/\/ The ++ and -- operators increment and decrement by 1 respectively.<\/span>\r\n        <span class=\"c1\">\/\/ If they are placed before the variable, they increment then return;<\/span>\r\n        <span class=\"c1\">\/\/ after the variable they return then increment.<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">++);<\/span> <span class=\"c1\">\/\/ i = 1, prints 0 (post-increment)<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(++<\/span><span class=\"n\">i<\/span><span class=\"o\">);<\/span> <span class=\"c1\">\/\/ i = 2, prints 2 (pre-increment)<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">--);<\/span> <span class=\"c1\">\/\/ i = 1, prints 2 (post-decrement)<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(--<\/span><span class=\"n\">i<\/span><span class=\"o\">);<\/span> <span class=\"c1\">\/\/ i = 0, prints 0 (pre-decrement)<\/span>\r\n\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n        <span class=\"c1\">\/\/ Control Structures<\/span>\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;\\n-&gt;Control Structures&quot;<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ If statements are c-like<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">j<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">j<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;I get printed&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"o\">}<\/span> <span class=\"k\">else<\/span> <span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">j<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;I don&#39;t&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"o\">}<\/span> <span class=\"k\">else<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;I also don&#39;t&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"o\">}<\/span>\r\n\r\n        <span class=\"c1\">\/\/ While loop<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">fooWhile<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"k\">while<\/span><span class=\"o\">(<\/span><span class=\"n\">fooWhile<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">100<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">fooWhile<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"c1\">\/\/ Increment the counter<\/span>\r\n            <span class=\"c1\">\/\/ Iterated 100 times, fooWhile 0,1,2...99<\/span>\r\n            <span class=\"n\">fooWhile<\/span><span class=\"o\">++;<\/span>\r\n        <span class=\"o\">}<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;fooWhile Value: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">fooWhile<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Do While Loop<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">fooDoWhile<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"k\">do<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">fooDoWhile<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"c1\">\/\/ Increment the counter<\/span>\r\n            <span class=\"c1\">\/\/ Iterated 99 times, fooDoWhile 0-&gt;99<\/span>\r\n            <span class=\"n\">fooDoWhile<\/span><span class=\"o\">++;<\/span>\r\n        <span class=\"o\">}<\/span> <span class=\"k\">while<\/span><span class=\"o\">(<\/span><span class=\"n\">fooDoWhile<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">100<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;fooDoWhile Value: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">fooDoWhile<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ For Loop<\/span>\r\n        <span class=\"c1\">\/\/ for loop structure =&gt; for(&lt;start_statement&gt;; &lt;conditional&gt;; &lt;step&gt;)<\/span>\r\n        <span class=\"k\">for<\/span> <span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">fooFor<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"o\">;<\/span> <span class=\"n\">fooFor<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">;<\/span> <span class=\"n\">fooFor<\/span><span class=\"o\">++)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">fooFor<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"c1\">\/\/ Iterated 10 times, fooFor 0-&gt;9<\/span>\r\n        <span class=\"o\">}<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;fooFor Value: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">fooFor<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Nested For Loop Exit with Label<\/span>\r\n        <span class=\"n\">outer<\/span><span class=\"o\">:<\/span>\r\n        <span class=\"k\">for<\/span> <span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"o\">;<\/span> <span class=\"n\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">;<\/span> <span class=\"n\">i<\/span><span class=\"o\">++)<\/span> <span class=\"o\">{<\/span>\r\n          <span class=\"k\">for<\/span> <span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">j<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"o\">;<\/span> <span class=\"n\">j<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">;<\/span> <span class=\"n\">j<\/span><span class=\"o\">++)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">i<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">5<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"n\">j<\/span> <span class=\"o\">==<\/span><span class=\"mi\">5<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n              <span class=\"k\">break<\/span> <span class=\"n\">outer<\/span><span class=\"o\">;<\/span>\r\n              <span class=\"c1\">\/\/ breaks out of outer loop instead of only the inner one<\/span>\r\n            <span class=\"o\">}<\/span>\r\n          <span class=\"o\">}<\/span>\r\n        <span class=\"o\">}<\/span>\r\n\r\n        <span class=\"c1\">\/\/ For Each Loop<\/span>\r\n        <span class=\"c1\">\/\/ The for loop is also able to iterate over arrays as well as objects<\/span>\r\n        <span class=\"c1\">\/\/ that implement the Iterable interface.<\/span>\r\n        <span class=\"kt\">int<\/span><span class=\"o\">[]<\/span> <span class=\"n\">fooList<\/span> <span class=\"o\">=<\/span> <span class=\"o\">{<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">,<\/span> <span class=\"mi\">4<\/span><span class=\"o\">,<\/span> <span class=\"mi\">5<\/span><span class=\"o\">,<\/span> <span class=\"mi\">6<\/span><span class=\"o\">,<\/span> <span class=\"mi\">7<\/span><span class=\"o\">,<\/span> <span class=\"mi\">8<\/span><span class=\"o\">,<\/span> <span class=\"mi\">9<\/span><span class=\"o\">};<\/span>\r\n        <span class=\"c1\">\/\/ for each loop structure =&gt; for (&lt;object&gt; : &lt;iterable&gt;)<\/span>\r\n        <span class=\"c1\">\/\/ reads as: for each element in the iterable<\/span>\r\n        <span class=\"c1\">\/\/ note: the object type must match the element type of the iterable.<\/span>\r\n        <span class=\"k\">for<\/span> <span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">bar<\/span> <span class=\"o\">:<\/span> <span class=\"n\">fooList<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">bar<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"c1\">\/\/Iterates 9 times and prints 1-9 on new lines<\/span>\r\n        <span class=\"o\">}<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Switch Case<\/span>\r\n        <span class=\"c1\">\/\/ A switch works with the byte, short, char, and int data types.<\/span>\r\n        <span class=\"c1\">\/\/ It also works with enumerated types (discussed in Enum Types), the<\/span>\r\n        <span class=\"c1\">\/\/ String class, and a few special classes that wrap primitive types:<\/span>\r\n        <span class=\"c1\">\/\/ Character, Byte, Short, and Integer.<\/span>\r\n        <span class=\"c1\">\/\/ Starting in Java 7 and above, we can also use the String type.<\/span>\r\n        <span class=\"c1\">\/\/ Note: Do remember that, not adding &quot;break&quot; at end any particular case ends up in<\/span>\r\n        <span class=\"c1\">\/\/ executing the very next case(given it satisfies the condition provided) as well.<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">month<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">3<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">monthString<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"k\">switch<\/span> <span class=\"o\">(<\/span><span class=\"n\">month<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"k\">case<\/span> <span class=\"mi\">1<\/span><span class=\"o\">:<\/span> <span class=\"n\">monthString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;January&quot;<\/span><span class=\"o\">;<\/span>\r\n                    <span class=\"k\">break<\/span><span class=\"o\">;<\/span>\r\n            <span class=\"k\">case<\/span> <span class=\"mi\">2<\/span><span class=\"o\">:<\/span> <span class=\"n\">monthString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;February&quot;<\/span><span class=\"o\">;<\/span>\r\n                    <span class=\"k\">break<\/span><span class=\"o\">;<\/span>\r\n            <span class=\"k\">case<\/span> <span class=\"mi\">3<\/span><span class=\"o\">:<\/span> <span class=\"n\">monthString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;March&quot;<\/span><span class=\"o\">;<\/span>\r\n                    <span class=\"k\">break<\/span><span class=\"o\">;<\/span>\r\n            <span class=\"k\">default<\/span><span class=\"o\">:<\/span> <span class=\"n\">monthString<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;Some other month&quot;<\/span><span class=\"o\">;<\/span>\r\n                     <span class=\"k\">break<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"o\">}<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Switch Case Result: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">monthString<\/span><span class=\"o\">);<\/span>\r\n\r\n\r\n        <span class=\"c1\">\/\/ Try-with-resources (Java 7+)<\/span>\r\n        <span class=\"c1\">\/\/ Try-catch-finally statements work as expected in Java but in Java 7+<\/span>\r\n        <span class=\"c1\">\/\/ the try-with-resources statement is also available. Try-with-resources<\/span>\r\n        <span class=\"c1\">\/\/ simplifies try-catch-finally statements by closing resources<\/span>\r\n        <span class=\"c1\">\/\/ automatically.<\/span>\r\n\r\n        <span class=\"c1\">\/\/ In order to use a try-with-resources, include an instance of a class<\/span>\r\n        <span class=\"c1\">\/\/ in the try statement. The class must implement java.lang.AutoCloseable.<\/span>\r\n        <span class=\"k\">try<\/span> <span class=\"o\">(<\/span><span class=\"n\">BufferedReader<\/span> <span class=\"n\">br<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">BufferedReader<\/span><span class=\"o\">(<\/span><span class=\"k\">new<\/span> <span class=\"n\">FileReader<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;foo.txt&quot;<\/span><span class=\"o\">)))<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"c1\">\/\/ You can attempt to do something that could throw an exception.<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">br<\/span><span class=\"o\">.<\/span><span class=\"na\">readLine<\/span><span class=\"o\">());<\/span>\r\n            <span class=\"c1\">\/\/ In Java 7, the resource will always be closed, even if it throws<\/span>\r\n            <span class=\"c1\">\/\/ an Exception.<\/span>\r\n        <span class=\"o\">}<\/span> <span class=\"k\">catch<\/span> <span class=\"o\">(<\/span><span class=\"n\">Exception<\/span> <span class=\"n\">ex<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"c1\">\/\/The resource will be closed before the catch statement executes.<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;readLine() failed.&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"o\">}<\/span>\r\n        <span class=\"c1\">\/\/ No need for a finally statement in this case, the BufferedReader is<\/span>\r\n        <span class=\"c1\">\/\/ already closed. This can be used to avoid certain edge cases where<\/span>\r\n        <span class=\"c1\">\/\/ a finally statement might not be called.<\/span>\r\n        <span class=\"c1\">\/\/ To learn more:<\/span>\r\n        <span class=\"c1\">\/\/ https:\/\/docs.oracle.com\/javase\/tutorial\/essential\/exceptions\/tryResourceClose.html<\/span>\r\n\r\n\r\n        <span class=\"c1\">\/\/ Conditional Shorthand<\/span>\r\n        <span class=\"c1\">\/\/ You can use the &#39;?&#39; operator for quick assignments or logic forks.<\/span>\r\n        <span class=\"c1\">\/\/ Reads as &quot;If (statement) is true, use &lt;first value&gt;, otherwise, use<\/span>\r\n        <span class=\"c1\">\/\/ &lt;second value&gt;&quot;<\/span>\r\n        <span class=\"kt\">int<\/span> <span class=\"n\">foo<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">bar<\/span> <span class=\"o\">=<\/span> <span class=\"o\">(<\/span><span class=\"n\">foo<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span> <span class=\"o\">?<\/span> <span class=\"s\">&quot;A&quot;<\/span> <span class=\"o\">:<\/span> <span class=\"s\">&quot;B&quot;<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;bar : &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">bar<\/span><span class=\"o\">);<\/span> <span class=\"c1\">\/\/ Prints &quot;bar : A&quot;, because the <\/span>\r\n        <span class=\"c1\">\/\/ statement is true.<\/span>\r\n        <span class=\"c1\">\/\/ Or simply<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;bar : &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">(<\/span><span class=\"n\">foo<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span> <span class=\"o\">?<\/span> <span class=\"s\">&quot;A&quot;<\/span> <span class=\"o\">:<\/span> <span class=\"s\">&quot;B&quot;<\/span><span class=\"o\">));<\/span>\r\n\r\n\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n        <span class=\"c1\">\/\/ Converting Data Types<\/span>\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Converting data<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Convert String To Integer<\/span>\r\n        <span class=\"n\">Integer<\/span><span class=\"o\">.<\/span><span class=\"na\">parseInt<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;123&quot;<\/span><span class=\"o\">);<\/span><span class=\"c1\">\/\/returns an integer version of &quot;123&quot;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Convert Integer To String<\/span>\r\n",





        "2":"<span class=\"n\">Integer<\/span><span class=\"o\">.<\/span><span class=\"na\">toString<\/span><span class=\"o\">(<\/span><span class=\"mi\">123<\/span><span class=\"o\">);<\/span><span class=\"c1\">\/\/returns a string version of 123<\/span>\r\n\r\n        <span class=\"c1\">\/\/ For other conversions check out the following classes:<\/span>\r\n        <span class=\"c1\">\/\/ Double<\/span>\r\n        <span class=\"c1\">\/\/ Long<\/span>\r\n        <span class=\"c1\">\/\/ String<\/span>\r\n\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n        <span class=\"c1\">\/\/ Classes And Functions<\/span>\r\n        <span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;\\n-&gt;Classes &amp; Functions&quot;<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ (definition of the Bicycle class follows)<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Use new to instantiate a class<\/span>\r\n        <span class=\"n\">Bicycle<\/span> <span class=\"n\">trek<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">Bicycle<\/span><span class=\"o\">();<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Call object methods<\/span>\r\n        <span class=\"n\">trek<\/span><span class=\"o\">.<\/span><span class=\"na\">speedUp<\/span><span class=\"o\">(<\/span><span class=\"mi\">3<\/span><span class=\"o\">);<\/span> <span class=\"c1\">\/\/ You should always use setter and getter methods<\/span>\r\n        <span class=\"n\">trek<\/span><span class=\"o\">.<\/span><span class=\"na\">setCadence<\/span><span class=\"o\">(<\/span><span class=\"mi\">100<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ toString returns this Object&#39;s string representation.<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;trek info: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">trek<\/span><span class=\"o\">.<\/span><span class=\"na\">toString<\/span><span class=\"o\">());<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Double Brace Initialization<\/span>\r\n        <span class=\"c1\">\/\/ The Java Language has no syntax for how to create static Collections<\/span>\r\n        <span class=\"c1\">\/\/ in an easy way. Usually you end up in the following way:<\/span>\r\n        <span class=\"kd\">private<\/span> <span class=\"kd\">static<\/span> <span class=\"kd\">final<\/span> <span class=\"n\">Set<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">String<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">COUNTRIES<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">HashSet<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">String<\/span><span class=\"o\">&gt;();<\/span>\r\n        <span class=\"kd\">static<\/span> <span class=\"o\">{<\/span>\r\n           <span class=\"n\">COUNTRIES<\/span><span class=\"o\">.<\/span><span class=\"na\">add<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;DENMARK&quot;<\/span><span class=\"o\">);<\/span>\r\n           <span class=\"n\">COUNTRIES<\/span><span class=\"o\">.<\/span><span class=\"na\">add<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;SWEDEN&quot;<\/span><span class=\"o\">);<\/span>\r\n           <span class=\"n\">COUNTRIES<\/span><span class=\"o\">.<\/span><span class=\"na\">add<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;FINLAND&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"o\">}<\/span>\r\n\r\n        <span class=\"c1\">\/\/ But there&#39;s a nifty way to achieve the same thing in an<\/span>\r\n        <span class=\"c1\">\/\/ easier way, by using something that is called Double Brace<\/span>\r\n        <span class=\"c1\">\/\/ Initialization.<\/span>\r\n        <span class=\"kd\">private<\/span> <span class=\"kd\">static<\/span> <span class=\"kd\">final<\/span> <span class=\"n\">Set<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">String<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">COUNTRIES<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">HashSet<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">String<\/span><span class=\"o\">&gt;()<\/span> <span class=\"o\">{{<\/span>\r\n            <span class=\"n\">add<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;DENMARK&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">add<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;SWEDEN&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">add<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;FINLAND&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"o\">}}<\/span>\r\n\r\n        <span class=\"c1\">\/\/ The first brace is creating a new AnonymousInnerClass and the<\/span>\r\n        <span class=\"c1\">\/\/ second one declares an instance initializer block. This block<\/span>\r\n        <span class=\"c1\">\/\/ is called when the anonymous inner class is created.<\/span>\r\n        <span class=\"c1\">\/\/ This does not only work for Collections, it works for all<\/span>\r\n        <span class=\"c1\">\/\/ non-final classes.<\/span>\r\n\r\n    <span class=\"o\">}<\/span> <span class=\"c1\">\/\/ End main method<\/span>\r\n<span class=\"o\">}<\/span> <span class=\"c1\">\/\/ End LearnJava class<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can include other, non-public outer-level classes in a .java file,<\/span>\r\n<span class=\"c1\">\/\/ but it is not good practice. Instead split classes into separate files.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Class Declaration Syntax:<\/span>\r\n<span class=\"c1\">\/\/ &lt;public\/private\/protected&gt; class &lt;class name&gt; {<\/span>\r\n<span class=\"c1\">\/\/    \/\/ data fields, constructors, functions all inside.<\/span>\r\n<span class=\"c1\">\/\/    \/\/ functions are called as methods in Java.<\/span>\r\n<span class=\"c1\">\/\/ }<\/span>\r\n\r\n<span class=\"kd\">class<\/span> <span class=\"nc\">Bicycle<\/span> <span class=\"o\">{<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Bicycle&#39;s Fields\/Variables<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">cadence<\/span><span class=\"o\">;<\/span> <span class=\"c1\">\/\/ Public: Can be accessed from anywhere<\/span>\r\n    <span class=\"kd\">private<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">speed<\/span><span class=\"o\">;<\/span>  <span class=\"c1\">\/\/ Private: Only accessible from within the class<\/span>\r\n    <span class=\"kd\">protected<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">gear<\/span><span class=\"o\">;<\/span> <span class=\"c1\">\/\/ Protected: Accessible from the class and subclasses<\/span>\r\n    <span class=\"n\">String<\/span> <span class=\"n\">name<\/span><span class=\"o\">;<\/span> <span class=\"c1\">\/\/ default: Only accessible from within this package<\/span>\r\n    <span class=\"kd\">static<\/span> <span class=\"n\">String<\/span> <span class=\"n\">className<\/span><span class=\"o\">;<\/span> <span class=\"c1\">\/\/ Static class variable<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Static block<\/span>\r\n    <span class=\"c1\">\/\/ Java has no implementation of static constructors, but<\/span>\r\n    <span class=\"c1\">\/\/ has a static block that can be used to initialize class variables<\/span>\r\n    <span class=\"c1\">\/\/ (static variables).<\/span>\r\n    <span class=\"c1\">\/\/ This block will be called when the class is loaded.<\/span>\r\n    <span class=\"kd\">static<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"n\">className<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;Bicycle&quot;<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Constructors are a way of creating classes<\/span>\r\n    <span class=\"c1\">\/\/ This is a constructor<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"nf\">Bicycle<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"c1\">\/\/ You can also call another constructor:<\/span>\r\n        <span class=\"c1\">\/\/ this(1, 50, 5, &quot;Bontrager&quot;);<\/span>\r\n        <span class=\"n\">gear<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">cadence<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">50<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">speed<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">name<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;Bontrager&quot;<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n    <span class=\"c1\">\/\/ This is a constructor that takes arguments<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"nf\">Bicycle<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">startCadence<\/span><span class=\"o\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">startSpeed<\/span><span class=\"o\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">startGear<\/span><span class=\"o\">,<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">name<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"k\">this<\/span><span class=\"o\">.<\/span><span class=\"na\">gear<\/span> <span class=\"o\">=<\/span> <span class=\"n\">startGear<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"k\">this<\/span><span class=\"o\">.<\/span><span class=\"na\">cadence<\/span> <span class=\"o\">=<\/span> <span class=\"n\">startCadence<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"k\">this<\/span><span class=\"o\">.<\/span><span class=\"na\">speed<\/span> <span class=\"o\">=<\/span> <span class=\"n\">startSpeed<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"k\">this<\/span><span class=\"o\">.<\/span><span class=\"na\">name<\/span> <span class=\"o\">=<\/span> <span class=\"n\">name<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Method Syntax:<\/span>\r\n    <span class=\"c1\">\/\/ &lt;public\/private\/protected&gt; &lt;return type&gt; &lt;function name&gt;(&lt;args&gt;)<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Java classes often implement getters and setters for their fields<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Method declaration syntax:<\/span>\r\n    <span class=\"c1\">\/\/ &lt;access modifier&gt; &lt;return type&gt; &lt;method name&gt;(&lt;args&gt;)<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">int<\/span> <span class=\"nf\">getCadence<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"n\">cadence<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ void methods require no return statement<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">setCadence<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">newValue<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"n\">cadence<\/span> <span class=\"o\">=<\/span> <span class=\"n\">newValue<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">setGear<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">newValue<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"n\">gear<\/span> <span class=\"o\">=<\/span> <span class=\"n\">newValue<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">speedUp<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">increment<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"n\">speed<\/span> <span class=\"o\">+=<\/span> <span class=\"n\">increment<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">slowDown<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">decrement<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"n\">speed<\/span> <span class=\"o\">-=<\/span> <span class=\"n\">decrement<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">setName<\/span><span class=\"o\">(<\/span><span class=\"n\">String<\/span> <span class=\"n\">newName<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"n\">name<\/span> <span class=\"o\">=<\/span> <span class=\"n\">newName<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"n\">String<\/span> <span class=\"nf\">getName<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"n\">name<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/Method to display the attribute values of this Object.<\/span>\r\n    <span class=\"nd\">@Override<\/span> <span class=\"c1\">\/\/ Inherited from the Object class.<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"n\">String<\/span> <span class=\"nf\">toString<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"s\">&quot;gear: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">gear<\/span> <span class=\"o\">+<\/span> <span class=\"s\">&quot; cadence: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">cadence<\/span> <span class=\"o\">+<\/span> <span class=\"s\">&quot; speed: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">speed<\/span> <span class=\"o\">+<\/span>\r\n            <span class=\"s\">&quot; name: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">name<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span> <span class=\"c1\">\/\/ end class Bicycle<\/span>\r\n\r\n<span class=\"c1\">\/\/ PennyFarthing is a subclass of Bicycle<\/span>\r\n<span class=\"kd\">class<\/span> <span class=\"nc\">PennyFarthing<\/span> <span class=\"kd\">extends<\/span> <span class=\"n\">Bicycle<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"c1\">\/\/ (Penny Farthings are those bicycles with the big front wheel.<\/span>\r\n    <span class=\"c1\">\/\/ They have no gears.)<\/span>\r\n\r\n    <span class=\"kd\">public<\/span> <span class=\"nf\">PennyFarthing<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">startCadence<\/span><span class=\"o\">,<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">startSpeed<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"c1\">\/\/ Call the parent constructor with super<\/span>\r\n        <span class=\"kd\">super<\/span><span class=\"o\">(<\/span><span class=\"n\">startCadence<\/span><span class=\"o\">,<\/span> <span class=\"n\">startSpeed<\/span><span class=\"o\">,<\/span> <span class=\"mi\">0<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;PennyFarthing&quot;<\/span><span class=\"o\">);<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ You should mark a method you&#39;re overriding with an @annotation.<\/span>\r\n    <span class=\"c1\">\/\/ To learn more about what annotations are and their purpose check this<\/span>\r\n    <span class=\"c1\">\/\/ out: http:\/\/docs.oracle.com\/javase\/tutorial\/java\/annotations\/<\/span>\r\n    <span class=\"nd\">@Override<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">setGear<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">gear<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"k\">this<\/span><span class=\"o\">.<\/span><span class=\"na\">gear<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Object casting<\/span>\r\n<span class=\"c1\">\/\/ Since the PennyFarthing class is extending the Bicycle class, we can say<\/span>\r\n<span class=\"c1\">\/\/ a PennyFarthing is a Bicycle and write :<\/span>\r\n<span class=\"c1\">\/\/ Bicycle bicycle = new PennyFarthing();<\/span>\r\n<span class=\"c1\">\/\/ This is called object casting where an object is taken for another one. There<\/span>\r\n<span class=\"c1\">\/\/ are lots of details and deals with some more intermediate concepts here:<\/span>\r\n<span class=\"c1\">\/\/ https:\/\/docs.oracle.com\/javase\/tutorial\/java\/IandI\/subclasses.html<\/span>\r\n\r\n<span class=\"c1\">\/\/ Interfaces<\/span>\r\n<span class=\"c1\">\/\/ Interface declaration syntax<\/span>\r\n<span class=\"c1\">\/\/ &lt;access-level&gt; interface &lt;interface-name&gt; extends &lt;super-interfaces&gt; {<\/span>\r\n<span class=\"c1\">\/\/     \/\/ Constants<\/span>\r\n<span class=\"c1\">\/\/     \/\/ Method declarations<\/span>\r\n<span class=\"c1\">\/\/ }<\/span>\r\n\r\n<span class=\"c1\">\/\/ Example - Food:<\/span>\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">interface<\/span> <span class=\"nc\">Edible<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">eat<\/span><span class=\"o\">();<\/span> <span class=\"c1\">\/\/ Any class that implements this interface, must<\/span>\r\n                       <span class=\"c1\">\/\/ implement this method.<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">interface<\/span> <span class=\"nc\">Digestible<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">digest<\/span><span class=\"o\">();<\/span>\r\n    <span class=\"c1\">\/\/ Since Java 8, interfaces can have default method.<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"k\">default<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">defaultMethod<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Hi from default method ...&quot;<\/span><span class=\"o\">);<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ We can now create a class that implements both of these interfaces.<\/span>\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">Fruit<\/span> <span class=\"kd\">implements<\/span> <span class=\"n\">Edible<\/span><span class=\"o\">,<\/span> <span class=\"n\">Digestible<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"nd\">@Override<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">eat<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"c1\">\/\/ ...<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"nd\">@Override<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">digest<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"c1\">\/\/ ...<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ In Java, you can extend only one class, but you can implement many<\/span>\r\n<span class=\"c1\">\/\/ interfaces. For example:<\/span>\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">ExampleClass<\/span> <span class=\"kd\">extends<\/span> <span class=\"n\">ExampleClassParent<\/span> <span class=\"kd\">implements<\/span> <span class=\"n\">InterfaceOne<\/span><span class=\"o\">,<\/span>\r\n    <span class=\"n\">InterfaceTwo<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"nd\">@Override<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">InterfaceOneMethod<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"nd\">@Override<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">InterfaceTwoMethod<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Abstract Classes<\/span>\r\n\r\n<span class=\"c1\">\/\/ Abstract Class declaration syntax<\/span>\r\n<span class=\"c1\">\/\/ &lt;access-level&gt; abstract class &lt;abstract-class-name&gt; extends<\/span>\r\n<span class=\"c1\">\/\/ &lt;super-abstract-classes&gt; {<\/span>\r\n<span class=\"c1\">\/\/     \/\/ Constants and variables<\/span>\r\n<span class=\"c1\">\/\/     \/\/ Method declarations<\/span>\r\n<span class=\"c1\">\/\/ }<\/span>\r\n\r\n<span class=\"c1\">\/\/ Abstract Classes cannot be instantiated.<\/span>\r\n<span class=\"c1\">\/\/ Abstract classes may define abstract methods.<\/span>\r\n<span class=\"c1\">\/\/ Abstract methods have no body and are marked abstract<\/span>\r\n<span class=\"c1\">\/\/ Non-abstract child classes must @Override all abstract methods<\/span>\r\n<span class=\"c1\">\/\/ from their super-classes.<\/span>\r\n<span class=\"c1\">\/\/ Abstract classes can be useful when combining repetitive logic<\/span>\r\n<span class=\"c1\">\/\/ with customised behavior, but as Abstract classes require<\/span>\r\n<span class=\"c1\">\/\/ inheritance, they violate &quot;Composition over inheritance&quot;<\/span>\r\n<span class=\"c1\">\/\/ so consider other approaches using composition.<\/span>\r\n<span class=\"c1\">\/\/ https:\/\/en.wikipedia.org\/wiki\/Composition_over_inheritance<\/span>\r\n\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">abstract<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">Animal<\/span>\r\n<span class=\"o\">{<\/span>\r\n    <span class=\"kd\">private<\/span> <span class=\"kt\">int<\/span> <span class=\"n\">age<\/span><span class=\"o\">;<\/span>\r\n\r\n    <span class=\"kd\">public<\/span> <span class=\"kd\">abstract<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">makeSound<\/span><span class=\"o\">();<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Method can have a body<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">eat<\/span><span class=\"o\">()<\/span>\r\n    <span class=\"o\">{<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;I am an animal and I am Eating.&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"c1\">\/\/ Note: We can access private variable here.<\/span>\r\n        <span class=\"n\">age<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">30<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">printAge<\/span><span class=\"o\">()<\/span>\r\n    <span class=\"o\">{<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">age<\/span><span class=\"o\">);<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Abstract classes can have main method.<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kd\">static<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">main<\/span><span class=\"o\">(<\/span><span class=\"n\">String<\/span><span class=\"o\">[]<\/span> <span class=\"n\">args<\/span><span class=\"o\">)<\/span>\r\n    <span class=\"o\">{<\/span>\r\n",




        "3":"<span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;I am abstract&quot;<\/span><span class=\"o\">);<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"kd\">class<\/span> <span class=\"nc\">Dog<\/span> <span class=\"kd\">extends<\/span> <span class=\"n\">Animal<\/span>\r\n<span class=\"o\">{<\/span>\r\n    <span class=\"c1\">\/\/ Note still have to override the abstract methods in the<\/span>\r\n    <span class=\"c1\">\/\/ abstract class.<\/span>\r\n    <span class=\"nd\">@Override<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">makeSound<\/span><span class=\"o\">()<\/span>\r\n    <span class=\"o\">{<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Bark&quot;<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"c1\">\/\/ age = 30;    ==&gt; ERROR!    age is private to Animal<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ NOTE: You will get an error if you used the<\/span>\r\n    <span class=\"c1\">\/\/ @Override annotation here, since java doesn&#39;t allow<\/span>\r\n    <span class=\"c1\">\/\/ overriding of static methods.<\/span>\r\n    <span class=\"c1\">\/\/ What is happening here is called METHOD HIDING.<\/span>\r\n    <span class=\"c1\">\/\/ Check out this SO post: http:\/\/stackoverflow.com\/questions\/16313649\/<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kd\">static<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">main<\/span><span class=\"o\">(<\/span><span class=\"n\">String<\/span><span class=\"o\">[]<\/span> <span class=\"n\">args<\/span><span class=\"o\">)<\/span>\r\n    <span class=\"o\">{<\/span>\r\n        <span class=\"n\">Dog<\/span> <span class=\"n\">pluto<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">Dog<\/span><span class=\"o\">();<\/span>\r\n        <span class=\"n\">pluto<\/span><span class=\"o\">.<\/span><span class=\"na\">makeSound<\/span><span class=\"o\">();<\/span>\r\n        <span class=\"n\">pluto<\/span><span class=\"o\">.<\/span><span class=\"na\">eat<\/span><span class=\"o\">();<\/span>\r\n        <span class=\"n\">pluto<\/span><span class=\"o\">.<\/span><span class=\"na\">printAge<\/span><span class=\"o\">();<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Final Classes<\/span>\r\n\r\n<span class=\"c1\">\/\/ Final Class declaration syntax<\/span>\r\n<span class=\"c1\">\/\/ &lt;access-level&gt; final &lt;final-class-name&gt; {<\/span>\r\n<span class=\"c1\">\/\/     \/\/ Constants and variables<\/span>\r\n<span class=\"c1\">\/\/     \/\/ Method declarations<\/span>\r\n<span class=\"c1\">\/\/ }<\/span>\r\n\r\n<span class=\"c1\">\/\/ Final classes are classes that cannot be inherited from and are therefore a<\/span>\r\n<span class=\"c1\">\/\/ final child. In a way, final classes are the opposite of abstract classes<\/span>\r\n<span class=\"c1\">\/\/ because abstract classes must be extended, but final classes cannot be<\/span>\r\n<span class=\"c1\">\/\/ extended.<\/span>\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">final<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">SaberToothedCat<\/span> <span class=\"kd\">extends<\/span> <span class=\"n\">Animal<\/span>\r\n<span class=\"o\">{<\/span>\r\n    <span class=\"c1\">\/\/ Note still have to override the abstract methods in the<\/span>\r\n    <span class=\"c1\">\/\/ abstract class.<\/span>\r\n    <span class=\"nd\">@Override<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">makeSound<\/span><span class=\"o\">()<\/span>\r\n    <span class=\"o\">{<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Roar&quot;<\/span><span class=\"o\">);<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Final Methods<\/span>\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">abstract<\/span> <span class=\"kd\">class<\/span> <span class=\"nf\">Mammal<\/span><span class=\"o\">()<\/span>\r\n<span class=\"o\">{<\/span>\r\n    <span class=\"c1\">\/\/ Final Method Syntax:<\/span>\r\n    <span class=\"c1\">\/\/ &lt;access modifier&gt; final &lt;return type&gt; &lt;function name&gt;(&lt;args&gt;)<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Final methods, like, final classes cannot be overridden by a child<\/span>\r\n    <span class=\"c1\">\/\/ class, and are therefore the final implementation of the method.<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kd\">final<\/span> <span class=\"kt\">boolean<\/span> <span class=\"nf\">isWarmBlooded<\/span><span class=\"o\">()<\/span>\r\n    <span class=\"o\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"kc\">true<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Enum Type<\/span>\r\n<span class=\"c1\">\/\/<\/span>\r\n<span class=\"c1\">\/\/ An enum type is a special data type that enables for a variable to be a set<\/span>\r\n<span class=\"c1\">\/\/ of predefined constants. The variable must be equal to one of the values<\/span>\r\n<span class=\"c1\">\/\/ that have been predefined for it. Because they are constants, the names of<\/span>\r\n<span class=\"c1\">\/\/ an enum type&#39;s fields are in uppercase letters. In the Java programming<\/span>\r\n<span class=\"c1\">\/\/ language, you define an enum type by using the enum keyword. For example,<\/span>\r\n<span class=\"c1\">\/\/ you would specify a days-of-the-week enum type as:<\/span>\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">enum<\/span> <span class=\"n\">Day<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"n\">SUNDAY<\/span><span class=\"o\">,<\/span> <span class=\"n\">MONDAY<\/span><span class=\"o\">,<\/span> <span class=\"n\">TUESDAY<\/span><span class=\"o\">,<\/span> <span class=\"n\">WEDNESDAY<\/span><span class=\"o\">,<\/span>\r\n    <span class=\"n\">THURSDAY<\/span><span class=\"o\">,<\/span> <span class=\"n\">FRIDAY<\/span><span class=\"o\">,<\/span> <span class=\"n\">SATURDAY<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ We can use our enum Day like that:<\/span>\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">EnumTest<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"c1\">\/\/ Variable Enum<\/span>\r\n    <span class=\"n\">Day<\/span> <span class=\"n\">day<\/span><span class=\"o\">;<\/span>\r\n\r\n    <span class=\"kd\">public<\/span> <span class=\"nf\">EnumTest<\/span><span class=\"o\">(<\/span><span class=\"n\">Day<\/span> <span class=\"n\">day<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"k\">this<\/span><span class=\"o\">.<\/span><span class=\"na\">day<\/span> <span class=\"o\">=<\/span> <span class=\"n\">day<\/span><span class=\"o\">;<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">tellItLikeItIs<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"k\">switch<\/span> <span class=\"o\">(<\/span><span class=\"n\">day<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"k\">case<\/span> <span class=\"n\">MONDAY<\/span><span class=\"o\">:<\/span>\r\n                <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Mondays are bad.&quot;<\/span><span class=\"o\">);<\/span>\r\n                <span class=\"k\">break<\/span><span class=\"o\">;<\/span>\r\n            <span class=\"k\">case<\/span> <span class=\"n\">FRIDAY<\/span><span class=\"o\">:<\/span>\r\n                <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Fridays are better.&quot;<\/span><span class=\"o\">);<\/span>\r\n                <span class=\"k\">break<\/span><span class=\"o\">;<\/span>\r\n            <span class=\"k\">case<\/span> <span class=\"n\">SATURDAY<\/span><span class=\"o\">:<\/span>\r\n            <span class=\"k\">case<\/span> <span class=\"n\">SUNDAY<\/span><span class=\"o\">:<\/span>\r\n                <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Weekends are best.&quot;<\/span><span class=\"o\">);<\/span>\r\n                <span class=\"k\">break<\/span><span class=\"o\">;<\/span>\r\n            <span class=\"k\">default<\/span><span class=\"o\">:<\/span>\r\n                <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Midweek days are so-so.&quot;<\/span><span class=\"o\">);<\/span>\r\n                <span class=\"k\">break<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"o\">}<\/span>\r\n    <span class=\"o\">}<\/span>\r\n\r\n    <span class=\"kd\">public<\/span> <span class=\"kd\">static<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">main<\/span><span class=\"o\">(<\/span><span class=\"n\">String<\/span><span class=\"o\">[]<\/span> <span class=\"n\">args<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"n\">EnumTest<\/span> <span class=\"n\">firstDay<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">EnumTest<\/span><span class=\"o\">(<\/span><span class=\"n\">Day<\/span><span class=\"o\">.<\/span><span class=\"na\">MONDAY<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">firstDay<\/span><span class=\"o\">.<\/span><span class=\"na\">tellItLikeItIs<\/span><span class=\"o\">();<\/span> <span class=\"c1\">\/\/ =&gt; Mondays are bad.<\/span>\r\n        <span class=\"n\">EnumTest<\/span> <span class=\"n\">thirdDay<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">EnumTest<\/span><span class=\"o\">(<\/span><span class=\"n\">Day<\/span><span class=\"o\">.<\/span><span class=\"na\">WEDNESDAY<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"n\">thirdDay<\/span><span class=\"o\">.<\/span><span class=\"na\">tellItLikeItIs<\/span><span class=\"o\">();<\/span> <span class=\"c1\">\/\/ =&gt; Midweek days are so-so.<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Enum types are much more powerful than we show above.<\/span>\r\n<span class=\"c1\">\/\/ The enum body can include methods and other fields.<\/span>\r\n<span class=\"c1\">\/\/ You can see more at https:\/\/docs.oracle.com\/javase\/tutorial\/java\/javaOO\/enum.html<\/span>\r\n\r\n<span class=\"c1\">\/\/ Getting Started with Lambda Expressions<\/span>\r\n<span class=\"c1\">\/\/<\/span>\r\n<span class=\"c1\">\/\/ New to Java version 8 are lambda expressions. Lambdas are more commonly found<\/span>\r\n<span class=\"c1\">\/\/ in functional programming languages, which means they are methods which can<\/span>\r\n<span class=\"c1\">\/\/ be created without belonging to a class, passed around as if it were itself<\/span>\r\n<span class=\"c1\">\/\/ an object, and executed on demand.<\/span>\r\n<span class=\"c1\">\/\/<\/span>\r\n<span class=\"c1\">\/\/ Final note, lambdas must implement a functional interface. A functional<\/span>\r\n<span class=\"c1\">\/\/ interface is one which has only a single abstract method declared. It can<\/span>\r\n<span class=\"c1\">\/\/ have any number of default methods. Lambda expressions can be used as an<\/span>\r\n<span class=\"c1\">\/\/ instance of that functional interface. Any interface meeting the requirements<\/span>\r\n<span class=\"c1\">\/\/ is treated as a functional interface. You can read more about interfaces<\/span>\r\n<span class=\"c1\">\/\/ above.<\/span>\r\n<span class=\"c1\">\/\/<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">java.util.Map<\/span><span class=\"o\">;<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">java.util.HashMap<\/span><span class=\"o\">;<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">java.util.function.*<\/span><span class=\"o\">;<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"nn\">java.security.SecureRandom<\/span><span class=\"o\">;<\/span>\r\n\r\n<span class=\"kd\">public<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">Lambdas<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"kd\">public<\/span> <span class=\"kd\">static<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">main<\/span><span class=\"o\">(<\/span><span class=\"n\">String<\/span><span class=\"o\">[]<\/span> <span class=\"n\">args<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n        <span class=\"c1\">\/\/ Lambda declaration syntax:<\/span>\r\n    <span class=\"c1\">\/\/ &lt;zero or more parameters&gt; -&gt; &lt;expression body or statement block&gt;<\/span>\r\n\r\n        <span class=\"c1\">\/\/ We will use this hashmap in our examples below.<\/span>\r\n        <span class=\"n\">Map<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">String<\/span><span class=\"o\">,<\/span> <span class=\"n\">String<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">planets<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">HashMap<\/span><span class=\"o\">&lt;&gt;();<\/span>\r\n            <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">put<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Mercury&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;87.969&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">put<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Venus&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;224.7&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">put<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Earth&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;365.2564&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">put<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Mars&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;687&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">put<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Jupiter&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;4,332.59&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">put<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Saturn&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;10,759&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">put<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Uranus&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;30,688.5&quot;<\/span><span class=\"o\">);<\/span>\r\n            <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">put<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Neptune&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;60,182&quot;<\/span><span class=\"o\">);<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Lambda with zero parameters using the Supplier functional interface<\/span>\r\n        <span class=\"c1\">\/\/ from java.util.function.Supplier. The actual lambda expression is<\/span>\r\n        <span class=\"c1\">\/\/ what comes after numPlanets =.<\/span>\r\n        <span class=\"n\">Supplier<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">String<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">numPlanets<\/span> <span class=\"o\">=<\/span> <span class=\"o\">()<\/span> <span class=\"o\">-&gt;<\/span> <span class=\"n\">Integer<\/span><span class=\"o\">.<\/span><span class=\"na\">toString<\/span><span class=\"o\">(<\/span><span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">size<\/span><span class=\"o\">());<\/span>\r\n        <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">format<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Number of Planets: %s\\n\\n&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">numPlanets<\/span><span class=\"o\">.<\/span><span class=\"na\">get<\/span><span class=\"o\">());<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Lambda with one parameter and using the Consumer functional interface<\/span>\r\n        <span class=\"c1\">\/\/ from java.util.function.Consumer. This is because planets is a Map,<\/span>\r\n        <span class=\"c1\">\/\/ which implements both Collection and Iterable. The forEach used here,<\/span>\r\n        <span class=\"c1\">\/\/ found in Iterable, applies the lambda expression to each member of<\/span>\r\n        <span class=\"c1\">\/\/ the Collection. The default implementation of forEach behaves as if:<\/span>\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">            for (T t : this)<\/span>\r\n<span class=\"cm\">                action.accept(t);<\/span>\r\n<span class=\"cm\">        *\/<\/span>\r\n\r\n        <span class=\"c1\">\/\/ The actual lambda expression is the parameter passed to forEach.<\/span>\r\n        <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">keySet<\/span><span class=\"o\">().<\/span><span class=\"na\">forEach<\/span><span class=\"o\">((<\/span><span class=\"n\">p<\/span><span class=\"o\">)<\/span> <span class=\"o\">-&gt;<\/span> <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">format<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;%s\\n&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">p<\/span><span class=\"o\">));<\/span>\r\n\r\n        <span class=\"c1\">\/\/ If you are only passing a single argument, then the above can also be<\/span>\r\n        <span class=\"c1\">\/\/ written as (note absent parentheses around p):<\/span>\r\n        <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">keySet<\/span><span class=\"o\">().<\/span><span class=\"na\">forEach<\/span><span class=\"o\">(<\/span><span class=\"n\">p<\/span> <span class=\"o\">-&gt;<\/span> <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">format<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;%s\\n&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">p<\/span><span class=\"o\">));<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Tracing the above, we see that planets is a HashMap, keySet() returns<\/span>\r\n        <span class=\"c1\">\/\/ a Set of its keys, forEach applies each element as the lambda <\/span>\r\n        <span class=\"c1\">\/\/ expression of: (parameter p) -&gt; System.out.format(&quot;%s\\n&quot;, p). Each<\/span>\r\n        <span class=\"c1\">\/\/ time, the element is said to be &quot;consumed&quot; and the statement(s)<\/span>\r\n        <span class=\"c1\">\/\/ referred to in the lambda body is applied. Remember the lambda body<\/span>\r\n        <span class=\"c1\">\/\/ is what comes after the -&gt;.<\/span>\r\n\r\n        <span class=\"c1\">\/\/ The above without use of lambdas would look more traditionally like:<\/span>\r\n        <span class=\"k\">for<\/span> <span class=\"o\">(<\/span><span class=\"n\">String<\/span> <span class=\"n\">planet<\/span> <span class=\"o\">:<\/span> <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">keySet<\/span><span class=\"o\">())<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">format<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;%s\\n&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">planet<\/span><span class=\"o\">);<\/span>\r\n        <span class=\"o\">}<\/span>\r\n\r\n        <span class=\"c1\">\/\/ This example differs from the above in that a different forEach<\/span>\r\n        <span class=\"c1\">\/\/ implementation is used: the forEach found in the HashMap class<\/span>\r\n        <span class=\"c1\">\/\/ implementing the Map interface. This forEach accepts a BiConsumer,<\/span>\r\n        <span class=\"c1\">\/\/ which generically speaking is a fancy way of saying it handles<\/span>\r\n        <span class=\"c1\">\/\/ the Set of each Key -&gt; Value pairs. This default implementation<\/span>\r\n        <span class=\"c1\">\/\/ behaves as if:<\/span>\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">            for (Map.Entry&lt;K, V&gt; entry : map.entrySet())<\/span>\r\n<span class=\"cm\">                action.accept(entry.getKey(), entry.getValue());<\/span>\r\n<span class=\"cm\">        *\/<\/span>\r\n\r\n        <span class=\"c1\">\/\/ The actual lambda expression is the parameter passed to forEach.<\/span>\r\n        <span class=\"n\">String<\/span> <span class=\"n\">orbits<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;%s orbits the Sun in %s Earth days.\\n&quot;<\/span><span class=\"o\">;<\/span>\r\n        <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">forEach<\/span><span class=\"o\">((<\/span><span class=\"n\">K<\/span><span class=\"o\">,<\/span> <span class=\"n\">V<\/span><span class=\"o\">)<\/span> <span class=\"o\">-&gt;<\/span> <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">format<\/span><span class=\"o\">(<\/span><span class=\"n\">orbits<\/span><span class=\"o\">,<\/span> <span class=\"n\">K<\/span><span class=\"o\">,<\/span> <span class=\"n\">V<\/span><span class=\"o\">));<\/span>\r\n\r\n        <span class=\"c1\">\/\/ The above without use of lambdas would look more traditionally like:<\/span>\r\n        <span class=\"k\">for<\/span> <span class=\"o\">(<\/span><span class=\"n\">String<\/span> <span class=\"n\">planet<\/span> <span class=\"o\">:<\/span> <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">keySet<\/span><span class=\"o\">())<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">format<\/span><span class=\"o\">(<\/span><span class=\"n\">orbits<\/span><span class=\"o\">,<\/span> <span class=\"n\">planet<\/span><span class=\"o\">,<\/span> <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">get<\/span><span class=\"o\">(<\/span><span class=\"n\">planet<\/span><span class=\"o\">));<\/span>\r\n        <span class=\"o\">}<\/span>\r\n\r\n        <span class=\"c1\">\/\/ Or, if following more closely the specification provided by the<\/span>\r\n        <span class=\"c1\">\/\/ default implementation:<\/span>\r\n        <span class=\"k\">for<\/span> <span class=\"o\">(<\/span><span class=\"n\">Map<\/span><span class=\"o\">.<\/span><span class=\"na\">Entry<\/span><span class=\"o\">&lt;<\/span><span class=\"n\">String<\/span><span class=\"o\">,<\/span> <span class=\"n\">String<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">planet<\/span> <span class=\"o\">:<\/span> <span class=\"n\">planets<\/span><span class=\"o\">.<\/span><span class=\"na\">entrySet<\/span><span class=\"o\">())<\/span> <span class=\"o\">{<\/span>\r\n            <span class=\"n\">System<\/span><span class=\"o\">.<\/span><span class=\"na\">out<\/span><span class=\"o\">.<\/span><span class=\"na\">format<\/span><span class=\"o\">(<\/span><span class=\"n\">orbits<\/span><span class=\"o\">,<\/span> <span class=\"n\">planet<\/span><span class=\"o\">.<\/span><span class=\"na\">getKey<\/span><span class=\"o\">(),<\/span> <span class=\"n\">planet<\/span><span class=\"o\">.<\/span><span class=\"na\">getValue<\/span><span class=\"o\">());<\/span>\r\n        <span class=\"o\">}<\/span>\r\n\r\n        <span class=\"c1\">\/\/ These examples cover only the very basic use of lambdas. It might not<\/span>\r\n        <span class=\"c1\">\/\/ seem like much or even very useful, but remember that a lambda can be<\/span>\r\n        <span class=\"c1\">\/\/ created as an object that can later be passed as parameters to other<\/span>\r\n        <span class=\"c1\">\/\/ methods.<\/span>\r\n    <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n"


    },













    "html5" :{ "0":"<span><\/span><span class=\"c\">&lt;!-- Comments are enclosed like this line! --&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!--<\/span>\r\n<span class=\"c\">    Comments<\/span>\r\n<span class=\"c\">    can<\/span>\r\n<span class=\"c\">    span<\/span>\r\n<span class=\"c\">    multiple<\/span>\r\n<span class=\"c\">    lines!<\/span>\r\n<span class=\"c\">--&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- #################### The Tags #################### --&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- Here is an example HTML file that we are going to analyse. --&gt;<\/span>\r\n\r\n\r\n<span class=\"cp\">&lt;!doctype html&gt;<\/span>\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">html<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">head<\/span><span class=\"p\">&gt;<\/span>\r\n            <span class=\"p\">&lt;<\/span><span class=\"nt\">title<\/span><span class=\"p\">&gt;<\/span>My Site<span class=\"p\">&lt;\/<\/span><span class=\"nt\">title<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;\/<\/span><span class=\"nt\">head<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">body<\/span><span class=\"p\">&gt;<\/span>\r\n            <span class=\"p\">&lt;<\/span><span class=\"nt\">h1<\/span><span class=\"p\">&gt;<\/span>Hello, world!<span class=\"p\">&lt;\/<\/span><span class=\"nt\">h1<\/span><span class=\"p\">&gt;<\/span>\r\n            <span class=\"p\">&lt;<\/span><span class=\"nt\">a<\/span> <span class=\"na\">href<\/span><span class=\"o\">=<\/span><span class=\"s\">&quot;http:\/\/codepen.io\/anon\/pen\/xwjLbZ&quot;<\/span><span class=\"p\">&gt;<\/span>\r\n                Come look at what this shows\r\n            <span class=\"p\">&lt;\/<\/span><span class=\"nt\">a<\/span><span class=\"p\">&gt;<\/span>\r\n            <span class=\"p\">&lt;<\/span><span class=\"nt\">p<\/span><span class=\"p\">&gt;<\/span>This is a paragraph.<span class=\"p\">&lt;\/<\/span><span class=\"nt\">p<\/span><span class=\"p\">&gt;<\/span>\r\n            <span class=\"p\">&lt;<\/span><span class=\"nt\">p<\/span><span class=\"p\">&gt;<\/span>This is another paragraph.<span class=\"p\">&lt;\/<\/span><span class=\"nt\">p<\/span><span class=\"p\">&gt;<\/span>\r\n            <span class=\"p\">&lt;<\/span><span class=\"nt\">ul<\/span><span class=\"p\">&gt;<\/span>\r\n                <span class=\"p\">&lt;<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>This is an item in a non-enumerated list (bullet list)<span class=\"p\">&lt;\/<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>\r\n                <span class=\"p\">&lt;<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>This is another item<span class=\"p\">&lt;\/<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>\r\n                <span class=\"p\">&lt;<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>And this is the last item on the list<span class=\"p\">&lt;\/<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>\r\n            <span class=\"p\">&lt;\/<\/span><span class=\"nt\">ul<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;\/<\/span><span class=\"nt\">body<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"p\">&lt;\/<\/span><span class=\"nt\">html<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!--<\/span>\r\n<span class=\"c\">    An HTML file always starts by indicating to the browser that the page is HTML.<\/span>\r\n<span class=\"c\">--&gt;<\/span>\r\n<span class=\"cp\">&lt;!doctype html&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- After this, it starts by opening an &lt;html&gt; tag. --&gt;<\/span>\r\n<span class=\"p\">&lt;<\/span><span class=\"nt\">html<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- that will be closed at the end of the file with &lt;\/html&gt;. --&gt;<\/span>\r\n<span class=\"p\">&lt;\/<\/span><span class=\"nt\">html<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- Nothing should appear after this final tag. --&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- Inside (between the opening and closing tags &lt;html&gt;&lt;\/html&gt;), we find: --&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- A header defined by &lt;head&gt; (it must be closed with &lt;\/head&gt;). --&gt;<\/span>\r\n<span class=\"c\">&lt;!--<\/span>\r\n<span class=\"c\">    The header contains some description and additional information which are not<\/span>\r\n<span class=\"c\">    displayed; this is metadata.<\/span>\r\n<span class=\"c\">--&gt;<\/span>\r\n\r\n<span class=\"p\">&lt;<\/span><span class=\"nt\">head<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"c\">&lt;!--<\/span>\r\n<span class=\"c\">        The tag &lt;title&gt; indicates to the browser the title to show in browser<\/span>\r\n<span class=\"c\">        window&#39;s title bar and tab name.<\/span>\r\n<span class=\"c\">    --&gt;<\/span>\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">title<\/span><span class=\"p\">&gt;<\/span>My Site<span class=\"p\">&lt;\/<\/span><span class=\"nt\">title<\/span><span class=\"p\">&gt;<\/span>\r\n<span class=\"p\">&lt;\/<\/span><span class=\"nt\">head<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- After the &lt;head&gt; section, we find the tag - &lt;body&gt; --&gt;<\/span>\r\n<span class=\"c\">&lt;!-- Until this point, nothing described will show up in the browser window. --&gt;<\/span>\r\n<span class=\"c\">&lt;!-- We must fill the body with the content to be displayed. --&gt;<\/span>\r\n\r\n<span class=\"p\">&lt;<\/span><span class=\"nt\">body<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"c\">&lt;!-- The h1 tag creates a title. --&gt;<\/span>\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">h1<\/span><span class=\"p\">&gt;<\/span>Hello, world!<span class=\"p\">&lt;\/<\/span><span class=\"nt\">h1<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"c\">&lt;!--<\/span>\r\n<span class=\"c\">        There are also subtitles to &lt;h1&gt; from the most important (h2) to the most<\/span>\r\n<span class=\"c\">        precise (h6).<\/span>\r\n<span class=\"c\">    --&gt;<\/span>\r\n\r\n    <span class=\"c\">&lt;!-- a hyperlink to the url given by the attribute href=&quot;&quot; --&gt;<\/span>\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">a<\/span> <span class=\"na\">href<\/span><span class=\"o\">=<\/span><span class=\"s\">&quot;http:\/\/codepen.io\/anon\/pen\/xwjLbZ&quot;<\/span><span class=\"p\">&gt;<\/span>\r\n        Come look at what this shows\r\n    <span class=\"p\">&lt;\/<\/span><span class=\"nt\">a<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n    <span class=\"c\">&lt;!-- The tag &lt;p&gt; lets us include text in the html page. --&gt;<\/span>\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">p<\/span><span class=\"p\">&gt;<\/span>This is a paragraph.<span class=\"p\">&lt;\/<\/span><span class=\"nt\">p<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">p<\/span><span class=\"p\">&gt;<\/span>This is another paragraph.<span class=\"p\">&lt;\/<\/span><span class=\"nt\">p<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n    <span class=\"c\">&lt;!-- The tag &lt;ul&gt; creates a bullet list. --&gt;<\/span>\r\n    <span class=\"c\">&lt;!--<\/span>\r\n<span class=\"c\">        To have a numbered list instead we would use &lt;ol&gt; giving 1. for the first<\/span>\r\n<span class=\"c\">        element, 2. for the second, etc.<\/span>\r\n<span class=\"c\">    --&gt;<\/span>\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">ul<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>This is an item in a non-enumerated list (bullet list)<span class=\"p\">&lt;\/<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>This is another item<span class=\"p\">&lt;\/<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>And this is the last item on the list<span class=\"p\">&lt;\/<\/span><span class=\"nt\">li<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"p\">&lt;\/<\/span><span class=\"nt\">ul<\/span><span class=\"p\">&gt;<\/span>\r\n<span class=\"p\">&lt;\/<\/span><span class=\"nt\">body<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- And that&#39;s it, creating an HTML file can be simple. --&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- But it is possible to add many additional types of HTML tags. --&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- The &lt;img \/&gt; tag is used to insert an image. --&gt;<\/span>\r\n<span class=\"c\">&lt;!--<\/span>\r\n<span class=\"c\">    The source of the image is indicated using the attribute src=&quot;&quot;<\/span>\r\n<span class=\"c\">    The source can be an URL or even path to a file on your computer.<\/span>\r\n<span class=\"c\">--&gt;<\/span>\r\n<span class=\"p\">&lt;<\/span><span class=\"nt\">img<\/span> <span class=\"na\">src<\/span><span class=\"o\">=<\/span><span class=\"s\">&quot;http:\/\/i.imgur.com\/XWG0O.gif&quot;<\/span><span class=\"p\">\/&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- It is also possible to create a table. --&gt;<\/span>\r\n\r\n<span class=\"c\">&lt;!-- We open a &lt;table&gt; element. --&gt;<\/span>\r\n<span class=\"p\">&lt;<\/span><span class=\"nt\">table<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n    <span class=\"c\">&lt;!-- &lt;tr&gt; allows us to create a row. --&gt;<\/span>\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">tr<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n        <span class=\"c\">&lt;!-- &lt;th&gt; allows us to give a title to a table column. --&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">th<\/span><span class=\"p\">&gt;<\/span>First Header<span class=\"p\">&lt;\/<\/span><span class=\"nt\">th<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">th<\/span><span class=\"p\">&gt;<\/span>Second Header<span class=\"p\">&lt;\/<\/span><span class=\"nt\">th<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"p\">&lt;\/<\/span><span class=\"nt\">tr<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">tr<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n        <span class=\"c\">&lt;!-- &lt;td&gt; allows us to create a table cell. --&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">td<\/span><span class=\"p\">&gt;<\/span>first row, first column<span class=\"p\">&lt;\/<\/span><span class=\"nt\">td<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">td<\/span><span class=\"p\">&gt;<\/span>first row, second column<span class=\"p\">&lt;\/<\/span><span class=\"nt\">td<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"p\">&lt;\/<\/span><span class=\"nt\">tr<\/span><span class=\"p\">&gt;<\/span>\r\n\r\n    <span class=\"p\">&lt;<\/span><span class=\"nt\">tr<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">td<\/span><span class=\"p\">&gt;<\/span>second row, first column<span class=\"p\">&lt;\/<\/span><span class=\"nt\">td<\/span><span class=\"p\">&gt;<\/span>\r\n        <span class=\"p\">&lt;<\/span><span class=\"nt\">td<\/span><span class=\"p\">&gt;<\/span>second row, second column<span class=\"p\">&lt;\/<\/span><span class=\"nt\">td<\/span><span class=\"p\">&gt;<\/span>\r\n    <span class=\"p\">&lt;\/<\/span><span class=\"nt\">tr<\/span><span class=\"p\">&gt;<\/span>\r\n<span class=\"p\">&lt;\/<\/span><span class=\"nt\">table<\/span><span class=\"p\">&gt;<\/span>\r\n"
    },






















    "js":{


        "0":"<span><\/span><span class=\"c1\">\/\/ Single-line comments start with two slashes.<\/span>\r\n<span class=\"cm\">\/* Multiline comments start with slash-star,<\/span>\r\n<span class=\"cm\">   and end with star-slash *\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Statements can be terminated by ;<\/span>\r\n<span class=\"nx\">doStuff<\/span><span class=\"p\">();<\/span>\r\n\r\n<span class=\"c1\">\/\/ ... but they don&#39;t have to be, as semicolons are automatically inserted<\/span>\r\n<span class=\"c1\">\/\/ wherever there&#39;s a newline, except in certain cases.<\/span>\r\n<span class=\"nx\">doStuff<\/span><span class=\"p\">()<\/span>\r\n\r\n<span class=\"c1\">\/\/ Because those cases can cause unexpected results, we&#39;ll keep on using<\/span>\r\n<span class=\"c1\">\/\/ semicolons in this guide.<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 1. Numbers, Strings and Operators<\/span>\r\n\r\n<span class=\"c1\">\/\/ JavaScript has one number type (which is a 64-bit IEEE 754 double).<\/span>\r\n<span class=\"c1\">\/\/ Doubles have a 52-bit mantissa, which is enough to store integers<\/span>\r\n<span class=\"c1\">\/\/ up to about 9\u271510\u00B9\u2075 precisely.<\/span>\r\n<span class=\"mi\">3<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 3<\/span>\r\n<span class=\"mf\">1.5<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 1.5<\/span>\r\n\r\n<span class=\"c1\">\/\/ Some basic arithmetic works as you&#39;d expect.<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 2<\/span>\r\n<span class=\"mf\">0.1<\/span> <span class=\"o\">+<\/span> <span class=\"mf\">0.2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 0.30000000000000004<\/span>\r\n<span class=\"mi\">8<\/span> <span class=\"o\">-<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 7<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 20<\/span>\r\n<span class=\"mi\">35<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 7<\/span>\r\n\r\n<span class=\"c1\">\/\/ Including uneven division.<\/span>\r\n<span class=\"mi\">5<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 2.5<\/span>\r\n\r\n<span class=\"c1\">\/\/ And modulo division.<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"o\">%<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 0<\/span>\r\n<span class=\"mi\">30<\/span> <span class=\"o\">%<\/span> <span class=\"mi\">4<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 2<\/span>\r\n<span class=\"mf\">18.5<\/span> <span class=\"o\">%<\/span> <span class=\"mi\">7<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 4.5<\/span>\r\n\r\n<span class=\"c1\">\/\/ Bitwise operations also work; when you perform a bitwise operation your float<\/span>\r\n<span class=\"c1\">\/\/ is converted to a signed int *up to* 32 bits.<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 4<\/span>\r\n\r\n<span class=\"c1\">\/\/ Precedence is enforced with parentheses.<\/span>\r\n<span class=\"p\">(<\/span><span class=\"mi\">1<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">3<\/span><span class=\"p\">)<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 8<\/span>\r\n\r\n<span class=\"c1\">\/\/ There are three special not-a-real-number values:<\/span>\r\n<span class=\"kc\">Infinity<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ result of e.g. 1\/0<\/span>\r\n<span class=\"o\">-<\/span><span class=\"kc\">Infinity<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ result of e.g. -1\/0<\/span>\r\n<span class=\"kc\">NaN<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ result of e.g. 0\/0, stands for &#39;Not a Number&#39;<\/span>\r\n\r\n<span class=\"c1\">\/\/ There&#39;s also a boolean type.<\/span>\r\n<span class=\"kc\">true<\/span><span class=\"p\">;<\/span>\r\n<span class=\"kc\">false<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Strings are created with &#39; or &quot;.<\/span>\r\n<span class=\"s1\">&#39;abc&#39;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"s2\">&quot;Hello, world&quot;<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Negation uses the ! symbol<\/span>\r\n<span class=\"o\">!<\/span><span class=\"kc\">true<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = false<\/span>\r\n<span class=\"o\">!<\/span><span class=\"kc\">false<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n\r\n<span class=\"c1\">\/\/ Equality is ===<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">===<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">===<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = false<\/span>\r\n\r\n<span class=\"c1\">\/\/ Inequality is !==<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">!==<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = false<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">!==<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n\r\n<span class=\"c1\">\/\/ More comparisons<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = false<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"mi\">2<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n\r\n<span class=\"c1\">\/\/ Strings are concatenated with +<\/span>\r\n<span class=\"s2\">&quot;Hello &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"s2\">&quot;world!&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = &quot;Hello world!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ ... which works with more than just strings<\/span>\r\n<span class=\"s2\">&quot;1, 2, &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">3<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = &quot;1, 2, 3&quot;<\/span>\r\n<span class=\"s2\">&quot;Hello &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"p\">[<\/span><span class=\"s2\">&quot;world&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;!&quot;<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ = &quot;Hello world,!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ and are compared with &lt; and &gt;<\/span>\r\n<span class=\"s2\">&quot;a&quot;<\/span> <span class=\"o\">&lt;<\/span> <span class=\"s2\">&quot;b&quot;<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n\r\n<span class=\"c1\">\/\/ Type coercion is performed for comparisons with double equals...<\/span>\r\n<span class=\"s2\">&quot;5&quot;<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n<span class=\"kc\">null<\/span> <span class=\"o\">==<\/span> <span class=\"kc\">undefined<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n\r\n<span class=\"c1\">\/\/ ...unless you use ===<\/span>\r\n<span class=\"s2\">&quot;5&quot;<\/span> <span class=\"o\">===<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = false<\/span>\r\n<span class=\"kc\">null<\/span> <span class=\"o\">===<\/span> <span class=\"kc\">undefined<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = false<\/span>\r\n\r\n<span class=\"c1\">\/\/ ...which can result in some weird behaviour...<\/span>\r\n<span class=\"mi\">13<\/span> <span class=\"o\">+<\/span> <span class=\"o\">!<\/span><span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ 14<\/span>\r\n<span class=\"s2\">&quot;13&quot;<\/span> <span class=\"o\">+<\/span> <span class=\"o\">!<\/span><span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ &#39;13true&#39;<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can access characters in a string with `charAt`<\/span>\r\n<span class=\"s2\">&quot;This is a string&quot;<\/span><span class=\"p\">.<\/span><span class=\"nx\">charAt<\/span><span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">);<\/span>  <span class=\"c1\">\/\/ = &#39;T&#39;<\/span>\r\n\r\n<span class=\"c1\">\/\/ ...or use `substring` to get larger pieces.<\/span>\r\n<span class=\"s2\">&quot;Hello world&quot;<\/span><span class=\"p\">.<\/span><span class=\"nx\">substring<\/span><span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ = &quot;Hello&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ `length` is a property, so don&#39;t use ().<\/span>\r\n<span class=\"s2\">&quot;Hello&quot;<\/span><span class=\"p\">.<\/span><span class=\"nx\">length<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 5<\/span>\r\n\r\n<span class=\"c1\">\/\/ There&#39;s also `null` and `undefined`.<\/span>\r\n<span class=\"kc\">null<\/span><span class=\"p\">;<\/span>      <span class=\"c1\">\/\/ used to indicate a deliberate non-value<\/span>\r\n<span class=\"kc\">undefined<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ used to indicate a value is not currently present (although<\/span>\r\n           <span class=\"c1\">\/\/ `undefined` is actually a value itself)<\/span>\r\n\r\n<span class=\"c1\">\/\/ false, null, undefined, NaN, 0 and &quot;&quot; are falsy; everything else is truthy.<\/span>\r\n<span class=\"c1\">\/\/ Note that 0 is falsy and &quot;0&quot; is truthy, even though 0 == &quot;0&quot;.<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 2. Variables, Arrays and Objects<\/span>\r\n\r\n<span class=\"c1\">\/\/ Variables are declared with the `var` keyword. JavaScript is dynamically<\/span>\r\n<span class=\"c1\">\/\/ typed, so you don&#39;t need to specify type. Assignment uses a single `=`<\/span>\r\n<span class=\"c1\">\/\/ character.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">someVar<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ If you leave the var keyword off, you won&#39;t get an error...<\/span>\r\n<span class=\"nx\">someOtherVar<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ ...but your variable will be created in the global scope, not in the scope<\/span>\r\n<span class=\"c1\">\/\/ you defined it in.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Variables declared without being assigned to are set to undefined.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">someThirdVar<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = undefined<\/span>\r\n\r\n<span class=\"c1\">\/\/ If you want to declare a couple of variables, then you could use a comma<\/span>\r\n<span class=\"c1\">\/\/ separator<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">someFourthVar<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"nx\">someFifthVar<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">4<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ There&#39;s shorthand for performing math operations on variables:<\/span>\r\n<span class=\"nx\">someVar<\/span> <span class=\"o\">+=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ equivalent to someVar = someVar + 5; someVar is 10 now<\/span>\r\n<span class=\"nx\">someVar<\/span> <span class=\"o\">*=<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ now someVar is 100<\/span>\r\n\r\n<span class=\"c1\">\/\/ and an even-shorter-hand for adding or subtracting 1<\/span>\r\n<span class=\"nx\">someVar<\/span><span class=\"o\">++<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ now someVar is 101<\/span>\r\n<span class=\"nx\">someVar<\/span><span class=\"o\">--<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ back to 100<\/span>\r\n\r\n<span class=\"c1\">\/\/ Arrays are ordered lists of values, of any type.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myArray<\/span> <span class=\"o\">=<\/span> <span class=\"p\">[<\/span><span class=\"s2\">&quot;Hello&quot;<\/span><span class=\"p\">,<\/span> <span class=\"mi\">45<\/span><span class=\"p\">,<\/span> <span class=\"kc\">true<\/span><span class=\"p\">];<\/span>\r\n\r\n<span class=\"c1\">\/\/ Their members can be accessed using the square-brackets subscript syntax.<\/span>\r\n<span class=\"c1\">\/\/ Array indices start at zero.<\/span>\r\n<span class=\"nx\">myArray<\/span><span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ = 45<\/span>\r\n\r\n<span class=\"c1\">\/\/ Arrays are mutable and of variable length.<\/span>\r\n<span class=\"nx\">myArray<\/span><span class=\"p\">.<\/span><span class=\"nx\">push<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;World&quot;<\/span><span class=\"p\">);<\/span>\r\n<span class=\"nx\">myArray<\/span><span class=\"p\">.<\/span><span class=\"nx\">length<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 4<\/span>\r\n\r\n",


        "1":"<span class=\"c1\">\/\/ Add\/Modify at specific index<\/span>\r\n<span class=\"nx\">myArray<\/span><span class=\"p\">[<\/span><span class=\"mi\">3<\/span><span class=\"p\">]<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;Hello&quot;<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Add and remove element from front or back end of an array<\/span>\r\n<span class=\"nx\">myArray<\/span><span class=\"p\">.<\/span><span class=\"nx\">unshift<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Add as the first element<\/span>\r\n<span class=\"nx\">someVar<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">myArray<\/span><span class=\"p\">.<\/span><span class=\"nx\">shift<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ Remove first element and return it<\/span>\r\n<span class=\"nx\">myArray<\/span><span class=\"p\">.<\/span><span class=\"nx\">push<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ Add as the last element<\/span>\r\n<span class=\"nx\">someVar<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">myArray<\/span><span class=\"p\">.<\/span><span class=\"nx\">pop<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ Remove last element and return it<\/span>\r\n\r\n<span class=\"c1\">\/\/ Join all elements of an array with semicolon<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myArray0<\/span> <span class=\"o\">=<\/span> <span class=\"p\">[<\/span><span class=\"mi\">32<\/span><span class=\"p\">,<\/span><span class=\"kc\">false<\/span><span class=\"p\">,<\/span><span class=\"s2\">&quot;js&quot;<\/span><span class=\"p\">,<\/span><span class=\"mi\">12<\/span><span class=\"p\">,<\/span><span class=\"mi\">56<\/span><span class=\"p\">,<\/span><span class=\"mi\">90<\/span><span class=\"p\">];<\/span>\r\n<span class=\"nx\">myArray0<\/span><span class=\"p\">.<\/span><span class=\"nx\">join<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;;&quot;<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ = &quot;32;false;js;12;56;90&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Get subarray of elements from index 1 (include) to 4 (exclude)<\/span>\r\n<span class=\"nx\">myArray0<\/span><span class=\"p\">.<\/span><span class=\"nx\">slice<\/span><span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span><span class=\"mi\">4<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ = [false,&quot;js&quot;,12]<\/span>\r\n\r\n<span class=\"c1\">\/\/ Remove 4 elements starting from index 2, and insert there strings<\/span>\r\n<span class=\"c1\">\/\/ &quot;hi&quot;,&quot;wr&quot; and &quot;ld&quot;; return removed subarray<\/span>\r\n<span class=\"nx\">myArray0<\/span><span class=\"p\">.<\/span><span class=\"nx\">splice<\/span><span class=\"p\">(<\/span><span class=\"mi\">2<\/span><span class=\"p\">,<\/span><span class=\"mi\">4<\/span><span class=\"p\">,<\/span><span class=\"s2\">&quot;hi&quot;<\/span><span class=\"p\">,<\/span><span class=\"s2\">&quot;wr&quot;<\/span><span class=\"p\">,<\/span><span class=\"s2\">&quot;ld&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ = [&quot;js&quot;,12,56,90]<\/span>\r\n<span class=\"c1\">\/\/ myArray0 === [32,false,&quot;hi&quot;,&quot;wr&quot;,&quot;ld&quot;]<\/span>\r\n\r\n<span class=\"c1\">\/\/ JavaScript&#39;s objects are equivalent to &quot;dictionaries&quot; or &quot;maps&quot; in other<\/span>\r\n<span class=\"c1\">\/\/ languages: an unordered collection of key-value pairs.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myObj<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"nx\">key1<\/span><span class=\"o\">:<\/span> <span class=\"s2\">&quot;Hello&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">key2<\/span><span class=\"o\">:<\/span> <span class=\"s2\">&quot;World&quot;<\/span><span class=\"p\">};<\/span>\r\n\r\n<span class=\"c1\">\/\/ Keys are strings, but quotes aren&#39;t required if they&#39;re a valid<\/span>\r\n<span class=\"c1\">\/\/ JavaScript identifier. Values can be any type.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myObj<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"nx\">myKey<\/span><span class=\"o\">:<\/span> <span class=\"s2\">&quot;myValue&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;my other key&quot;<\/span><span class=\"o\">:<\/span> <span class=\"mi\">4<\/span><span class=\"p\">};<\/span>\r\n\r\n<span class=\"c1\">\/\/ Object attributes can also be accessed using the subscript syntax,<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">[<\/span><span class=\"s2\">&quot;my other key&quot;<\/span><span class=\"p\">];<\/span> <span class=\"c1\">\/\/ = 4<\/span>\r\n\r\n<span class=\"c1\">\/\/ ... or using the dot syntax, provided the key is a valid identifier.<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myKey<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = &quot;myValue&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Objects are mutable; values can be changed and new keys added.<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myThirdKey<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">true<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ If you try to access a value that&#39;s not yet set, you&#39;ll get undefined.<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myFourthKey<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = undefined<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 3. Logic and Control Structures<\/span>\r\n\r\n<span class=\"c1\">\/\/ The `if` structure works as you&#39;d expect.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">count<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span><span class=\"p\">;<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"nx\">count<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">3<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"c1\">\/\/ evaluated if count is 3<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"k\">else<\/span> <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"nx\">count<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">4<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"c1\">\/\/ evaluated if count is 4<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"k\">else<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ evaluated if it&#39;s not either 3 or 4<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ As does `while`.<\/span>\r\n<span class=\"k\">while<\/span> <span class=\"p\">(<\/span><span class=\"kc\">true<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"c1\">\/\/ An infinite loop!<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Do-while loops are like while loops, except they always run at least once.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">input<\/span><span class=\"p\">;<\/span>\r\n<span class=\"k\">do<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">input<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">getInput<\/span><span class=\"p\">();<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"k\">while<\/span> <span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nx\">isValid<\/span><span class=\"p\">(<\/span><span class=\"nx\">input<\/span><span class=\"p\">));<\/span>\r\n\r\n<span class=\"c1\">\/\/ The `for` loop is the same as C and Java:<\/span>\r\n<span class=\"c1\">\/\/ initialization; continue condition; iteration.<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"kd\">var<\/span> <span class=\"nx\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"nx\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span> <span class=\"nx\">i<\/span><span class=\"o\">++<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"c1\">\/\/ will run 5 times<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Breaking out of labeled loops is similar to Java<\/span>\r\n<span class=\"nx\">outer<\/span><span class=\"o\">:<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"kd\">var<\/span> <span class=\"nx\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"nx\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span> <span class=\"nx\">i<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"kd\">var<\/span> <span class=\"nx\">j<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"nx\">j<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span> <span class=\"nx\">j<\/span><span class=\"o\">++<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"nx\">i<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">5<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"nx\">j<\/span> <span class=\"o\">==<\/span><span class=\"mi\">5<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n            <span class=\"k\">break<\/span> <span class=\"nx\">outer<\/span><span class=\"p\">;<\/span>\r\n            <span class=\"c1\">\/\/ breaks out of outer loop instead of only the inner one<\/span>\r\n        <span class=\"p\">}<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ The for\/in statement allows iteration over properties of an object.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">description<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">person<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span><span class=\"nx\">fname<\/span><span class=\"o\">:<\/span><span class=\"s2\">&quot;Paul&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">lname<\/span><span class=\"o\">:<\/span><span class=\"s2\">&quot;Ken&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">age<\/span><span class=\"o\">:<\/span><span class=\"mi\">18<\/span><span class=\"p\">};<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"kd\">var<\/span> <span class=\"nx\">x<\/span> <span class=\"k\">in<\/span> <span class=\"nx\">person<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"nx\">description<\/span> <span class=\"o\">+=<\/span> <span class=\"nx\">person<\/span><span class=\"p\">[<\/span><span class=\"nx\">x<\/span><span class=\"p\">]<\/span> <span class=\"o\">+<\/span> <span class=\"s2\">&quot; &quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"c1\">\/\/ description = &#39;Paul Ken 18 &#39;<\/span>\r\n\r\n<span class=\"c1\">\/\/ The for\/of statement allows iteration over iterable objects (including the built-in String, <\/span>\r\n<span class=\"c1\">\/\/ Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set, <\/span>\r\n<span class=\"c1\">\/\/ and user-defined iterables).<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myPets<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">pets<\/span> <span class=\"o\">=<\/span> <span class=\"p\">[<\/span><span class=\"s2\">&quot;cat&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;dog&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;hamster&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;hedgehog&quot;<\/span><span class=\"p\">];<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"kd\">var<\/span> <span class=\"nx\">pet<\/span> <span class=\"k\">of<\/span> <span class=\"nx\">pets<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"nx\">myPets<\/span> <span class=\"o\">+=<\/span> <span class=\"nx\">pet<\/span> <span class=\"o\">+<\/span> <span class=\"s2\">&quot; &quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span> <span class=\"c1\">\/\/ myPets = &#39;cat dog hamster hedgehog &#39;<\/span>\r\n\r\n<span class=\"c1\">\/\/ &amp;&amp; is logical and, || is logical or<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"nx\">house<\/span><span class=\"p\">.<\/span><span class=\"nx\">size<\/span> <span class=\"o\">==<\/span> <span class=\"s2\">&quot;big&quot;<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"nx\">house<\/span><span class=\"p\">.<\/span><span class=\"nx\">colour<\/span> <span class=\"o\">==<\/span> <span class=\"s2\">&quot;blue&quot;<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"nx\">house<\/span><span class=\"p\">.<\/span><span class=\"nx\">contains<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;bear&quot;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"nx\">colour<\/span> <span class=\"o\">==<\/span> <span class=\"s2\">&quot;red&quot;<\/span> <span class=\"o\">||<\/span> <span class=\"nx\">colour<\/span> <span class=\"o\">==<\/span> <span class=\"s2\">&quot;blue&quot;<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"c1\">\/\/ colour is either red or blue<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ &amp;&amp; and || &quot;short circuit&quot;, which is useful for setting default values.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">name<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">otherName<\/span> <span class=\"o\">||<\/span> <span class=\"s2\">&quot;default&quot;<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ The `switch` statement checks for equality with `===`.<\/span>\r\n<span class=\"c1\">\/\/ Use &#39;break&#39; after each case<\/span>\r\n<span class=\"c1\">\/\/ or the cases after the correct one will be executed too.<\/span>\r\n<span class=\"nx\">grade<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;B&#39;<\/span><span class=\"p\">;<\/span>\r\n<span class=\"k\">switch<\/span> <span class=\"p\">(<\/span><span class=\"nx\">grade<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"s1\">&#39;A&#39;<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"nx\">console<\/span><span class=\"p\">.<\/span><span class=\"nx\">log<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;Great job&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">break<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"s1\">&#39;B&#39;<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"nx\">console<\/span><span class=\"p\">.<\/span><span class=\"nx\">log<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;OK job&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">break<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"s1\">&#39;C&#39;<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"nx\">console<\/span><span class=\"p\">.<\/span><span class=\"nx\">log<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;You can do better&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">break<\/span><span class=\"p\">;<\/span>\r\n  <span class=\"k\">default<\/span><span class=\"o\">:<\/span>\r\n    <span class=\"nx\">console<\/span><span class=\"p\">.<\/span><span class=\"nx\">log<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;Oy vey&quot;<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"k\">break<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 4. Functions, Scope and Closures<\/span>\r\n\r\n<span class=\"c1\">\/\/ JavaScript functions are declared with the `function` keyword.<\/span>\r\n<span class=\"kd\">function<\/span> <span class=\"nx\">myFunction<\/span><span class=\"p\">(<\/span><span class=\"nx\">thing<\/span><span class=\"p\">){<\/span>\r\n",






        "2":" <span class=\"k\">return<\/span> <span class=\"nx\">thing<\/span><span class=\"p\">.<\/span><span class=\"nx\">toUpperCase<\/span><span class=\"p\">();<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"nx\">myFunction<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;foo&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ = &quot;FOO&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Note that the value to be returned must start on the same line as the<\/span>\r\n<span class=\"c1\">\/\/ `return` keyword, otherwise you&#39;ll always return `undefined` due to<\/span>\r\n<span class=\"c1\">\/\/ automatic semicolon insertion. Watch out for this when using Allman style.<\/span>\r\n<span class=\"kd\">function<\/span> <span class=\"nx\">myFunction<\/span><span class=\"p\">(){<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"c1\">\/\/ &lt;- semicolon automatically inserted here<\/span>\r\n    <span class=\"p\">{<\/span><span class=\"nx\">thisIsAn<\/span><span class=\"o\">:<\/span> <span class=\"s1\">&#39;object literal&#39;<\/span><span class=\"p\">};<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"nx\">myFunction<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = undefined<\/span>\r\n\r\n<span class=\"c1\">\/\/ JavaScript functions are first class objects, so they can be reassigned to<\/span>\r\n<span class=\"c1\">\/\/ different variable names and passed to other functions as arguments - for<\/span>\r\n<span class=\"c1\">\/\/ example, when supplying an event handler:<\/span>\r\n<span class=\"kd\">function<\/span> <span class=\"nx\">myFunction<\/span><span class=\"p\">(){<\/span>\r\n    <span class=\"c1\">\/\/ this code will be called in 5 seconds&#39; time<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"nx\">setTimeout<\/span><span class=\"p\">(<\/span><span class=\"nx\">myFunction<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5000<\/span><span class=\"p\">);<\/span>\r\n<span class=\"c1\">\/\/ Note: setTimeout isn&#39;t part of the JS language, but is provided by browsers<\/span>\r\n<span class=\"c1\">\/\/ and Node.js.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Another function provided by browsers is setInterval<\/span>\r\n<span class=\"kd\">function<\/span> <span class=\"nx\">myFunction<\/span><span class=\"p\">(){<\/span>\r\n    <span class=\"c1\">\/\/ this code will be called every 5 seconds<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"nx\">setInterval<\/span><span class=\"p\">(<\/span><span class=\"nx\">myFunction<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5000<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"c1\">\/\/ Function objects don&#39;t even have to be declared with a name - you can write<\/span>\r\n<span class=\"c1\">\/\/ an anonymous function definition directly into the arguments of another.<\/span>\r\n<span class=\"nx\">setTimeout<\/span><span class=\"p\">(<\/span><span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n    <span class=\"c1\">\/\/ this code will be called in 5 seconds&#39; time<\/span>\r\n<span class=\"p\">},<\/span> <span class=\"mi\">5000<\/span><span class=\"p\">);<\/span>\r\n\r\n<span class=\"c1\">\/\/ JavaScript has function scope; functions get their own scope but other blocks<\/span>\r\n<span class=\"c1\">\/\/ do not.<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"kc\">true<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">i<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"nx\">i<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 5 - not undefined as you&#39;d expect in a block-scoped language<\/span>\r\n\r\n<span class=\"c1\">\/\/ This has led to a common pattern of &quot;immediately-executing anonymous<\/span>\r\n<span class=\"c1\">\/\/ functions&quot;, which prevent temporary variables from leaking into the global<\/span>\r\n<span class=\"c1\">\/\/ scope.<\/span>\r\n<span class=\"p\">(<\/span><span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">temporary<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"c1\">\/\/ We can access the global scope by assigning to the &quot;global object&quot;, which<\/span>\r\n    <span class=\"c1\">\/\/ in a web browser is always `window`. The global object may have a<\/span>\r\n    <span class=\"c1\">\/\/ different name in non-browser environments such as Node.js.<\/span>\r\n    <span class=\"nb\">window<\/span><span class=\"p\">.<\/span><span class=\"nx\">permanent<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">})();<\/span>\r\n<span class=\"nx\">temporary<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ raises ReferenceError<\/span>\r\n<span class=\"nx\">permanent<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 10<\/span>\r\n\r\n<span class=\"c1\">\/\/ One of JavaScript&#39;s most powerful features is closures. If a function is<\/span>\r\n<span class=\"c1\">\/\/ defined inside another function, the inner function has access to all the<\/span>\r\n<span class=\"c1\">\/\/ outer function&#39;s variables, even after the outer function exits.<\/span>\r\n<span class=\"kd\">function<\/span> <span class=\"nx\">sayHelloInFiveSeconds<\/span><span class=\"p\">(<\/span><span class=\"nx\">name<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">prompt<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;Hello, &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"nx\">name<\/span> <span class=\"o\">+<\/span> <span class=\"s2\">&quot;!&quot;<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"c1\">\/\/ Inner functions are put in the local scope by default, as if they were<\/span>\r\n    <span class=\"c1\">\/\/ declared with `var`.<\/span>\r\n    <span class=\"kd\">function<\/span> <span class=\"nx\">inner<\/span><span class=\"p\">(){<\/span>\r\n        <span class=\"nx\">alert<\/span><span class=\"p\">(<\/span><span class=\"nx\">prompt<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"nx\">setTimeout<\/span><span class=\"p\">(<\/span><span class=\"nx\">inner<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5000<\/span><span class=\"p\">);<\/span>\r\n    <span class=\"c1\">\/\/ setTimeout is asynchronous, so the sayHelloInFiveSeconds function will<\/span>\r\n    <span class=\"c1\">\/\/ exit immediately, and setTimeout will call inner afterwards. However,<\/span>\r\n    <span class=\"c1\">\/\/ because inner is &quot;closed over&quot; sayHelloInFiveSeconds, inner still has<\/span>\r\n    <span class=\"c1\">\/\/ access to the `prompt` variable when it is finally called.<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"nx\">sayHelloInFiveSeconds<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;Adam&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ will open a popup with &quot;Hello, Adam!&quot; in 5s<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 5. More about Objects; Constructors and Prototypes<\/span>\r\n\r\n<span class=\"c1\">\/\/ Objects can contain functions.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myObj<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">myFunc<\/span><span class=\"o\">:<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"s2\">&quot;Hello world!&quot;<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myFunc<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = &quot;Hello world!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ When functions attached to an object are called, they can access the object<\/span>\r\n<span class=\"c1\">\/\/ they&#39;re attached to using the `this` keyword.<\/span>\r\n<span class=\"nx\">myObj<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">myString<\/span><span class=\"o\">:<\/span> <span class=\"s2\">&quot;Hello world!&quot;<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"nx\">myFunc<\/span><span class=\"o\">:<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"nx\">myString<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myFunc<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = &quot;Hello world!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ What this is set to has to do with how the function is called, not where<\/span>\r\n<span class=\"c1\">\/\/ it&#39;s defined. So, our function doesn&#39;t work if it isn&#39;t called in the<\/span>\r\n<span class=\"c1\">\/\/ context of the object.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myFunc<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myFunc<\/span><span class=\"p\">;<\/span>\r\n<span class=\"nx\">myFunc<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = undefined<\/span>\r\n\r\n<span class=\"c1\">\/\/ Inversely, a function can be assigned to the object and gain access to it<\/span>\r\n<span class=\"c1\">\/\/ through `this`, even if it wasn&#39;t attached when it was defined.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myOtherFunc<\/span> <span class=\"o\">=<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"nx\">myString<\/span><span class=\"p\">.<\/span><span class=\"nx\">toUpperCase<\/span><span class=\"p\">();<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myOtherFunc<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">myOtherFunc<\/span><span class=\"p\">;<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myOtherFunc<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = &quot;HELLO WORLD!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ We can also specify a context for a function to execute in when we invoke it<\/span>\r\n<span class=\"c1\">\/\/ using `call` or `apply`.<\/span>\r\n\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">anotherFunc<\/span> <span class=\"o\">=<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(<\/span><span class=\"nx\">s<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"nx\">myString<\/span> <span class=\"o\">+<\/span> <span class=\"nx\">s<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"nx\">anotherFunc<\/span><span class=\"p\">.<\/span><span class=\"nx\">call<\/span><span class=\"p\">(<\/span><span class=\"nx\">myObj<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot; And Hello Moon!&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ = &quot;Hello World! And Hello Moon!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ The `apply` function is nearly identical, but takes an array for an argument<\/span>\r\n<span class=\"c1\">\/\/ list.<\/span>\r\n\r\n<span class=\"nx\">anotherFunc<\/span><span class=\"p\">.<\/span><span class=\"nx\">apply<\/span><span class=\"p\">(<\/span><span class=\"nx\">myObj<\/span><span class=\"p\">,<\/span> <span class=\"p\">[<\/span><span class=\"s2\">&quot; And Hello Sun!&quot;<\/span><span class=\"p\">]);<\/span> <span class=\"c1\">\/\/ = &quot;Hello World! And Hello Sun!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ This is useful when working with a function that accepts a sequence of<\/span>\r\n<span class=\"c1\">\/\/ arguments and you want to pass an array.<\/span>\r\n\r\n<span class=\"nb\">Math<\/span><span class=\"p\">.<\/span><span class=\"nx\">min<\/span><span class=\"p\">(<\/span><span class=\"mi\">42<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">,<\/span> <span class=\"mi\">27<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ = 6<\/span>\r\n<span class=\"nb\">Math<\/span><span class=\"p\">.<\/span><span class=\"nx\">min<\/span><span class=\"p\">([<\/span><span class=\"mi\">42<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">,<\/span> <span class=\"mi\">27<\/span><span class=\"p\">]);<\/span> <span class=\"c1\">\/\/ = NaN (uh-oh!)<\/span>\r\n<span class=\"nb\">Math<\/span><span class=\"p\">.<\/span><span class=\"nx\">min<\/span><span class=\"p\">.<\/span><span class=\"nx\">apply<\/span><span class=\"p\">(<\/span><span class=\"nb\">Math<\/span><span class=\"p\">,<\/span> <span class=\"p\">[<\/span><span class=\"mi\">42<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">,<\/span> <span class=\"mi\">27<\/span><span class=\"p\">]);<\/span> <span class=\"c1\">\/\/ = 6<\/span>\r\n\r\n<span class=\"c1\">\/\/ But, `call` and `apply` are only temporary. When we want it to stick, we can<\/span>\r\n<span class=\"c1\">\/\/ use `bind`.<\/span>\r\n\r\n",


        "3":"<span class=\"kd\">var<\/span> <span class=\"nx\">boundFunc<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">anotherFunc<\/span><span class=\"p\">.<\/span><span class=\"nx\">bind<\/span><span class=\"p\">(<\/span><span class=\"nx\">myObj<\/span><span class=\"p\">);<\/span>\r\n<span class=\"nx\">boundFunc<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot; And Hello Saturn!&quot;<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ = &quot;Hello World! And Hello Saturn!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ `bind` can also be used to partially apply (curry) a function.<\/span>\r\n\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">product<\/span> <span class=\"o\">=<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(<\/span><span class=\"nx\">a<\/span><span class=\"p\">,<\/span> <span class=\"nx\">b<\/span><span class=\"p\">){<\/span> <span class=\"k\">return<\/span> <span class=\"nx\">a<\/span> <span class=\"o\">*<\/span> <span class=\"nx\">b<\/span><span class=\"p\">;<\/span> <span class=\"p\">};<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">doubler<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">product<\/span><span class=\"p\">.<\/span><span class=\"nx\">bind<\/span><span class=\"p\">(<\/span><span class=\"k\">this<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">);<\/span>\r\n<span class=\"nx\">doubler<\/span><span class=\"p\">(<\/span><span class=\"mi\">8<\/span><span class=\"p\">);<\/span> <span class=\"c1\">\/\/ = 16<\/span>\r\n\r\n<span class=\"c1\">\/\/ When you call a function with the `new` keyword, a new object is created, and<\/span>\r\n<span class=\"c1\">\/\/ made available to the function via the `this` keyword. Functions designed to be<\/span>\r\n<span class=\"c1\">\/\/ called like that are called constructors.<\/span>\r\n\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">MyConstructor<\/span> <span class=\"o\">=<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n    <span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"nx\">myNumber<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"nx\">myNewObj<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"nx\">MyConstructor<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = {myNumber: 5}<\/span>\r\n<span class=\"nx\">myNewObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myNumber<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 5<\/span>\r\n\r\n<span class=\"c1\">\/\/ Unlike most other popular object-oriented languages, JavaScript has no<\/span>\r\n<span class=\"c1\">\/\/ concept of &#39;instances&#39; created from &#39;class&#39; blueprints; instead, JavaScript<\/span>\r\n<span class=\"c1\">\/\/ combines instantiation and inheritance into a single concept: a &#39;prototype&#39;.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Every JavaScript object has a &#39;prototype&#39;. When you go to access a property<\/span>\r\n<span class=\"c1\">\/\/ on an object that doesn&#39;t exist on the actual object, the interpreter will<\/span>\r\n<span class=\"c1\">\/\/ look at its prototype.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Some JS implementations let you access an object&#39;s prototype on the magic<\/span>\r\n<span class=\"c1\">\/\/ property `__proto__`. While this is useful for explaining prototypes it&#39;s not<\/span>\r\n<span class=\"c1\">\/\/ part of the standard; we&#39;ll get to standard ways of using prototypes later.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myObj<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">myString<\/span><span class=\"o\">:<\/span> <span class=\"s2\">&quot;Hello world!&quot;<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myPrototype<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">meaningOfLife<\/span><span class=\"o\">:<\/span> <span class=\"mi\">42<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"nx\">myFunc<\/span><span class=\"o\">:<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"nx\">myString<\/span><span class=\"p\">.<\/span><span class=\"nx\">toLowerCase<\/span><span class=\"p\">();<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">};<\/span>\r\n\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">__proto__<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">myPrototype<\/span><span class=\"p\">;<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">meaningOfLife<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 42<\/span>\r\n\r\n<span class=\"c1\">\/\/ This works for functions, too.<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myFunc<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = &quot;hello world!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Of course, if your property isn&#39;t on your prototype, the prototype&#39;s<\/span>\r\n<span class=\"c1\">\/\/ prototype is searched, and so on.<\/span>\r\n<span class=\"nx\">myPrototype<\/span><span class=\"p\">.<\/span><span class=\"nx\">__proto__<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">myBoolean<\/span><span class=\"o\">:<\/span> <span class=\"kc\">true<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">myBoolean<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n\r\n<span class=\"c1\">\/\/ There&#39;s no copying involved here; each object stores a reference to its<\/span>\r\n<span class=\"c1\">\/\/ prototype. This means we can alter the prototype and our changes will be<\/span>\r\n<span class=\"c1\">\/\/ reflected everywhere.<\/span>\r\n<span class=\"nx\">myPrototype<\/span><span class=\"p\">.<\/span><span class=\"nx\">meaningOfLife<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">43<\/span><span class=\"p\">;<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">meaningOfLife<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 43<\/span>\r\n\r\n<span class=\"c1\">\/\/ The for\/in statement allows iteration over properties of an object,<\/span>\r\n<span class=\"c1\">\/\/ walking up the prototype chain until it sees a null prototype.<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"kd\">var<\/span> <span class=\"nx\">x<\/span> <span class=\"k\">in<\/span> <span class=\"nx\">myObj<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"nx\">console<\/span><span class=\"p\">.<\/span><span class=\"nx\">log<\/span><span class=\"p\">(<\/span><span class=\"nx\">myObj<\/span><span class=\"p\">[<\/span><span class=\"nx\">x<\/span><span class=\"p\">]);<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"c1\">\/\/\/prints:<\/span>\r\n<span class=\"c1\">\/\/ Hello world!<\/span>\r\n<span class=\"c1\">\/\/ 43<\/span>\r\n<span class=\"c1\">\/\/ [Function: myFunc]<\/span>\r\n<span class=\"c1\">\/\/ true<\/span>\r\n\r\n<span class=\"c1\">\/\/ To only consider properties attached to the object itself<\/span>\r\n<span class=\"c1\">\/\/ and not its prototypes, use the `hasOwnProperty()` check.<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"p\">(<\/span><span class=\"kd\">var<\/span> <span class=\"nx\">x<\/span> <span class=\"k\">in<\/span> <span class=\"nx\">myObj<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">hasOwnProperty<\/span><span class=\"p\">(<\/span><span class=\"nx\">x<\/span><span class=\"p\">)){<\/span>\r\n        <span class=\"nx\">console<\/span><span class=\"p\">.<\/span><span class=\"nx\">log<\/span><span class=\"p\">(<\/span><span class=\"nx\">myObj<\/span><span class=\"p\">[<\/span><span class=\"nx\">x<\/span><span class=\"p\">]);<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"c1\">\/\/\/prints:<\/span>\r\n<span class=\"c1\">\/\/ Hello world!<\/span>\r\n\r\n<span class=\"c1\">\/\/ We mentioned that `__proto__` was non-standard, and there&#39;s no standard way to<\/span>\r\n<span class=\"c1\">\/\/ change the prototype of an existing object. However, there are two ways to<\/span>\r\n<span class=\"c1\">\/\/ create a new object with a given prototype.<\/span>\r\n\r\n<span class=\"c1\">\/\/ The first is Object.create, which is a recent addition to JS, and therefore<\/span>\r\n<span class=\"c1\">\/\/ not available in all implementations yet.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myObj<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">Object<\/span><span class=\"p\">.<\/span><span class=\"nx\">create<\/span><span class=\"p\">(<\/span><span class=\"nx\">myPrototype<\/span><span class=\"p\">);<\/span>\r\n<span class=\"nx\">myObj<\/span><span class=\"p\">.<\/span><span class=\"nx\">meaningOfLife<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = 43<\/span>\r\n\r\n<span class=\"c1\">\/\/ The second way, which works anywhere, has to do with constructors.<\/span>\r\n<span class=\"c1\">\/\/ Constructors have a property called prototype. This is *not* the prototype of<\/span>\r\n<span class=\"c1\">\/\/ the constructor function itself; instead, it&#39;s the prototype that new objects<\/span>\r\n<span class=\"c1\">\/\/ are given when they&#39;re created with that constructor and the new keyword.<\/span>\r\n<span class=\"nx\">MyConstructor<\/span><span class=\"p\">.<\/span><span class=\"nx\">prototype<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">myNumber<\/span><span class=\"o\">:<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"nx\">getMyNumber<\/span><span class=\"o\">:<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"nx\">myNumber<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myNewObj2<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"nx\">MyConstructor<\/span><span class=\"p\">();<\/span>\r\n<span class=\"nx\">myNewObj2<\/span><span class=\"p\">.<\/span><span class=\"nx\">getMyNumber<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = 5<\/span>\r\n<span class=\"nx\">myNewObj2<\/span><span class=\"p\">.<\/span><span class=\"nx\">myNumber<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">6<\/span><span class=\"p\">;<\/span>\r\n<span class=\"nx\">myNewObj2<\/span><span class=\"p\">.<\/span><span class=\"nx\">getMyNumber<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = 6<\/span>\r\n\r\n<span class=\"c1\">\/\/ Built-in types like strings and numbers also have constructors that create<\/span>\r\n<span class=\"c1\">\/\/ equivalent wrapper objects.<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myNumber<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">12<\/span><span class=\"p\">;<\/span>\r\n<span class=\"kd\">var<\/span> <span class=\"nx\">myNumberObj<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"nb\">Number<\/span><span class=\"p\">(<\/span><span class=\"mi\">12<\/span><span class=\"p\">);<\/span>\r\n<span class=\"nx\">myNumber<\/span> <span class=\"o\">==<\/span> <span class=\"nx\">myNumberObj<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = true<\/span>\r\n\r\n<span class=\"c1\">\/\/ Except, they aren&#39;t exactly equivalent.<\/span>\r\n<span class=\"k\">typeof<\/span> <span class=\"nx\">myNumber<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = &#39;number&#39;<\/span>\r\n<span class=\"k\">typeof<\/span> <span class=\"nx\">myNumberObj<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = &#39;object&#39;<\/span>\r\n<span class=\"nx\">myNumber<\/span> <span class=\"o\">===<\/span> <span class=\"nx\">myNumberObj<\/span><span class=\"p\">;<\/span> <span class=\"c1\">\/\/ = false<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">){<\/span>\r\n    <span class=\"c1\">\/\/ This code won&#39;t execute, because 0 is falsy.<\/span>\r\n<span class=\"p\">}<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"k\">new<\/span> <span class=\"nb\">Number<\/span><span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">)){<\/span>\r\n   <span class=\"c1\">\/\/ This code will execute, because wrapped numbers are objects, and objects<\/span>\r\n   <span class=\"c1\">\/\/ are always truthy.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ However, the wrapper objects and the regular builtins share a prototype, so<\/span>\r\n<span class=\"c1\">\/\/ you can actually add functionality to a string, for instance.<\/span>\r\n<span class=\"nb\">String<\/span><span class=\"p\">.<\/span><span class=\"nx\">prototype<\/span><span class=\"p\">.<\/span><span class=\"nx\">firstCharacter<\/span> <span class=\"o\">=<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(){<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"nx\">charAt<\/span><span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">);<\/span>\r\n<span class=\"p\">};<\/span>\r\n<span class=\"s2\">&quot;abc&quot;<\/span><span class=\"p\">.<\/span><span class=\"nx\">firstCharacter<\/span><span class=\"p\">();<\/span> <span class=\"c1\">\/\/ = &quot;a&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ This fact is often used in &quot;polyfilling&quot;, which is implementing newer<\/span>\r\n<span class=\"c1\">\/\/ features of JavaScript in an older subset of JavaScript, so that they can be<\/span>\r\n<span class=\"c1\">\/\/ used in older environments such as outdated browsers.<\/span>\r\n\r\n<span class=\"c1\">\/\/ For instance, we mentioned that Object.create isn&#39;t yet available in all<\/span>\r\n<span class=\"c1\">\/\/ implementations, but we can still use it with this polyfill:<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"nb\">Object<\/span><span class=\"p\">.<\/span><span class=\"nx\">create<\/span> <span class=\"o\">===<\/span> <span class=\"kc\">undefined<\/span><span class=\"p\">){<\/span> <span class=\"c1\">\/\/ don&#39;t overwrite it if it exists<\/span>\r\n    <span class=\"nb\">Object<\/span><span class=\"p\">.<\/span><span class=\"nx\">create<\/span> <span class=\"o\">=<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(<\/span><span class=\"nx\">proto<\/span><span class=\"p\">){<\/span>\r\n        <span class=\"c1\">\/\/ make a temporary constructor with the right prototype<\/span>\r\n        <span class=\"kd\">var<\/span> <span class=\"nx\">Constructor<\/span> <span class=\"o\">=<\/span> <span class=\"kd\">function<\/span><span class=\"p\">(){};<\/span>\r\n        <span class=\"nx\">Constructor<\/span><span class=\"p\">.<\/span><span class=\"nx\">prototype<\/span> <span class=\"o\">=<\/span> <span class=\"nx\">proto<\/span><span class=\"p\">;<\/span>\r\n        <span class=\"c1\">\/\/ then use it to create a new, appropriately-prototyped object<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"k\">new<\/span> <span class=\"nx\">Constructor<\/span><span class=\"p\">();<\/span>\r\n    <span class=\"p\">};<\/span>\r\n<span class=\"p\">}<\/span>\r\n"
    },




















    "ruby":{
        "0":"<span><\/span><span class=\"c1\"># This is a comment<\/span>\r\n\r\n<span class=\"c1\"># In Ruby, (almost) everything is an object.<\/span>\r\n<span class=\"c1\"># This includes numbers...<\/span>\r\n<span class=\"mi\">3<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; Integer<\/span>\r\n\r\n<span class=\"c1\"># ...and strings...<\/span>\r\n<span class=\"s2\">&quot;Hello&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; String<\/span>\r\n\r\n<span class=\"c1\"># ...and even methods!<\/span>\r\n<span class=\"s2\">&quot;Hello&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">method<\/span><span class=\"p\">(<\/span><span class=\"ss\">:class<\/span><span class=\"p\">)<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; Method<\/span>\r\n\r\n<span class=\"c1\"># Some basic arithmetic<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; 2<\/span>\r\n<span class=\"mi\">8<\/span> <span class=\"o\">-<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; 7<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span> <span class=\"c1\">#=&gt; 20<\/span>\r\n<span class=\"mi\">35<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 7<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">**<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 32<\/span>\r\n<span class=\"mi\">5<\/span> <span class=\"o\">%<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">#=&gt; 2<\/span>\r\n\r\n<span class=\"c1\"># Bitwise operators<\/span>\r\n<span class=\"mi\">3<\/span> <span class=\"o\">&amp;<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 1<\/span>\r\n<span class=\"mi\">3<\/span> <span class=\"o\">|<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 7<\/span>\r\n<span class=\"mi\">3<\/span> <span class=\"o\">^<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 6<\/span>\r\n\r\n<span class=\"c1\"># Arithmetic is just syntactic sugar<\/span>\r\n<span class=\"c1\"># for calling a method on an object<\/span>\r\n<span class=\"mi\">1<\/span><span class=\"o\">.<\/span><span class=\"n n-Operator\">+<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; 4<\/span>\r\n<span class=\"mi\">10<\/span><span class=\"o\">.<\/span><span class=\"n n-Operator\">*<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 50<\/span>\r\n<span class=\"mi\">100<\/span><span class=\"o\">.<\/span><span class=\"n\">methods<\/span><span class=\"o\">.<\/span><span class=\"n\">include?<\/span><span class=\"p\">(<\/span><span class=\"ss\">:\/<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># Special values are objects<\/span>\r\n<span class=\"kp\">nil<\/span> <span class=\"c1\"># equivalent to null in other languages<\/span>\r\n<span class=\"kp\">true<\/span> <span class=\"c1\"># truth<\/span>\r\n<span class=\"kp\">false<\/span> <span class=\"c1\"># falsehood<\/span>\r\n\r\n<span class=\"kp\">nil<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; NilClass<\/span>\r\n<span class=\"kp\">true<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; TrueClass<\/span>\r\n<span class=\"kp\">false<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; FalseClass<\/span>\r\n\r\n<span class=\"c1\"># Equality<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n\r\n<span class=\"c1\"># Inequality<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">!=<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">!=<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># Apart from false itself, nil is the only other &#39;falsey&#39; value<\/span>\r\n\r\n<span class=\"o\">!!<\/span><span class=\"kp\">nil<\/span>   <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"o\">!!<\/span><span class=\"kp\">false<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"o\">!!<\/span><span class=\"mi\">0<\/span>     <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"o\">!!<\/span><span class=\"s2\">&quot;&quot;<\/span>    <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># More comparisons<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">2<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"mi\">2<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># Combined comparison operator (returns `1` when the first argument is greater, <\/span>\r\n<span class=\"c1\"># `-1` when the second argument is greater, and `0` otherwise)<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;=&gt;<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">#=&gt; -1 (1 &lt; 10)<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"o\">&lt;=&gt;<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; 1 (10 &gt; 1)<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">&lt;=&gt;<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">#=&gt; 0 (1 == 1)<\/span>\r\n\r\n<span class=\"c1\"># Logical operators<\/span>\r\n<span class=\"kp\">true<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"kp\">false<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"kp\">true<\/span> <span class=\"o\">||<\/span> <span class=\"kp\">false<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># There are alternate versions of the logical operators with much lower<\/span>\r\n<span class=\"c1\"># precedence. These are meant to be used as flow-control constructs to chain<\/span>\r\n<span class=\"c1\"># statements together until one of them returns true or false.<\/span>\r\n\r\n<span class=\"c1\"># `do_something_else` only called if `do_something` succeeds.<\/span>\r\n<span class=\"n\">do_something<\/span><span class=\"p\">()<\/span> <span class=\"ow\">and<\/span> <span class=\"n\">do_something_else<\/span><span class=\"p\">()<\/span>\r\n<span class=\"c1\"># `log_error` only called if `do_something` fails.<\/span>\r\n<span class=\"n\">do_something<\/span><span class=\"p\">()<\/span> <span class=\"ow\">or<\/span> <span class=\"n\">log_error<\/span><span class=\"p\">()<\/span>\r\n\r\n<span class=\"c1\"># String interpolation<\/span>\r\n\r\n<span class=\"n\">placeholder<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;use string interpolation&#39;<\/span>\r\n<span class=\"s2\">&quot;I can <\/span><span class=\"si\">#{<\/span><span class=\"n\">placeholder<\/span><span class=\"si\">}<\/span><span class=\"s2\"> when using double quoted strings&quot;<\/span>\r\n<span class=\"c1\">#=&gt; &quot;I can use string interpolation when using double quoted strings&quot;<\/span>\r\n\r\n<span class=\"c1\"># You can combine strings using `+`, but not with other types<\/span>\r\n<span class=\"s1\">&#39;hello &#39;<\/span> <span class=\"o\">+<\/span> <span class=\"s1\">&#39;world&#39;<\/span>  <span class=\"c1\">#=&gt; &quot;hello world&quot;<\/span>\r\n<span class=\"s1\">&#39;hello &#39;<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">#=&gt; TypeError: can&#39;t convert Fixnum into String<\/span>\r\n<span class=\"s1\">&#39;hello &#39;<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">3<\/span><span class=\"o\">.<\/span><span class=\"n\">to_s<\/span> <span class=\"c1\">#=&gt; &quot;hello 3&quot;<\/span>\r\n<span class=\"s2\">&quot;hello <\/span><span class=\"si\">#{<\/span><span class=\"mi\">3<\/span><span class=\"si\">}<\/span><span class=\"s2\">&quot;<\/span> <span class=\"c1\">#=&gt; &quot;hello 3&quot;<\/span>\r\n\r\n<span class=\"c1\"># ...or combine strings and operators<\/span>\r\n<span class=\"s1\">&#39;hello &#39;<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">#=&gt; &quot;hello hello hello &quot;<\/span>\r\n\r\n<span class=\"c1\"># ...or append to string<\/span>\r\n<span class=\"s1\">&#39;hello&#39;<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"s1\">&#39; world&#39;<\/span> <span class=\"c1\">#=&gt; &quot;hello world&quot;<\/span>\r\n\r\n<span class=\"c1\"># You can print to the output with a newline at the end<\/span>\r\n<span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;I&#39;m printing!&quot;<\/span>\r\n<span class=\"c1\">#=&gt; I&#39;m printing!<\/span>\r\n<span class=\"c1\">#=&gt; nil<\/span>\r\n\r\n<span class=\"c1\"># ...or print to the output without a newline<\/span>\r\n<span class=\"nb\">print<\/span> <span class=\"s2\">&quot;I&#39;m printing!&quot;<\/span>\r\n<span class=\"c1\">#=&gt; &quot;I&#39;m printing!&quot; =&gt; nil<\/span>\r\n\r\n<span class=\"c1\"># Variables<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">25<\/span> <span class=\"c1\">#=&gt; 25<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"c1\">#=&gt; 25<\/span>\r\n\r\n<span class=\"c1\"># Note that assignment returns the value assigned.<\/span>\r\n<span class=\"c1\"># This means you can do multiple assignment.<\/span>\r\n\r\n<span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">#=&gt; 10<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"c1\">#=&gt; 10<\/span>\r\n<span class=\"n\">y<\/span> <span class=\"c1\">#=&gt; 10<\/span>\r\n\r\n<span class=\"c1\"># By convention, use snake_case for variable names.<\/span>\r\n<span class=\"n\">snake_case<\/span> <span class=\"o\">=<\/span> <span class=\"kp\">true<\/span>\r\n\r\n<span class=\"c1\"># Use descriptive variable names<\/span>\r\n<span class=\"n\">path_to_project_root<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;\/good\/name\/&#39;<\/span>\r\n<span class=\"n\">m<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;\/bad\/name\/&#39;<\/span>\r\n\r\n<span class=\"c1\"># Symbols are immutable, reusable constants represented internally by an<\/span>\r\n",







        "1":"<span class=\"c1\"># integer value. They&#39;re often used instead of strings to efficiently convey<\/span>\r\n<span class=\"c1\"># specific, meaningful values.<\/span>\r\n\r\n<span class=\"ss\">:pending<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; Symbol<\/span>\r\n\r\n<span class=\"n\">status<\/span> <span class=\"o\">=<\/span> <span class=\"ss\">:pending<\/span>\r\n\r\n<span class=\"n\">status<\/span> <span class=\"o\">==<\/span> <span class=\"ss\">:pending<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"n\">status<\/span> <span class=\"o\">==<\/span> <span class=\"s1\">&#39;pending&#39;<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n\r\n<span class=\"n\">status<\/span> <span class=\"o\">==<\/span> <span class=\"ss\">:approved<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n\r\n<span class=\"c1\"># Strings can be converted into symbols and vice versa.<\/span>\r\n<span class=\"n\">status<\/span><span class=\"o\">.<\/span><span class=\"n\">to_s<\/span> <span class=\"c1\">#=&gt; &quot;pending&quot;<\/span>\r\n<span class=\"s2\">&quot;argon&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">to_sym<\/span> <span class=\"c1\">#=&gt; :argon<\/span>\r\n\r\n<span class=\"c1\"># Arrays<\/span>\r\n\r\n<span class=\"c1\"># This is an array.<\/span>\r\n<span class=\"n\">array<\/span> <span class=\"o\">=<\/span> <span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; [1, 2, 3, 4, 5]<\/span>\r\n\r\n<span class=\"c1\"># Arrays can contain different types of items.<\/span>\r\n<span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"s1\">&#39;hello&#39;<\/span><span class=\"p\">,<\/span> <span class=\"kp\">false<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; [1, &quot;hello&quot;, false]<\/span>\r\n\r\n<span class=\"c1\"># Arrays can be indexed.<\/span>\r\n<span class=\"c1\"># From the front...<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">[<\/span><span class=\"mi\">0<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; 1<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n\">first<\/span> <span class=\"c1\">#=&gt; 1<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">[<\/span><span class=\"mi\">12<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; nil<\/span>\r\n\r\n<span class=\"c1\"># ...or from the back...<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">[-<\/span><span class=\"mi\">1<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; 5<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n\">last<\/span> <span class=\"c1\">#=&gt; 5<\/span>\r\n\r\n<span class=\"c1\"># ...or with a start index and length...<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">[<\/span><span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; [3, 4, 5]<\/span>\r\n\r\n<span class=\"c1\"># ...or with a range...<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"o\">..<\/span><span class=\"mi\">3<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; [2, 3, 4]<\/span>\r\n\r\n<span class=\"c1\"># You can reverse an Array.<\/span>\r\n<span class=\"c1\"># Return a new array with reversed values<\/span>\r\n<span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span><span class=\"mi\">2<\/span><span class=\"p\">,<\/span><span class=\"mi\">3<\/span><span class=\"o\">].<\/span><span class=\"n\">reverse<\/span> <span class=\"c1\">#=&gt; [3,2,1]<\/span>\r\n<span class=\"c1\"># Reverse an array in place to update variable with reversed values<\/span>\r\n<span class=\"n\">a<\/span> <span class=\"o\">=<\/span> <span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span><span class=\"mi\">2<\/span><span class=\"p\">,<\/span><span class=\"mi\">3<\/span><span class=\"o\">]<\/span>\r\n<span class=\"n\">a<\/span><span class=\"o\">.<\/span><span class=\"n\">reverse!<\/span> <span class=\"c1\">#=&gt; a==[3,2,1] because of the bang (&#39;!&#39;) call to reverse<\/span>\r\n\r\n<span class=\"c1\"># Like arithmetic, [var] access is just syntactic sugar<\/span>\r\n<span class=\"c1\"># for calling a method &#39;[]&#39; on an object.<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n n-Operator\">[]<\/span> <span class=\"mi\">0<\/span> <span class=\"c1\">#=&gt; 1<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n n-Operator\">[]<\/span> <span class=\"mi\">12<\/span> <span class=\"c1\">#=&gt; nil<\/span>\r\n\r\n<span class=\"c1\"># You can add to an array...<\/span>\r\n<span class=\"n\">array<\/span> <span class=\"o\">&lt;&lt;<\/span> <span class=\"mi\">6<\/span> <span class=\"c1\">#=&gt; [1, 2, 3, 4, 5, 6]<\/span>\r\n<span class=\"c1\"># Or like this<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n\">push<\/span><span class=\"p\">(<\/span><span class=\"mi\">6<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; [1, 2, 3, 4, 5, 6]<\/span>\r\n\r\n<span class=\"c1\"># ...and check if an item exists in an array<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n\">include?<\/span><span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># Hashes are Ruby&#39;s primary dictionary with key\/value pairs.<\/span>\r\n<span class=\"c1\"># Hashes are denoted with curly braces.<\/span>\r\n<span class=\"nb\">hash<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span> <span class=\"s1\">&#39;color&#39;<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">&#39;green&#39;<\/span><span class=\"p\">,<\/span> <span class=\"s1\">&#39;number&#39;<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"mi\">5<\/span> <span class=\"p\">}<\/span>\r\n\r\n<span class=\"nb\">hash<\/span><span class=\"o\">.<\/span><span class=\"n\">keys<\/span> <span class=\"c1\">#=&gt; [&#39;color&#39;, &#39;number&#39;]<\/span>\r\n\r\n<span class=\"c1\"># Hashes can be quickly looked up by key.<\/span>\r\n<span class=\"nb\">hash<\/span><span class=\"o\">[<\/span><span class=\"s1\">&#39;color&#39;<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; &quot;green&quot;<\/span>\r\n<span class=\"nb\">hash<\/span><span class=\"o\">[<\/span><span class=\"s1\">&#39;number&#39;<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; 5<\/span>\r\n\r\n<span class=\"c1\"># Asking a hash for a key that doesn&#39;t exist returns nil.<\/span>\r\n<span class=\"nb\">hash<\/span><span class=\"o\">[<\/span><span class=\"s1\">&#39;nothing here&#39;<\/span><span class=\"o\">]<\/span> <span class=\"c1\">#=&gt; nil<\/span>\r\n\r\n<span class=\"c1\"># When using symbols for keys in a hash, you can use an alternate syntax.<\/span>\r\n\r\n<span class=\"nb\">hash<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span> <span class=\"ss\">:defcon<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"ss\">:action<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"kp\">true<\/span> <span class=\"p\">}<\/span>\r\n<span class=\"nb\">hash<\/span><span class=\"o\">.<\/span><span class=\"n\">keys<\/span> <span class=\"c1\">#=&gt; [:defcon, :action]<\/span>\r\n\r\n<span class=\"nb\">hash<\/span> <span class=\"o\">=<\/span> <span class=\"p\">{<\/span> <span class=\"ss\">defcon<\/span><span class=\"p\">:<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"ss\">action<\/span><span class=\"p\">:<\/span> <span class=\"kp\">true<\/span> <span class=\"p\">}<\/span>\r\n<span class=\"nb\">hash<\/span><span class=\"o\">.<\/span><span class=\"n\">keys<\/span> <span class=\"c1\">#=&gt; [:defcon, :action]<\/span>\r\n\r\n<span class=\"c1\"># Check existence of keys and values in hash<\/span>\r\n<span class=\"nb\">hash<\/span><span class=\"o\">.<\/span><span class=\"n\">key?<\/span><span class=\"p\">(<\/span><span class=\"ss\">:defcon<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n<span class=\"nb\">hash<\/span><span class=\"o\">.<\/span><span class=\"n\">value?<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># Tip: Both Arrays and Hashes are Enumerable!<\/span>\r\n<span class=\"c1\"># They share a lot of useful methods such as each, map, count, and more.<\/span>\r\n\r\n<span class=\"c1\"># Control structures<\/span>\r\n\r\n<span class=\"c1\"># Conditionals<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"kp\">true<\/span>\r\n  <span class=\"s1\">&#39;if statement&#39;<\/span>\r\n<span class=\"k\">elsif<\/span> <span class=\"kp\">false<\/span>\r\n  <span class=\"s1\">&#39;else if, optional&#39;<\/span>\r\n<span class=\"k\">else<\/span>\r\n  <span class=\"s1\">&#39;else, also optional&#39;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># If a condition controls invokation of a single statement rather than a block of code<\/span>\r\n<span class=\"c1\"># you can use postfix-if notation<\/span>\r\n<span class=\"n\">warnings<\/span> <span class=\"o\">=<\/span> <span class=\"o\">[<\/span><span class=\"s1\">&#39;Patronimic is missing&#39;<\/span><span class=\"p\">,<\/span> <span class=\"s1\">&#39;Address too short&#39;<\/span><span class=\"o\">]<\/span>\r\n<span class=\"nb\">puts<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;Some warnings occurred:<\/span><span class=\"se\">\\n<\/span><span class=\"s2\">&quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">warnings<\/span><span class=\"o\">.<\/span><span class=\"n\">join<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s2\">&quot;<\/span><span class=\"p\">))<\/span>  <span class=\"k\">if<\/span> <span class=\"o\">!<\/span><span class=\"n\">warnings<\/span><span class=\"o\">.<\/span><span class=\"n\">empty?<\/span>\r\n\r\n<span class=\"c1\"># Rephrase condition if `unless` sounds better than `if`<\/span>\r\n<span class=\"nb\">puts<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;Some warnings occurred:<\/span><span class=\"se\">\\n<\/span><span class=\"s2\">&quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">warnings<\/span><span class=\"o\">.<\/span><span class=\"n\">join<\/span><span class=\"p\">(<\/span><span class=\"s2\">&quot;<\/span><span class=\"se\">\\n<\/span><span class=\"s2\">&quot;<\/span><span class=\"p\">))<\/span>  <span class=\"k\">unless<\/span> <span class=\"n\">warnings<\/span><span class=\"o\">.<\/span><span class=\"n\">empty?<\/span>\r\n\r\n<span class=\"c1\"># Loops<\/span>\r\n<span class=\"c1\"># In Ruby, traditional `for` loops aren&#39;t very common. Instead, these <\/span>\r\n<span class=\"c1\"># basic loops are implemented using enumerable, which hinges on `each`.<\/span>\r\n<span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">..<\/span><span class=\"mi\">5<\/span><span class=\"p\">)<\/span><span class=\"o\">.<\/span><span class=\"n\">each<\/span> <span class=\"k\">do<\/span> <span class=\"o\">|<\/span><span class=\"n\">counter<\/span><span class=\"o\">|<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;iteration <\/span><span class=\"si\">#{<\/span><span class=\"n\">counter<\/span><span class=\"si\">}<\/span><span class=\"s2\">&quot;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># Which is roughly equivalent to the following, which is unusual to see in Ruby.<\/span>\r\n<span class=\"k\">for<\/span> <span class=\"n\">counter<\/span> <span class=\"k\">in<\/span> <span class=\"mi\">1<\/span><span class=\"o\">..<\/span><span class=\"mi\">5<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;iteration <\/span><span class=\"si\">#{<\/span><span class=\"n\">counter<\/span><span class=\"si\">}<\/span><span class=\"s2\">&quot;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># The `do |variable| ... end` construct above is called a &#39;block&#39;. Blocks are similar<\/span>\r\n<span class=\"c1\"># to lambdas, anonymous functions or closures in other programming languages. They can<\/span>\r\n<span class=\"c1\"># be passed around as objects, called, or attached as methods.<\/span>\r\n<span class=\"c1\">#<\/span>\r\n<span class=\"c1\"># The &#39;each&#39; method of a range runs the block once for each element of the range.<\/span>\r\n<span class=\"c1\"># The block is passed a counter as a parameter.<\/span>\r\n\r\n<span class=\"c1\"># You can also surround blocks in curly brackets.<\/span>\r\n<span class=\"p\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">..<\/span><span class=\"mi\">5<\/span><span class=\"p\">)<\/span><span class=\"o\">.<\/span><span class=\"n\">each<\/span> <span class=\"p\">{<\/span> <span class=\"o\">|<\/span><span class=\"n\">counter<\/span><span class=\"o\">|<\/span> <span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;iteration <\/span><span class=\"si\">#{<\/span><span class=\"n\">counter<\/span><span class=\"si\">}<\/span><span class=\"s2\">&quot;<\/span> <span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\"># The contents of data structures can also be iterated using each.<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n\">each<\/span> <span class=\"k\">do<\/span> <span class=\"o\">|<\/span><span class=\"n\">element<\/span><span class=\"o\">|<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;<\/span><span class=\"si\">#{<\/span><span class=\"n\">element<\/span><span class=\"si\">}<\/span><span class=\"s2\"> is part of the array&quot;<\/span>\r\n<span class=\"k\">end<\/span>\r\n<span class=\"nb\">hash<\/span><span class=\"o\">.<\/span><span class=\"n\">each<\/span> <span class=\"k\">do<\/span> <span class=\"o\">|<\/span><span class=\"n\">key<\/span><span class=\"p\">,<\/span> <span class=\"n\">value<\/span><span class=\"o\">|<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;<\/span><span class=\"si\">#{<\/span><span class=\"n\">key<\/span><span class=\"si\">}<\/span><span class=\"s2\"> is <\/span><span class=\"si\">#{<\/span><span class=\"n\">value<\/span><span class=\"si\">}<\/span><span class=\"s2\">&quot;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># If you still need an index you can use &#39;each_with_index&#39; and define an index<\/span>\r\n<span class=\"c1\"># variable.<\/span>\r\n<span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n\">each_with_index<\/span> <span class=\"k\">do<\/span> <span class=\"o\">|<\/span><span class=\"n\">element<\/span><span class=\"p\">,<\/span> <span class=\"n\">index<\/span><span class=\"o\">|<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;<\/span><span class=\"si\">#{<\/span><span class=\"n\">element<\/span><span class=\"si\">}<\/span><span class=\"s2\"> is number <\/span><span class=\"si\">#{<\/span><span class=\"n\">index<\/span><span class=\"si\">}<\/span><span class=\"s2\"> in the array&quot;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"n\">counter<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">1<\/span>\r\n<span class=\"k\">while<\/span> <span class=\"n\">counter<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"mi\">5<\/span> <span class=\"k\">do<\/span>\r\n",







        "2":"<span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;iteration <\/span><span class=\"si\">#{<\/span><span class=\"n\">counter<\/span><span class=\"si\">}<\/span><span class=\"s2\">&quot;<\/span>\r\n  <span class=\"n\">counter<\/span> <span class=\"o\">+=<\/span> <span class=\"mi\">1<\/span>\r\n<span class=\"k\">end<\/span>\r\n<span class=\"c1\">#=&gt; iteration 1<\/span>\r\n<span class=\"c1\">#=&gt; iteration 2<\/span>\r\n<span class=\"c1\">#=&gt; iteration 3<\/span>\r\n<span class=\"c1\">#=&gt; iteration 4<\/span>\r\n<span class=\"c1\">#=&gt; iteration 5<\/span>\r\n\r\n<span class=\"c1\"># There are a bunch of other helpful looping functions in Ruby.<\/span>\r\n<span class=\"c1\"># For example: &#39;map&#39;, &#39;reduce&#39;, &#39;inject&#39;, the list goes on.<\/span>\r\n<span class=\"c1\"># Map, for instance, takes the array it&#39;s looping over, does something<\/span>\r\n<span class=\"c1\"># to it as defined in your block, and returns an entirely new array.<\/span>\r\n<span class=\"n\">array<\/span> <span class=\"o\">=<\/span> <span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span><span class=\"mi\">2<\/span><span class=\"p\">,<\/span><span class=\"mi\">3<\/span><span class=\"p\">,<\/span><span class=\"mi\">4<\/span><span class=\"p\">,<\/span><span class=\"mi\">5<\/span><span class=\"o\">]<\/span>\r\n<span class=\"n\">doubled<\/span> <span class=\"o\">=<\/span> <span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n\">map<\/span> <span class=\"k\">do<\/span> <span class=\"o\">|<\/span><span class=\"n\">element<\/span><span class=\"o\">|<\/span>\r\n  <span class=\"n\">element<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span>\r\n<span class=\"k\">end<\/span>\r\n<span class=\"nb\">puts<\/span> <span class=\"n\">doubled<\/span>\r\n<span class=\"c1\">#=&gt; [2,4,6,8,10]<\/span>\r\n<span class=\"nb\">puts<\/span> <span class=\"n\">array<\/span>\r\n<span class=\"c1\">#=&gt; [1,2,3,4,5]<\/span>\r\n\r\n<span class=\"c1\"># Case construct<\/span>\r\n<span class=\"n\">grade<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;B&#39;<\/span>\r\n\r\n<span class=\"k\">case<\/span> <span class=\"n\">grade<\/span>\r\n<span class=\"k\">when<\/span> <span class=\"s1\">&#39;A&#39;<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;Way to go kiddo&#39;<\/span>\r\n<span class=\"k\">when<\/span> <span class=\"s1\">&#39;B&#39;<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;Better luck next time&#39;<\/span>\r\n<span class=\"k\">when<\/span> <span class=\"s1\">&#39;C&#39;<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;You can do better&#39;<\/span>\r\n<span class=\"k\">when<\/span> <span class=\"s1\">&#39;D&#39;<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;Scraping through&#39;<\/span>\r\n<span class=\"k\">when<\/span> <span class=\"s1\">&#39;F&#39;<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;You failed!&#39;<\/span>\r\n<span class=\"k\">else<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;Alternative grading system, eh?&#39;<\/span>\r\n<span class=\"k\">end<\/span>\r\n<span class=\"c1\">#=&gt; &quot;Better luck next time&quot;<\/span>\r\n\r\n<span class=\"c1\"># Cases can also use ranges<\/span>\r\n<span class=\"n\">grade<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">82<\/span>\r\n<span class=\"k\">case<\/span> <span class=\"n\">grade<\/span>\r\n<span class=\"k\">when<\/span> <span class=\"mi\">90<\/span><span class=\"o\">..<\/span><span class=\"mi\">100<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;Hooray!&#39;<\/span>\r\n<span class=\"k\">when<\/span> <span class=\"mi\">80<\/span><span class=\"o\">...<\/span><span class=\"mi\">90<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;OK job&#39;<\/span>\r\n<span class=\"k\">else<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;You failed!&#39;<\/span>\r\n<span class=\"k\">end<\/span>\r\n<span class=\"c1\">#=&gt; &quot;OK job&quot;<\/span>\r\n\r\n<span class=\"c1\"># Exception handling<\/span>\r\n<span class=\"k\">begin<\/span>\r\n  <span class=\"c1\"># Code here that might raise an exception<\/span>\r\n  <span class=\"k\">raise<\/span> <span class=\"no\">NoMemoryError<\/span><span class=\"p\">,<\/span> <span class=\"s1\">&#39;You ran out of memory.&#39;<\/span>\r\n<span class=\"k\">rescue<\/span> <span class=\"no\">NoMemoryError<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"n\">exception_variable<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;NoMemoryError was raised&#39;<\/span><span class=\"p\">,<\/span> <span class=\"n\">exception_variable<\/span>\r\n<span class=\"k\">rescue<\/span> <span class=\"no\">RuntimeError<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"n\">other_exception_variable<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;RuntimeError was raised now&#39;<\/span>\r\n<span class=\"k\">else<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;This runs if no exceptions were thrown at all&#39;<\/span>\r\n<span class=\"k\">ensure<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;This code always runs no matter what&#39;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># Methods<\/span>\r\n\r\n<span class=\"k\">def<\/span> <span class=\"nf\">double<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"n\">x<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># Methods (and blocks) implicitly return the value of the last statement.<\/span>\r\n<span class=\"n\">double<\/span><span class=\"p\">(<\/span><span class=\"mi\">2<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; 4<\/span>\r\n\r\n<span class=\"c1\"># Parentheses are optional where the interpretation is unambiguous.<\/span>\r\n<span class=\"n\">double<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">#=&gt; 6<\/span>\r\n\r\n<span class=\"n\">double<\/span> <span class=\"n\">double<\/span> <span class=\"mi\">3<\/span> <span class=\"c1\">#=&gt; 12<\/span>\r\n\r\n<span class=\"k\">def<\/span> <span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"n\">x<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># Method arguments are separated by a comma.<\/span>\r\n<span class=\"n\">sum<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span> <span class=\"c1\">#=&gt; 7<\/span>\r\n\r\n<span class=\"n\">sum<\/span> <span class=\"n\">sum<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">),<\/span> <span class=\"mi\">5<\/span> <span class=\"c1\">#=&gt; 12<\/span>\r\n\r\n<span class=\"c1\"># yield<\/span>\r\n<span class=\"c1\"># All methods have an implicit, optional block parameter.<\/span>\r\n<span class=\"c1\"># It can be called with the &#39;yield&#39; keyword.<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">surround<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;{&#39;<\/span>\r\n  <span class=\"k\">yield<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;}&#39;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"n\">surround<\/span> <span class=\"p\">{<\/span> <span class=\"nb\">puts<\/span> <span class=\"s1\">&#39;hello world&#39;<\/span> <span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">#=&gt; {<\/span>\r\n<span class=\"c1\">#=&gt; hello world<\/span>\r\n<span class=\"c1\">#=&gt; }<\/span>\r\n\r\n<span class=\"c1\"># Blocks can be converted into a &#39;proc&#39; object, which wraps the block <\/span>\r\n<span class=\"c1\"># and allows it to be passed to another method, bound to a different scope,<\/span>\r\n<span class=\"c1\"># or manipulated otherwise. This is most common in method parameter lists,<\/span>\r\n<span class=\"c1\"># where you frequently see a trailing &#39;&amp;block&#39; parameter that will accept <\/span>\r\n<span class=\"c1\"># the block, if one is given, and convert it to a &#39;Proc&#39;. The naming here is<\/span>\r\n<span class=\"c1\"># convention; it would work just as well with &#39;&amp;pineapple&#39;.<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">guests<\/span><span class=\"p\">(<\/span><span class=\"o\">&amp;<\/span><span class=\"n\">block<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"n\">block<\/span><span class=\"o\">.<\/span><span class=\"n\">class<\/span> <span class=\"c1\">#=&gt; Proc<\/span>\r\n  <span class=\"n\">block<\/span><span class=\"o\">.<\/span><span class=\"n\">call<\/span><span class=\"p\">(<\/span><span class=\"mi\">4<\/span><span class=\"p\">)<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># The &#39;call&#39; method on the Proc is similar to calling &#39;yield&#39; when a block is <\/span>\r\n<span class=\"c1\"># present. The arguments passed to &#39;call&#39; will be forwarded to the block as arugments.<\/span>\r\n\r\n<span class=\"n\">guests<\/span> <span class=\"p\">{<\/span> <span class=\"o\">|<\/span><span class=\"n\">n<\/span><span class=\"o\">|<\/span> <span class=\"s2\">&quot;You have <\/span><span class=\"si\">#{<\/span><span class=\"n\">n<\/span><span class=\"si\">}<\/span><span class=\"s2\"> guests.&quot;<\/span> <span class=\"p\">}<\/span>\r\n<span class=\"c1\"># =&gt; &quot;You have 4 guests.&quot;<\/span>\r\n\r\n<span class=\"c1\"># You can pass a list of arguments, which will be converted into an array.<\/span>\r\n<span class=\"c1\"># That&#39;s what splat operator (&quot;*&quot;) is for.<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">guests<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"n\">array<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"n\">array<\/span><span class=\"o\">.<\/span><span class=\"n\">each<\/span> <span class=\"p\">{<\/span> <span class=\"o\">|<\/span><span class=\"n\">guest<\/span><span class=\"o\">|<\/span> <span class=\"nb\">puts<\/span> <span class=\"n\">guest<\/span> <span class=\"p\">}<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># Destructuring<\/span>\r\n\r\n<span class=\"c1\"># Ruby will automatically destructure arrays on assignment to multiple variables.<\/span>\r\n<span class=\"n\">a<\/span><span class=\"p\">,<\/span> <span class=\"n\">b<\/span><span class=\"p\">,<\/span> <span class=\"n\">c<\/span> <span class=\"o\">=<\/span> <span class=\"o\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">]<\/span>\r\n<span class=\"n\">a<\/span> <span class=\"c1\">#=&gt; 1<\/span>\r\n<span class=\"n\">b<\/span> <span class=\"c1\">#=&gt; 2<\/span>\r\n<span class=\"n\">c<\/span> <span class=\"c1\">#=&gt; 3<\/span>\r\n\r\n<span class=\"c1\"># In some cases, you will want to use the splat operator: `*` to prompt destructuring<\/span>\r\n<span class=\"c1\"># of an array into a list.<\/span>\r\n<span class=\"n\">ranked_competitors<\/span> <span class=\"o\">=<\/span> <span class=\"o\">[<\/span><span class=\"s2\">&quot;John&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;Sally&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;Dingus&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;Moe&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s2\">&quot;Marcy&quot;<\/span><span class=\"o\">]<\/span>\r\n\r\n<span class=\"k\">def<\/span> <span class=\"nf\">best<\/span><span class=\"p\">(<\/span><span class=\"n\">first<\/span><span class=\"p\">,<\/span> <span class=\"n\">second<\/span><span class=\"p\">,<\/span> <span class=\"n\">third<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;Winners are <\/span><span class=\"si\">#{<\/span><span class=\"n\">first<\/span><span class=\"si\">}<\/span><span class=\"s2\">, <\/span><span class=\"si\">#{<\/span><span class=\"n\">second<\/span><span class=\"si\">}<\/span><span class=\"s2\">, and <\/span><span class=\"si\">#{<\/span><span class=\"n\">third<\/span><span class=\"si\">}<\/span><span class=\"s2\">.&quot;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"n\">best<\/span> <span class=\"o\">*<\/span><span class=\"n\">ranked_competitors<\/span><span class=\"o\">.<\/span><span class=\"n\">first<\/span><span class=\"p\">(<\/span><span class=\"mi\">3<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; Winners are John, Sally, and Dingus.<\/span>\r\n\r\n<span class=\"c1\"># The splat operator can also be used in parameters.<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"nf\">best<\/span><span class=\"p\">(<\/span><span class=\"n\">first<\/span><span class=\"p\">,<\/span> <span class=\"n\">second<\/span><span class=\"p\">,<\/span> <span class=\"n\">third<\/span><span class=\"p\">,<\/span> <span class=\"o\">*<\/span><span class=\"n\">others<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;Winners are <\/span><span class=\"si\">#{<\/span><span class=\"n\">first<\/span><span class=\"si\">}<\/span><span class=\"s2\">, <\/span><span class=\"si\">#{<\/span><span class=\"n\">second<\/span><span class=\"si\">}<\/span><span class=\"s2\">, and <\/span><span class=\"si\">#{<\/span><span class=\"n\">third<\/span><span class=\"si\">}<\/span><span class=\"s2\">.&quot;<\/span>\r\n",





        "3":"<span class=\"nb\">puts<\/span> <span class=\"s2\">&quot;There were <\/span><span class=\"si\">#{<\/span><span class=\"n\">others<\/span><span class=\"o\">.<\/span><span class=\"n\">count<\/span><span class=\"si\">}<\/span><span class=\"s2\"> other participants.&quot;<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"n\">best<\/span> <span class=\"o\">*<\/span><span class=\"n\">ranked_competitors<\/span> \r\n<span class=\"c1\">#=&gt; Winners are John, Sally, and Dingus.<\/span>\r\n<span class=\"c1\">#=&gt; There were 2 other participants.<\/span>\r\n\r\n<span class=\"c1\"># By convention, all methods that return booleans end with a question mark.<\/span>\r\n<span class=\"mi\">5<\/span><span class=\"o\">.<\/span><span class=\"n\">even?<\/span> <span class=\"c1\">#=&gt; false<\/span>\r\n<span class=\"mi\">5<\/span><span class=\"o\">.<\/span><span class=\"n\">odd?<\/span> <span class=\"c1\">#=&gt; true<\/span>\r\n\r\n<span class=\"c1\"># By convention, if a method name ends with an exclamation mark, it does something destructive<\/span>\r\n<span class=\"c1\"># like mutate the receiver. Many methods have a ! version to make a change, and<\/span>\r\n<span class=\"c1\"># a non-! version to just return a new changed version.<\/span>\r\n<span class=\"n\">company_name<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;Dunder Mifflin&quot;<\/span>\r\n<span class=\"n\">company_name<\/span><span class=\"o\">.<\/span><span class=\"n\">upcase<\/span> <span class=\"c1\">#=&gt; &quot;DUNDER MIFFLIN&quot;<\/span>\r\n<span class=\"n\">company_name<\/span> <span class=\"c1\">#=&gt; &quot;Dunder Mifflin&quot;<\/span>\r\n<span class=\"c1\"># We&#39;re mutating company_name this time.<\/span>\r\n<span class=\"n\">company_name<\/span><span class=\"o\">.<\/span><span class=\"n\">upcase!<\/span> <span class=\"c1\">#=&gt; &quot;DUNDER MIFFLIN&quot;<\/span>\r\n<span class=\"n\">company_name<\/span> <span class=\"c1\">#=&gt; &quot;DUNDER MIFFLIN&quot;<\/span>\r\n\r\n<span class=\"c1\"># Classes<\/span>\r\n\r\n<span class=\"c1\"># You can define a class with the &#39;class&#39; keyword.<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Human<\/span>\r\n\r\n  <span class=\"c1\"># A class variable. It is shared by all instances of this class.<\/span>\r\n  <span class=\"vc\">@@species<\/span> <span class=\"o\">=<\/span> <span class=\"s1\">&#39;H. sapiens&#39;<\/span>\r\n\r\n  <span class=\"c1\"># Basic initializer<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"nf\">initialize<\/span><span class=\"p\">(<\/span><span class=\"nb\">name<\/span><span class=\"p\">,<\/span> <span class=\"n\">age<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"c1\"># Assign the argument to the &#39;name&#39; instance variable for the instance.<\/span>\r\n    <span class=\"vi\">@name<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">name<\/span>\r\n    <span class=\"c1\"># If no age given, we will fall back to the default in the arguments list.<\/span>\r\n    <span class=\"vi\">@age<\/span> <span class=\"o\">=<\/span> <span class=\"n\">age<\/span>\r\n  <span class=\"k\">end<\/span>\r\n\r\n  <span class=\"c1\"># Basic setter method<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"nf\">name<\/span><span class=\"o\">=<\/span><span class=\"p\">(<\/span><span class=\"nb\">name<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"vi\">@name<\/span> <span class=\"o\">=<\/span> <span class=\"nb\">name<\/span>\r\n  <span class=\"k\">end<\/span>\r\n\r\n  <span class=\"c1\"># Basic getter method<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"nf\">name<\/span>\r\n    <span class=\"vi\">@name<\/span>\r\n  <span class=\"k\">end<\/span>\r\n\r\n  <span class=\"c1\"># The above functionality can be encapsulated using the attr_accessor method as follows.<\/span>\r\n  <span class=\"kp\">attr_accessor<\/span> <span class=\"ss\">:name<\/span>\r\n\r\n  <span class=\"c1\"># Getter\/setter methods can also be created individually like this.<\/span>\r\n  <span class=\"kp\">attr_reader<\/span> <span class=\"ss\">:name<\/span>\r\n  <span class=\"kp\">attr_writer<\/span> <span class=\"ss\">:name<\/span>\r\n\r\n  <span class=\"c1\"># A class method uses self to distinguish from instance methods.<\/span>\r\n  <span class=\"c1\"># It can only be called on the class, not an instance.<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"nc\">self<\/span><span class=\"o\">.<\/span><span class=\"nf\">say<\/span><span class=\"p\">(<\/span><span class=\"n\">msg<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nb\">puts<\/span> <span class=\"n\">msg<\/span>\r\n  <span class=\"k\">end<\/span>\r\n\r\n  <span class=\"k\">def<\/span> <span class=\"nf\">species<\/span>\r\n    <span class=\"vc\">@@species<\/span>\r\n  <span class=\"k\">end<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># Instantiating of a class<\/span>\r\n<span class=\"n\">jim<\/span> <span class=\"o\">=<\/span> <span class=\"no\">Human<\/span><span class=\"o\">.<\/span><span class=\"n\">new<\/span><span class=\"p\">(<\/span><span class=\"s1\">&#39;Jim Halpert&#39;<\/span><span class=\"p\">)<\/span>\r\n<span class=\"n\">dwight<\/span> <span class=\"o\">=<\/span> <span class=\"no\">Human<\/span><span class=\"o\">.<\/span><span class=\"n\">new<\/span><span class=\"p\">(<\/span><span class=\"s1\">&#39;Dwight K. Schrute&#39;<\/span><span class=\"p\">)<\/span>\r\n\r\n<span class=\"c1\"># You can call the methods of the generated object.<\/span>\r\n<span class=\"n\">jim<\/span><span class=\"o\">.<\/span><span class=\"n\">species<\/span> <span class=\"c1\">#=&gt; &quot;H. sapiens&quot;<\/span>\r\n<span class=\"n\">jim<\/span><span class=\"o\">.<\/span><span class=\"n\">name<\/span> <span class=\"c1\">#=&gt; &quot;Jim Halpert&quot;<\/span>\r\n<span class=\"n\">jim<\/span><span class=\"o\">.<\/span><span class=\"n\">name<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;Jim Halpert II&quot;<\/span> <span class=\"c1\">#=&gt; &quot;Jim Halpert II&quot;<\/span>\r\n<span class=\"n\">jim<\/span><span class=\"o\">.<\/span><span class=\"n\">name<\/span> <span class=\"c1\">#=&gt; &quot;Jim Halpert II&quot;<\/span>\r\n<span class=\"n\">dwight<\/span><span class=\"o\">.<\/span><span class=\"n\">species<\/span> <span class=\"c1\">#=&gt; &quot;H. sapiens&quot;<\/span>\r\n<span class=\"n\">dwight<\/span><span class=\"o\">.<\/span><span class=\"n\">name<\/span> <span class=\"c1\">#=&gt; &quot;Dwight K. Schrute&quot;<\/span>\r\n\r\n<span class=\"c1\"># Calling of a class method<\/span>\r\n<span class=\"no\">Human<\/span><span class=\"o\">.<\/span><span class=\"n\">say<\/span><span class=\"p\">(<\/span><span class=\"s1\">&#39;Hi&#39;<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#=&gt; &quot;Hi&quot;<\/span>\r\n\r\n<span class=\"c1\"># Variable&#39;s scopes are defined by the way we name them.<\/span>\r\n<span class=\"c1\"># Variables that start with $ have global scope.<\/span>\r\n<span class=\"vg\">$var<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;I&#39;m a global var&quot;<\/span>\r\n<span class=\"n\">defined?<\/span> <span class=\"vg\">$var<\/span> <span class=\"c1\">#=&gt; &quot;global-variable&quot;<\/span>\r\n\r\n<span class=\"c1\"># Variables that start with @ have instance scope.<\/span>\r\n<span class=\"vi\">@var<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;I&#39;m an instance var&quot;<\/span>\r\n<span class=\"n\">defined?<\/span> <span class=\"vi\">@var<\/span> <span class=\"c1\">#=&gt; &quot;instance-variable&quot;<\/span>\r\n\r\n<span class=\"c1\"># Variables that start with @@ have class scope.<\/span>\r\n<span class=\"vc\">@@var<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;I&#39;m a class var&quot;<\/span>\r\n<span class=\"n\">defined?<\/span> <span class=\"vc\">@@var<\/span> <span class=\"c1\">#=&gt; &quot;class variable&quot;<\/span>\r\n\r\n<span class=\"c1\"># Variables that start with a capital letter are constants.<\/span>\r\n<span class=\"no\">Var<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">&quot;I&#39;m a constant&quot;<\/span>\r\n<span class=\"n\">defined?<\/span> <span class=\"no\">Var<\/span> <span class=\"c1\">#=&gt; &quot;constant&quot;<\/span>\r\n\r\n<span class=\"c1\"># Class is also an object in ruby. So a class can have instance variables.<\/span>\r\n<span class=\"c1\"># A class variable is shared among the class and all of its descendants.<\/span>\r\n\r\n<span class=\"c1\"># Base class<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Human<\/span>\r\n  <span class=\"vc\">@@foo<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span>\r\n\r\n  <span class=\"k\">def<\/span> <span class=\"nc\">self<\/span><span class=\"o\">.<\/span><span class=\"nf\">foo<\/span>\r\n    <span class=\"vc\">@@foo<\/span>\r\n  <span class=\"k\">end<\/span>\r\n\r\n  <span class=\"k\">def<\/span> <span class=\"nc\">self<\/span><span class=\"o\">.<\/span><span class=\"nf\">foo<\/span><span class=\"o\">=<\/span><span class=\"p\">(<\/span><span class=\"n\">value<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"vc\">@@foo<\/span> <span class=\"o\">=<\/span> <span class=\"n\">value<\/span>\r\n  <span class=\"k\">end<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># Derived class<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Worker<\/span> <span class=\"o\">&lt;<\/span> <span class=\"no\">Human<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"no\">Human<\/span><span class=\"o\">.<\/span><span class=\"n\">foo<\/span> <span class=\"c1\">#=&gt; 0<\/span>\r\n<span class=\"no\">Worker<\/span><span class=\"o\">.<\/span><span class=\"n\">foo<\/span> <span class=\"c1\">#=&gt; 0<\/span>\r\n\r\n<span class=\"no\">Human<\/span><span class=\"o\">.<\/span><span class=\"n\">foo<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">2<\/span>\r\n<span class=\"no\">Worker<\/span><span class=\"o\">.<\/span><span class=\"n\">foo<\/span> <span class=\"c1\">#=&gt; 2<\/span>\r\n\r\n<span class=\"c1\"># A class instance variable is not shared by the class&#39;s descendants.<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Human<\/span>\r\n  <span class=\"vi\">@bar<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">0<\/span>\r\n\r\n  <span class=\"k\">def<\/span> <span class=\"nc\">self<\/span><span class=\"o\">.<\/span><span class=\"nf\">bar<\/span>\r\n    <span class=\"vi\">@bar<\/span>\r\n  <span class=\"k\">end<\/span>\r\n\r\n  <span class=\"k\">def<\/span> <span class=\"nc\">self<\/span><span class=\"o\">.<\/span><span class=\"nf\">bar<\/span><span class=\"o\">=<\/span><span class=\"p\">(<\/span><span class=\"n\">value<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"vi\">@bar<\/span> <span class=\"o\">=<\/span> <span class=\"n\">value<\/span>\r\n  <span class=\"k\">end<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Doctor<\/span> <span class=\"o\">&lt;<\/span> <span class=\"no\">Human<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"no\">Human<\/span><span class=\"o\">.<\/span><span class=\"n\">bar<\/span> <span class=\"c1\">#=&gt; 0<\/span>\r\n<span class=\"no\">Doctor<\/span><span class=\"o\">.<\/span><span class=\"n\">bar<\/span> <span class=\"c1\">#=&gt; nil<\/span>\r\n\r\n<span class=\"k\">module<\/span> <span class=\"nn\">ModuleExample<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"nf\">foo<\/span>\r\n    <span class=\"s1\">&#39;foo&#39;<\/span>\r\n  <span class=\"k\">end<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"c1\"># Including modules binds their methods to the class instances.<\/span>\r\n<span class=\"c1\"># Extending modules binds their methods to the class itself.<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Person<\/span>\r\n  <span class=\"kp\">include<\/span> <span class=\"no\">ModuleExample<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Book<\/span>\r\n  <span class=\"kp\">extend<\/span> <span class=\"no\">ModuleExample<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"no\">Person<\/span><span class=\"o\">.<\/span><span class=\"n\">foo<\/span>     <span class=\"c1\">#=&gt; NoMethodError: undefined method `foo&#39; for Person:Class<\/span>\r\n<span class=\"no\">Person<\/span><span class=\"o\">.<\/span><span class=\"n\">new<\/span><span class=\"o\">.<\/span><span class=\"n\">foo<\/span> <span class=\"c1\">#=&gt; &quot;foo&quot;<\/span>\r\n<span class=\"no\">Book<\/span><span class=\"o\">.<\/span><span class=\"n\">foo<\/span>       <span class=\"c1\">#=&gt; &quot;foo&quot;<\/span>\r\n<span class=\"no\">Book<\/span><span class=\"o\">.<\/span><span class=\"n\">new<\/span><span class=\"o\">.<\/span><span class=\"n\">foo<\/span>   <span class=\"c1\">#=&gt; NoMethodError: undefined method `foo&#39;<\/span>\r\n\r\n<span class=\"c1\"># Callbacks are executed when including and extending a module<\/span>\r\n<span class=\"k\">module<\/span> <span class=\"nn\">ConcernExample<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"nc\">self<\/span><span class=\"o\">.<\/span><span class=\"nf\">included<\/span><span class=\"p\">(<\/span><span class=\"n\">base<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"n\">base<\/span><span class=\"o\">.<\/span><span class=\"n\">extend<\/span><span class=\"p\">(<\/span><span class=\"no\">ClassMethods<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"n\">base<\/span><span class=\"o\">.<\/span><span class=\"n\">send<\/span><span class=\"p\">(<\/span><span class=\"ss\">:include<\/span><span class=\"p\">,<\/span> <span class=\"no\">InstanceMethods<\/span><span class=\"p\">)<\/span>\r\n  <span class=\"k\">end<\/span>\r\n\r\n  <span class=\"k\">module<\/span> <span class=\"nn\">ClassMethods<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">bar<\/span>\r\n      <span class=\"s1\">&#39;bar&#39;<\/span>\r\n    <span class=\"k\">end<\/span>\r\n  <span class=\"k\">end<\/span>\r\n\r\n  <span class=\"k\">module<\/span> <span class=\"nn\">InstanceMethods<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"nf\">qux<\/span>\r\n      <span class=\"s1\">&#39;qux&#39;<\/span>\r\n    <span class=\"k\">end<\/span>\r\n  <span class=\"k\">end<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Something<\/span>\r\n  <span class=\"kp\">include<\/span> <span class=\"no\">ConcernExample<\/span>\r\n<span class=\"k\">end<\/span>\r\n\r\n<span class=\"no\">Something<\/span><span class=\"o\">.<\/span><span class=\"n\">bar<\/span>     <span class=\"c1\">#=&gt; &quot;bar&quot;<\/span>\r\n<span class=\"no\">Something<\/span><span class=\"o\">.<\/span><span class=\"n\">qux<\/span>     <span class=\"c1\">#=&gt; NoMethodError: undefined method `qux&#39;<\/span>\r\n<span class=\"no\">Something<\/span><span class=\"o\">.<\/span><span class=\"n\">new<\/span><span class=\"o\">.<\/span><span class=\"n\">bar<\/span> <span class=\"c1\">#=&gt; NoMethodError: undefined method `bar&#39;<\/span>\r\n<span class=\"no\">Something<\/span><span class=\"o\">.<\/span><span class=\"n\">new<\/span><span class=\"o\">.<\/span><span class=\"n\">qux<\/span> <span class=\"c1\">#=&gt; &quot;qux&quot;<\/span>\r\n"
    },





















    "scala":{
        "0":"<span><\/span><span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 0. Basics<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">  Setup Scala:<\/span>\r\n\r\n<span class=\"cm\">  1) Download Scala - http:\/\/www.scala-lang.org\/downloads<\/span>\r\n<span class=\"cm\">  2) Unzip\/untar to your favorite location and put the bin subdir in your `PATH` environment variable<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">  Try the REPL<\/span>\r\n\r\n<span class=\"cm\">  Scala has a tool called the REPL (Read-Eval-Print Loop) that is analogous to<\/span>\r\n<span class=\"cm\">  commandline interpreters in many other languages. You may type any Scala<\/span>\r\n<span class=\"cm\">  expression, and the result will be evaluated and printed.  <\/span>\r\n\r\n<span class=\"cm\">  The REPL is a very handy tool to test and verify code.  Use it as you read<\/span>\r\n<span class=\"cm\">  this tutorial to quickly explore concepts on your own.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Start a Scala REPL by running `scala`. You should see the prompt:<\/span>\r\n<span class=\"n\">$<\/span> <span class=\"n\">scala<\/span>\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span>\r\n\r\n<span class=\"c1\">\/\/ By default each expression you type is saved as a new numbered value<\/span>\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"mi\">2<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">2<\/span>\r\n<span class=\"n\">res0<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">4<\/span>\r\n\r\n<span class=\"c1\">\/\/ Default values can be reused.  Note the value type displayed in the result..<\/span>\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">res0<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">2<\/span>\r\n<span class=\"n\">res1<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">6<\/span>\r\n\r\n<span class=\"c1\">\/\/ Scala is a strongly typed language. You can use the REPL to check the type<\/span>\r\n<span class=\"c1\">\/\/ without evaluating an expression.<\/span>\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"k\">:type<\/span> <span class=\"o\">(<\/span><span class=\"kt\">true<\/span><span class=\"o\">,<\/span> <span class=\"err\">2<\/span><span class=\"kt\">.<\/span><span class=\"err\">0<\/span><span class=\"o\">)<\/span>\r\n<span class=\"o\">(<\/span><span class=\"nc\">Boolean<\/span><span class=\"o\">,<\/span> <span class=\"nc\">Double<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ REPL sessions can be saved<\/span>\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"k\">:<\/span><span class=\"kt\">save<\/span> <span class=\"kt\">\/sites\/repl-test.scala<\/span>\r\n\r\n<span class=\"c1\">\/\/ Files can be loaded into the REPL<\/span>\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"k\">:<\/span><span class=\"kt\">load<\/span> <span class=\"kt\">\/sites\/repl-test.scala<\/span>\r\n<span class=\"nc\">Loading<\/span> <span class=\"o\">\/<\/span><span class=\"n\">sites<\/span><span class=\"o\">\/<\/span><span class=\"n\">repl<\/span><span class=\"o\">-<\/span><span class=\"n\">test<\/span><span class=\"o\">.<\/span><span class=\"n\">scala<\/span><span class=\"o\">...<\/span>\r\n<span class=\"n\">res2<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">4<\/span>\r\n<span class=\"n\">res3<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">6<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can search your recent history<\/span>\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"k\">:<\/span><span class=\"kt\">h?<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"mi\">2<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">2<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"n\">res0<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">2<\/span>\r\n<span class=\"mi\">3<\/span> <span class=\"k\">:<\/span><span class=\"kt\">save<\/span> <span class=\"kt\">\/sites\/repl-test.scala<\/span>\r\n<span class=\"mi\">4<\/span> <span class=\"k\">:<\/span><span class=\"kt\">load<\/span> <span class=\"kt\">\/sites\/repl-test.scala<\/span>\r\n<span class=\"mi\">5<\/span> <span class=\"k\">:<\/span><span class=\"kt\">h?<\/span>\r\n\r\n<span class=\"c1\">\/\/ Now that you know how to play, let&#39;s learn a little scala...<\/span>\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 1. Basics<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Single-line comments start with two forward slashes<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">  Multi-line comments, as you can already see from above, look like this.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Printing, and forcing a new line on the next print<\/span>\r\n<span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Hello world!&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"mi\">10<\/span><span class=\"o\">)<\/span>\r\n<span class=\"c1\">\/\/ Hello world!<\/span>\r\n<span class=\"c1\">\/\/ 10<\/span>\r\n\r\n<span class=\"c1\">\/\/ Printing, without forcing a new line on next print<\/span>\r\n<span class=\"n\">print<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Hello world&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">print<\/span><span class=\"o\">(<\/span><span class=\"mi\">10<\/span><span class=\"o\">)<\/span>\r\n<span class=\"c1\">\/\/ Hello world10<\/span>\r\n\r\n<span class=\"c1\">\/\/ Declaring values is done using either var or val.<\/span>\r\n<span class=\"c1\">\/\/ val declarations are immutable, whereas vars are mutable. Immutability is<\/span>\r\n<span class=\"c1\">\/\/ a good thing.<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">x<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">\/\/ x is now 10<\/span>\r\n<span class=\"n\">x<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">20<\/span>     <span class=\"c1\">\/\/ error: reassignment to val<\/span>\r\n<span class=\"k\">var<\/span> <span class=\"n\">y<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">10<\/span>\r\n<span class=\"n\">y<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">20<\/span>     <span class=\"c1\">\/\/ y is now 20<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">  Scala is a statically typed language, yet note that in the above declarations,<\/span>\r\n<span class=\"cm\">  we did not specify a type. This is due to a language feature called type<\/span>\r\n<span class=\"cm\">  inference. In most cases, Scala compiler can guess what the type of a variable<\/span>\r\n<span class=\"cm\">  is, so you don&#39;t have to type it every time. We can explicitly declare the<\/span>\r\n<span class=\"cm\">  type of a variable like so:<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">z<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">a<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Double<\/span> <span class=\"o\">=<\/span> <span class=\"mf\">1.0<\/span>\r\n\r\n<span class=\"c1\">\/\/ Notice automatic conversion from Int to Double, result is 10.0, not 10<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">b<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Double<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">10<\/span>\r\n\r\n<span class=\"c1\">\/\/ Boolean values<\/span>\r\n<span class=\"kc\">true<\/span>\r\n<span class=\"kc\">false<\/span>\r\n\r\n<span class=\"c1\">\/\/ Boolean operations<\/span>\r\n<span class=\"o\">!<\/span><span class=\"kc\">true<\/span>         <span class=\"c1\">\/\/ false<\/span>\r\n<span class=\"o\">!<\/span><span class=\"kc\">false<\/span>        <span class=\"c1\">\/\/ true<\/span>\r\n<span class=\"kc\">true<\/span> <span class=\"o\">==<\/span> <span class=\"kc\">false<\/span> <span class=\"c1\">\/\/ false<\/span>\r\n<span class=\"mi\">10<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">5<\/span>        <span class=\"c1\">\/\/ true<\/span>\r\n\r\n<span class=\"c1\">\/\/ Math is as per usual<\/span>\r\n<span class=\"mi\">1<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span>   <span class=\"c1\">\/\/ 2<\/span>\r\n<span class=\"mi\">2<\/span> <span class=\"o\">-<\/span> <span class=\"mi\">1<\/span>   <span class=\"c1\">\/\/ 1<\/span>\r\n<span class=\"mi\">5<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">3<\/span>   <span class=\"c1\">\/\/ 15<\/span>\r\n<span class=\"mi\">6<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">2<\/span>   <span class=\"c1\">\/\/ 3<\/span>\r\n<span class=\"mi\">6<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">4<\/span>   <span class=\"c1\">\/\/ 1<\/span>\r\n<span class=\"mf\">6.0<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">4<\/span> <span class=\"c1\">\/\/ 1.5<\/span>\r\n<span class=\"mi\">6<\/span> <span class=\"o\">\/<\/span> <span class=\"mf\">4.0<\/span> <span class=\"c1\">\/\/ 1.5<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ Evaluating an expression in the REPL gives you the type and value of the result<\/span>\r\n\r\n<span class=\"mi\">1<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">7<\/span>\r\n\r\n<span class=\"cm\">\/* The above line results in:<\/span>\r\n\r\n<span class=\"cm\">  scala&gt; 1 + 7<\/span>\r\n<span class=\"cm\">  res29: Int = 8<\/span>\r\n\r\n<span class=\"cm\">  This means the result of evaluating 1 + 7 is an object of type Int with a<\/span>\r\n<span class=\"cm\">  value of 8<\/span>\r\n\r\n<span class=\"cm\">  Note that &quot;res29&quot; is a sequentially generated variable name to store the<\/span>\r\n<span class=\"cm\">  results of the expressions you typed, your output may differ.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"s\">&quot;Scala strings are surrounded by double quotes&quot;<\/span>\r\n<span class=\"sc\">&#39;a&#39;<\/span> <span class=\"c1\">\/\/ A Scala Char<\/span>\r\n<span class=\"c1\">\/\/ &#39;Single quote strings don&#39;t exist&#39; &lt;= This causes an error<\/span>\r\n\r\n<span class=\"c1\">\/\/ Strings have the usual Java methods defined on them<\/span>\r\n<span class=\"s\">&quot;hello world&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">length<\/span>\r\n<span class=\"s\">&quot;hello world&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">substring<\/span><span class=\"o\">(<\/span><span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">6<\/span><span class=\"o\">)<\/span>\r\n<span class=\"s\">&quot;hello world&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">replace<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;C&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;3&quot;<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ They also have some extra Scala methods. See also: scala.collection.immutable.StringOps<\/span>\r\n<span class=\"s\">&quot;hello world&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">take<\/span><span class=\"o\">(<\/span><span class=\"mi\">5<\/span><span class=\"o\">)<\/span>\r\n<span class=\"s\">&quot;hello world&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">drop<\/span><span class=\"o\">(<\/span><span class=\"mi\">5<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ String interpolation: notice the prefix &quot;s&quot;<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">n<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">45<\/span>\r\n<span class=\"s\">s&quot;We have <\/span><span class=\"si\">$n<\/span><span class=\"s\"> apples&quot;<\/span> <span class=\"c1\">\/\/ =&gt; &quot;We have 45 apples&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Expressions inside interpolated strings are also possible<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">a<\/span> <span class=\"k\">=<\/span> <span class=\"nc\">Array<\/span><span class=\"o\">(<\/span><span class=\"mi\">11<\/span><span class=\"o\">,<\/span> <span class=\"mi\">9<\/span><span class=\"o\">,<\/span> <span class=\"mi\">6<\/span><span class=\"o\">)<\/span>\r\n<span class=\"s\">s&quot;My second daughter is <\/span><span class=\"si\">${<\/span><span class=\"n\">a<\/span><span class=\"o\">(<\/span><span class=\"mi\">0<\/span><span class=\"o\">)<\/span> <span class=\"o\">-<\/span> <span class=\"n\">a<\/span><span class=\"o\">(<\/span><span class=\"mi\">2<\/span><span class=\"o\">)<\/span><span class=\"si\">}<\/span><span class=\"s\"> years old.&quot;<\/span>    <span class=\"c1\">\/\/ =&gt; &quot;My second daughter is 5 years old.&quot;<\/span>\r\n<span class=\"s\">s&quot;We have double the amount of <\/span><span class=\"si\">${<\/span><span class=\"n\">n<\/span> <span class=\"o\">\/<\/span> <span class=\"mf\">2.0<\/span><span class=\"si\">}<\/span><span class=\"s\"> in apples.&quot;<\/span> <span class=\"c1\">\/\/ =&gt; &quot;We have double the amount of 22.5 in apples.&quot;<\/span>\r\n<span class=\"s\">s&quot;Power of 2: <\/span><span class=\"si\">${<\/span><span class=\"n\">math<\/span><span class=\"o\">.<\/span><span class=\"n\">pow<\/span><span class=\"o\">(<\/span><span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)<\/span><span class=\"si\">}<\/span><span class=\"s\">&quot;<\/span>                      <span class=\"c1\">\/\/ =&gt; &quot;Power of 2: 4&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Formatting with interpolated strings with the prefix &quot;f&quot;<\/span>\r\n<span class=\"s\">f&quot;Power of 5: <\/span><span class=\"si\">${<\/span><span class=\"n\">math<\/span><span class=\"o\">.<\/span><span class=\"n\">pow<\/span><span class=\"o\">(<\/span><span class=\"mi\">5<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)<\/span><span class=\"si\">}<\/span><span class=\"s\">%1.0f&quot;<\/span>         <span class=\"c1\">\/\/ &quot;Power of 5: 25&quot;<\/span>\r\n<span class=\"s\">f&quot;Square root of 122: <\/span><span class=\"si\">${<\/span><span class=\"n\">math<\/span><span class=\"o\">.<\/span><span class=\"n\">sqrt<\/span><span class=\"o\">(<\/span><span class=\"mi\">122<\/span><span class=\"o\">)<\/span><span class=\"si\">}<\/span><span class=\"s\">%1.4f&quot;<\/span> <span class=\"c1\">\/\/ &quot;Square root of 122: 11.0454&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Raw strings, ignoring special characters.<\/span>\r\n<span class=\"s\">raw&quot;New line feed: \\n. Carriage return: \\r.&quot;<\/span> <span class=\"c1\">\/\/ =&gt; &quot;New line feed: \\n. Carriage return: \\r.&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Some characters need to be &quot;escaped&quot;, e.g. a double quote inside a string:<\/span>\r\n<span class=\"s\">&quot;They stood outside the \\&quot;Rose and Crown\\&quot;&quot;<\/span> <span class=\"c1\">\/\/ =&gt; &quot;They stood outside the &quot;Rose and Crown&quot;&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Triple double-quotes let strings span multiple rows and contain quotes<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">html<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;&quot;&quot;&lt;form id=&quot;daform&quot;&gt;<\/span>\r\n<span class=\"s\">                &lt;p&gt;Press belo&#39;, Joe&lt;\/p&gt;<\/span>\r\n<span class=\"s\">                &lt;input type=&quot;submit&quot;&gt;<\/span>\r\n<span class=\"s\">              &lt;\/form&gt;&quot;&quot;&quot;<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 2. Functions<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Functions are defined like so:<\/span>\r\n<span class=\"c1\">\/\/<\/span>\r\n<span class=\"c1\">\/\/   def functionName(args...): ReturnType = { body... }<\/span>\r\n<span class=\"c1\">\/\/<\/span>\r\n<span class=\"c1\">\/\/ If you come from more traditional languages, notice the omission of the<\/span>\r\n<span class=\"c1\">\/\/ return keyword. In Scala, the last expression in the function block is the<\/span>\r\n<span class=\"c1\">\/\/ return value.<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">sumOfSquares<\/span><span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">,<\/span> <span class=\"n\">y<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"k\">val<\/span> <span class=\"n\">x2<\/span> <span class=\"k\">=<\/span> <span class=\"n\">x<\/span> <span class=\"o\">*<\/span> <span class=\"n\">x<\/span>\r\n  <span class=\"k\">val<\/span> <span class=\"n\">y2<\/span> <span class=\"k\">=<\/span> <span class=\"n\">y<\/span> <span class=\"o\">*<\/span> <span class=\"n\">y<\/span>\r\n  <span class=\"n\">x2<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y2<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ The { } can be omitted if the function body is a single expression:<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">sumOfSquaresShort<\/span><span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">,<\/span> <span class=\"n\">y<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"n\">x<\/span> <span class=\"o\">*<\/span> <span class=\"n\">x<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y<\/span> <span class=\"o\">*<\/span> <span class=\"n\">y<\/span>\r\n\r\n<span class=\"c1\">\/\/ Syntax for calling functions is familiar:<\/span>\r\n<span class=\"n\">sumOfSquares<\/span><span class=\"o\">(<\/span><span class=\"mi\">3<\/span><span class=\"o\">,<\/span> <span class=\"mi\">4<\/span><span class=\"o\">)<\/span>  <span class=\"c1\">\/\/ =&gt; 25<\/span>\r\n\r\n<span class=\"c1\">\/\/ You can use parameters names to specify them in different order<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">subtract<\/span><span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">,<\/span> <span class=\"n\">y<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"n\">x<\/span> <span class=\"o\">-<\/span> <span class=\"n\">y<\/span>\r\n\r\n<span class=\"n\">subtract<\/span><span class=\"o\">(<\/span><span class=\"mi\">10<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span>     <span class=\"c1\">\/\/ =&gt; 7<\/span>\r\n<span class=\"n\">subtract<\/span><span class=\"o\">(<\/span><span class=\"n\">y<\/span><span class=\"k\">=<\/span><span class=\"mi\">10<\/span><span class=\"o\">,<\/span> <span class=\"n\">x<\/span><span class=\"k\">=<\/span><span class=\"mi\">3<\/span><span class=\"o\">)<\/span> <span class=\"c1\">\/\/ =&gt; -7<\/span>\r\n\r\n<span class=\"c1\">\/\/ In most cases (with recursive functions the most notable exception), function<\/span>\r\n<span class=\"c1\">\/\/ return type can be omitted, and the same type inference we saw with variables<\/span>\r\n<span class=\"c1\">\/\/ will work with function return values:<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">sq<\/span><span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span> <span class=\"k\">=<\/span> <span class=\"n\">x<\/span> <span class=\"o\">*<\/span> <span class=\"n\">x<\/span>  <span class=\"c1\">\/\/ Compiler can guess return type is Int<\/span>\r\n\r\n<span class=\"c1\">\/\/ Functions can have default parameters:<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">addWithDefault<\/span><span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">,<\/span> <span class=\"n\">y<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"mi\">5<\/span><span class=\"o\">)<\/span> <span class=\"k\">=<\/span> <span class=\"n\">x<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y<\/span>\r\n<span class=\"n\">addWithDefault<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)<\/span> <span class=\"c1\">\/\/ =&gt; 3<\/span>\r\n<span class=\"n\">addWithDefault<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">)<\/span>    <span class=\"c1\">\/\/ =&gt; 6<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ Anonymous functions look like this:<\/span>\r\n<span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"n\">x<\/span> <span class=\"o\">*<\/span> <span class=\"n\">x<\/span>\r\n\r\n<span class=\"c1\">\/\/ Unlike defs, even the input type of anonymous functions can be omitted if the<\/span>\r\n<span class=\"c1\">\/\/ context makes it clear. Notice the type &quot;Int =&gt; Int&quot; which means a function<\/span>\r\n<span class=\"c1\">\/\/ that takes Int and returns Int.<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">sq<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"nc\">Int<\/span> <span class=\"k\">=<\/span> <span class=\"n\">x<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"n\">x<\/span> <span class=\"o\">*<\/span> <span class=\"n\">x<\/span>\r\n\r\n<span class=\"c1\">\/\/ Anonymous functions can be called as usual:<\/span>\r\n<span class=\"n\">sq<\/span><span class=\"o\">(<\/span><span class=\"mi\">10<\/span><span class=\"o\">)<\/span>   <span class=\"c1\">\/\/ =&gt; 100<\/span>\r\n\r\n<span class=\"c1\">\/\/ If each argument in your anonymous function is<\/span>\r\n<span class=\"c1\">\/\/ used only once, Scala gives you an even shorter way to define them. These<\/span>\r\n<span class=\"c1\">\/\/ anonymous functions turn out to be extremely common, as will be obvious in<\/span>\r\n<span class=\"c1\">\/\/ the data structure section.<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">addOne<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"nc\">Int<\/span> <span class=\"k\">=<\/span> <span class=\"k\">_<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">weirdSum<\/span><span class=\"k\">:<\/span> <span class=\"o\">(<\/span><span class=\"kt\">Int<\/span><span class=\"o\">,<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"nc\">Int<\/span> <span class=\"k\">=<\/span> <span class=\"o\">(<\/span><span class=\"k\">_<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span> <span class=\"o\">+<\/span> <span class=\"k\">_<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"n\">addOne<\/span><span class=\"o\">(<\/span><span class=\"mi\">5<\/span><span class=\"o\">)<\/span>      <span class=\"c1\">\/\/ =&gt; 6<\/span>\r\n<span class=\"n\">weirdSum<\/span><span class=\"o\">(<\/span><span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">4<\/span><span class=\"o\">)<\/span> <span class=\"c1\">\/\/ =&gt; 16<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ The return keyword exists in Scala, but it only returns from the inner-most<\/span>\r\n<span class=\"c1\">\/\/ def that surrounds it.<\/span>\r\n<span class=\"c1\">\/\/ WARNING: Using return in Scala is error-prone and should be avoided.<\/span>\r\n<span class=\"c1\">\/\/ It has no effect on anonymous functions. For example:<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">foo<\/span><span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"k\">val<\/span> <span class=\"n\">anonFunc<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"nc\">Int<\/span> <span class=\"k\">=<\/span> <span class=\"o\">{<\/span> <span class=\"n\">z<\/span> <span class=\"k\">=&gt;<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">z<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">5<\/span><span class=\"o\">)<\/span>\r\n",



        "1":"<span class=\"k\">return<\/span> <span class=\"n\">z<\/span> <span class=\"c1\">\/\/ This line makes z the return value of foo!<\/span>\r\n    <span class=\"k\">else<\/span>\r\n      <span class=\"n\">z<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">2<\/span>    <span class=\"c1\">\/\/ This line is the return value of anonFunc<\/span>\r\n  <span class=\"o\">}<\/span>\r\n  <span class=\"n\">anonFunc<\/span><span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"o\">)<\/span>  <span class=\"c1\">\/\/ This line is the return value of foo<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 3. Flow Control<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"mi\">1<\/span> <span class=\"n\">to<\/span> <span class=\"mi\">5<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">r<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">1<\/span> <span class=\"n\">to<\/span> <span class=\"mi\">5<\/span>\r\n<span class=\"n\">r<\/span><span class=\"o\">.<\/span><span class=\"n\">foreach<\/span><span class=\"o\">(<\/span><span class=\"n\">println<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"n\">r<\/span> <span class=\"n\">foreach<\/span> <span class=\"n\">println<\/span>\r\n<span class=\"c1\">\/\/ NB: Scala is quite lenient when it comes to dots and brackets - study the<\/span>\r\n<span class=\"c1\">\/\/ rules separately. This helps write DSLs and APIs that read like English<\/span>\r\n\r\n<span class=\"c1\">\/\/ Why doesn&#39;t `println` need any parameters here?<\/span>\r\n<span class=\"c1\">\/\/ Stay tuned for first-class functions in the Functional Programming section below!<\/span>\r\n<span class=\"o\">(<\/span><span class=\"mi\">5<\/span> <span class=\"n\">to<\/span> <span class=\"mi\">1<\/span> <span class=\"n\">by<\/span> <span class=\"o\">-<\/span><span class=\"mi\">1<\/span><span class=\"o\">)<\/span> <span class=\"n\">foreach<\/span> <span class=\"o\">(<\/span><span class=\"n\">println<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ A while loop<\/span>\r\n<span class=\"k\">var<\/span> <span class=\"n\">i<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">0<\/span>\r\n<span class=\"k\">while<\/span> <span class=\"o\">(<\/span><span class=\"n\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span> <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;i &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">i<\/span><span class=\"o\">);<\/span> <span class=\"n\">i<\/span> <span class=\"o\">+=<\/span> <span class=\"mi\">1<\/span> <span class=\"o\">}<\/span>\r\n\r\n<span class=\"k\">while<\/span> <span class=\"o\">(<\/span><span class=\"n\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span> <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;i &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">i<\/span><span class=\"o\">);<\/span> <span class=\"n\">i<\/span> <span class=\"o\">+=<\/span> <span class=\"mi\">1<\/span> <span class=\"o\">}<\/span>   <span class=\"c1\">\/\/ Yes, again. What happened? Why?<\/span>\r\n\r\n<span class=\"n\">i<\/span>    <span class=\"c1\">\/\/ Show the value of i. Note that while is a loop in the classical sense -<\/span>\r\n     <span class=\"c1\">\/\/ it executes sequentially while changing the loop variable. while is very<\/span>\r\n     <span class=\"c1\">\/\/ fast, but using the combinators and comprehensions above is easier<\/span>\r\n     <span class=\"c1\">\/\/ to understand and parallelize<\/span>\r\n\r\n<span class=\"c1\">\/\/ A do-while loop<\/span>\r\n<span class=\"n\">i<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">0<\/span>\r\n<span class=\"k\">do<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;i is still less than 10&quot;<\/span><span class=\"o\">)<\/span>\r\n  <span class=\"n\">i<\/span> <span class=\"o\">+=<\/span> <span class=\"mi\">1<\/span>\r\n<span class=\"o\">}<\/span> <span class=\"k\">while<\/span> <span class=\"o\">(<\/span><span class=\"n\">i<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ Recursion is the idiomatic way of repeating an action in Scala (as in most<\/span>\r\n<span class=\"c1\">\/\/ other functional languages).<\/span>\r\n<span class=\"c1\">\/\/ Recursive functions need an explicit return type, the compiler can&#39;t infer it.<\/span>\r\n<span class=\"c1\">\/\/ Here it&#39;s Unit, which is analagous to a `void` return type in Java<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">showNumbersInRange<\/span><span class=\"o\">(<\/span><span class=\"n\">a<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">,<\/span> <span class=\"n\">b<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Unit<\/span> <span class=\"o\">=<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"n\">print<\/span><span class=\"o\">(<\/span><span class=\"n\">a<\/span><span class=\"o\">)<\/span>\r\n  <span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">a<\/span> <span class=\"o\">&lt;<\/span> <span class=\"n\">b<\/span><span class=\"o\">)<\/span>\r\n    <span class=\"n\">showNumbersInRange<\/span><span class=\"o\">(<\/span><span class=\"n\">a<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"n\">b<\/span><span class=\"o\">)<\/span>\r\n<span class=\"o\">}<\/span>\r\n<span class=\"n\">showNumbersInRange<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">14<\/span><span class=\"o\">)<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ Conditionals<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">x<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">10<\/span>\r\n\r\n<span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">1<\/span><span class=\"o\">)<\/span> <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;yeah&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span> <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;yeah&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">11<\/span><span class=\"o\">)<\/span> <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;yeah&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">11<\/span><span class=\"o\">)<\/span> <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;yeah&quot;<\/span><span class=\"o\">)<\/span> <span class=\"k\">else<\/span> <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;nay&quot;<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span> <span class=\"s\">&quot;yeah&quot;<\/span> <span class=\"k\">else<\/span> <span class=\"s\">&quot;nope&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">text<\/span> <span class=\"k\">=<\/span> <span class=\"k\">if<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">==<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span> <span class=\"s\">&quot;yeah&quot;<\/span> <span class=\"k\">else<\/span> <span class=\"s\">&quot;nope&quot;<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 4. Data Structures<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">a<\/span> <span class=\"k\">=<\/span> <span class=\"nc\">Array<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">,<\/span> <span class=\"mi\">5<\/span><span class=\"o\">,<\/span> <span class=\"mi\">8<\/span><span class=\"o\">,<\/span> <span class=\"mi\">13<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">a<\/span><span class=\"o\">(<\/span><span class=\"mi\">0<\/span><span class=\"o\">)<\/span>     <span class=\"c1\">\/\/ Int = 1<\/span>\r\n<span class=\"n\">a<\/span><span class=\"o\">(<\/span><span class=\"mi\">3<\/span><span class=\"o\">)<\/span>     <span class=\"c1\">\/\/ Int = 5<\/span>\r\n<span class=\"n\">a<\/span><span class=\"o\">(<\/span><span class=\"mi\">21<\/span><span class=\"o\">)<\/span>    <span class=\"c1\">\/\/ Throws an exception<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">m<\/span> <span class=\"k\">=<\/span> <span class=\"nc\">Map<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;fork&quot;<\/span> <span class=\"o\">-&gt;<\/span> <span class=\"s\">&quot;tenedor&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;spoon&quot;<\/span> <span class=\"o\">-&gt;<\/span> <span class=\"s\">&quot;cuchara&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;knife&quot;<\/span> <span class=\"o\">-&gt;<\/span> <span class=\"s\">&quot;cuchillo&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">m<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;fork&quot;<\/span><span class=\"o\">)<\/span>         <span class=\"c1\">\/\/ java.lang.String = tenedor<\/span>\r\n<span class=\"n\">m<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;spoon&quot;<\/span><span class=\"o\">)<\/span>        <span class=\"c1\">\/\/ java.lang.String = cuchara<\/span>\r\n<span class=\"n\">m<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;bottle&quot;<\/span><span class=\"o\">)<\/span>       <span class=\"c1\">\/\/ Throws an exception<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">safeM<\/span> <span class=\"k\">=<\/span> <span class=\"n\">m<\/span><span class=\"o\">.<\/span><span class=\"n\">withDefaultValue<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;no lo se&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">safeM<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;bottle&quot;<\/span><span class=\"o\">)<\/span>   <span class=\"c1\">\/\/ java.lang.String = no lo se<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">s<\/span> <span class=\"k\">=<\/span> <span class=\"nc\">Set<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">,<\/span> <span class=\"mi\">7<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">s<\/span><span class=\"o\">(<\/span><span class=\"mi\">0<\/span><span class=\"o\">)<\/span>      <span class=\"c1\">\/\/ Boolean = false<\/span>\r\n<span class=\"n\">s<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">)<\/span>      <span class=\"c1\">\/\/ Boolean = true<\/span>\r\n\r\n<span class=\"cm\">\/* Look up the documentation of map here -<\/span>\r\n<span class=\"cm\"> * https:\/\/www.scala-lang.org\/api\/current\/scala\/collection\/immutable\/Map.html<\/span>\r\n<span class=\"cm\"> * and make sure you can read it<\/span>\r\n<span class=\"cm\"> *\/<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ Tuples<\/span>\r\n\r\n<span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"o\">(<\/span><span class=\"mi\">4<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;three&quot;<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"o\">(<\/span><span class=\"n\">a<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;three&quot;<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ Why have this?<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">divideInts<\/span> <span class=\"k\">=<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">,<\/span> <span class=\"n\">y<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">\/<\/span> <span class=\"n\">y<\/span><span class=\"o\">,<\/span> <span class=\"n\">x<\/span> <span class=\"o\">%<\/span> <span class=\"n\">y<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ The function divideInts gives you the result and the remainder<\/span>\r\n<span class=\"n\">divideInts<\/span><span class=\"o\">(<\/span><span class=\"mi\">10<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span>    <span class=\"c1\">\/\/ (Int, Int) = (3,1)<\/span>\r\n\r\n<span class=\"c1\">\/\/ To access the elements of a tuple, use _._n where n is the 1-based index of<\/span>\r\n<span class=\"c1\">\/\/ the element<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">d<\/span> <span class=\"k\">=<\/span> <span class=\"n\">divideInts<\/span><span class=\"o\">(<\/span><span class=\"mi\">10<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span>    <span class=\"c1\">\/\/ (Int, Int) = (3,1)<\/span>\r\n\r\n<span class=\"n\">d<\/span><span class=\"o\">.<\/span><span class=\"n\">_1<\/span>    <span class=\"c1\">\/\/ Int = 3<\/span>\r\n<span class=\"n\">d<\/span><span class=\"o\">.<\/span><span class=\"n\">_2<\/span>    <span class=\"c1\">\/\/ Int = 1<\/span>\r\n\r\n<span class=\"c1\">\/\/ Alternatively you can do multiple-variable assignment to tuple, which is more<\/span>\r\n<span class=\"c1\">\/\/ convenient and readable in many cases<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"o\">(<\/span><span class=\"n\">div<\/span><span class=\"o\">,<\/span> <span class=\"n\">mod<\/span><span class=\"o\">)<\/span> <span class=\"k\">=<\/span> <span class=\"n\">divideInts<\/span><span class=\"o\">(<\/span><span class=\"mi\">10<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"n\">div<\/span>     <span class=\"c1\">\/\/ Int = 3<\/span>\r\n<span class=\"n\">mod<\/span>     <span class=\"c1\">\/\/ Int = 1<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 5. Object Oriented Programming<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">  Aside: Everything we&#39;ve done so far in this tutorial has been simple<\/span>\r\n<span class=\"cm\">  expressions (values, functions, etc). These expressions are fine to type into<\/span>\r\n<span class=\"cm\">  the command-line interpreter for quick tests, but they cannot exist by<\/span>\r\n<span class=\"cm\">  themselves in a Scala file. For example, you cannot have just &quot;val x = 5&quot; in<\/span>\r\n<span class=\"cm\">  a Scala file. Instead, the only top-level constructs allowed in Scala are:<\/span>\r\n\r\n<span class=\"cm\">  - objects<\/span>\r\n<span class=\"cm\">  - classes<\/span>\r\n<span class=\"cm\">  - case classes<\/span>\r\n<span class=\"cm\">  - traits<\/span>\r\n\r\n<span class=\"cm\">  And now we will explain what these are.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ classes are similar to classes in other languages. Constructor arguments are<\/span>\r\n<span class=\"c1\">\/\/ declared after the class name, and initialization is done in the class body.<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">Dog<\/span><span class=\"o\">(<\/span><span class=\"n\">br<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"c1\">\/\/ Constructor code here<\/span>\r\n  <span class=\"k\">var<\/span> <span class=\"n\">breed<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span> <span class=\"o\">=<\/span> <span class=\"n\">br<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Define a method called bark, returning a String<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"n\">bark<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;Woof, woof!&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Values and methods are assumed public. &quot;protected&quot; and &quot;private&quot; keywords<\/span>\r\n  <span class=\"c1\">\/\/ are also available.<\/span>\r\n  <span class=\"k\">private<\/span> <span class=\"k\">def<\/span> <span class=\"n\">sleep<\/span><span class=\"o\">(<\/span><span class=\"n\">hours<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span> <span class=\"k\">=<\/span>\r\n    <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"s\">s&quot;I&#39;m sleeping for <\/span><span class=\"si\">$hours<\/span><span class=\"s\"> hours&quot;<\/span><span class=\"o\">)<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Abstract methods are simply methods with no body. If we uncomment the<\/span>\r\n  <span class=\"c1\">\/\/ def line below, class Dog would need to be declared abstract like so:<\/span>\r\n  <span class=\"c1\">\/\/   abstract class Dog(...) { ... }<\/span>\r\n  <span class=\"c1\">\/\/ def chaseAfter(what: String): String<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">mydog<\/span> <span class=\"k\">=<\/span> <span class=\"k\">new<\/span> <span class=\"nc\">Dog<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;greyhound&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">mydog<\/span><span class=\"o\">.<\/span><span class=\"n\">breed<\/span><span class=\"o\">)<\/span> <span class=\"c1\">\/\/ =&gt; &quot;greyhound&quot;<\/span>\r\n<span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">mydog<\/span><span class=\"o\">.<\/span><span class=\"n\">bark<\/span><span class=\"o\">)<\/span>  <span class=\"c1\">\/\/ =&gt; &quot;Woof, woof!&quot;<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ The &quot;object&quot; keyword creates a type AND a singleton instance of it. It is<\/span>\r\n<span class=\"c1\">\/\/ common for Scala classes to have a &quot;companion object&quot;, where the per-instance<\/span>\r\n<span class=\"c1\">\/\/ behavior is captured in the classes themselves, but behavior related to all<\/span>\r\n<span class=\"c1\">\/\/ instance of that class go in objects. The difference is similar to class<\/span>\r\n<span class=\"c1\">\/\/ methods vs static methods in other languages. Note that objects and classes<\/span>\r\n<span class=\"c1\">\/\/ can have the same name.<\/span>\r\n<span class=\"k\">object<\/span> <span class=\"nc\">Dog<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"n\">allKnownBreeds<\/span> <span class=\"k\">=<\/span> <span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;pitbull&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;shepherd&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;retriever&quot;<\/span><span class=\"o\">)<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"n\">createDog<\/span><span class=\"o\">(<\/span><span class=\"n\">breed<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span><span class=\"o\">)<\/span> <span class=\"k\">=<\/span> <span class=\"k\">new<\/span> <span class=\"nc\">Dog<\/span><span class=\"o\">(<\/span><span class=\"n\">breed<\/span><span class=\"o\">)<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ Case classes are classes that have extra functionality built in. A common<\/span>\r\n<span class=\"c1\">\/\/ question for Scala beginners is when to use classes and when to use case<\/span>\r\n<span class=\"c1\">\/\/ classes. The line is quite fuzzy, but in general, classes tend to focus on<\/span>\r\n<span class=\"c1\">\/\/ encapsulation, polymorphism, and behavior. The values in these classes tend<\/span>\r\n<span class=\"c1\">\/\/ to be private, and only methods are exposed. The primary purpose of case<\/span>\r\n<span class=\"c1\">\/\/ classes is to hold immutable data. They often have few methods, and the<\/span>\r\n<span class=\"c1\">\/\/ methods rarely have side-effects.<\/span>\r\n<span class=\"k\">case<\/span> <span class=\"k\">class<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"n\">name<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span><span class=\"o\">,<\/span> <span class=\"n\">phoneNumber<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ Create a new instance. Note cases classes don&#39;t need &quot;new&quot;<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">george<\/span> <span class=\"k\">=<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;George&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;1234&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">kate<\/span> <span class=\"k\">=<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Kate&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;4567&quot;<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ With case classes, you get a few perks for free, like getters:<\/span>\r\n<span class=\"n\">george<\/span><span class=\"o\">.<\/span><span class=\"n\">phoneNumber<\/span>  <span class=\"c1\">\/\/ =&gt; &quot;1234&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Per field equality (no need to override .equals)<\/span>\r\n<span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;George&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;1234&quot;<\/span><span class=\"o\">)<\/span> <span class=\"o\">==<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Kate&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;1236&quot;<\/span><span class=\"o\">)<\/span>  <span class=\"c1\">\/\/ =&gt; false<\/span>\r\n\r\n<span class=\"c1\">\/\/ Easy way to copy<\/span>\r\n<span class=\"c1\">\/\/ otherGeorge == Person(&quot;George&quot;, &quot;9876&quot;)<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">otherGeorge<\/span> <span class=\"k\">=<\/span> <span class=\"n\">george<\/span><span class=\"o\">.<\/span><span class=\"n\">copy<\/span><span class=\"o\">(<\/span><span class=\"n\">phoneNumber<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;9876&quot;<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ And many others. Case classes also get pattern matching for free, see below.<\/span>\r\n\r\n<span class=\"c1\">\/\/ Traits<\/span>\r\n<span class=\"c1\">\/\/ Similar to Java interfaces, traits define an object type and method<\/span>\r\n<span class=\"c1\">\/\/ signatures. Scala allows partial implementation of those methods.<\/span>\r\n<span class=\"c1\">\/\/ Constructor parameters are not allowed. Traits can inherit from other<\/span>\r\n<span class=\"c1\">\/\/ traits or classes without parameters.<\/span>\r\n\r\n<span class=\"k\">trait<\/span> <span class=\"nc\">Dog<\/span> <span class=\"o\">{<\/span>\r\n",



        "2":"<span class=\"k\">def<\/span> <span class=\"n\">breed<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"n\">color<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"n\">bark<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Boolean<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">true<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"n\">bite<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Boolean<\/span>\r\n<span class=\"o\">}<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">SaintBernard<\/span> <span class=\"k\">extends<\/span> <span class=\"nc\">Dog<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"k\">val<\/span> <span class=\"n\">breed<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;Saint Bernard&quot;<\/span>\r\n    <span class=\"k\">val<\/span> <span class=\"n\">color<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;brown&quot;<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"n\">bite<\/span> <span class=\"k\">=<\/span> <span class=\"kc\">false<\/span>\r\n<span class=\"o\">}<\/span>  \r\n\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">b<\/span>  \r\n<span class=\"n\">res0<\/span><span class=\"k\">:<\/span> <span class=\"kt\">SaintBernard<\/span> <span class=\"o\">=<\/span> <span class=\"nc\">SaintBernard<\/span><span class=\"k\">@<\/span><span class=\"mi\">3<\/span><span class=\"n\">e57cd70<\/span>  \r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">b<\/span><span class=\"o\">.<\/span><span class=\"n\">breed<\/span>  \r\n<span class=\"n\">res1<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span> <span class=\"o\">=<\/span> <span class=\"nc\">Saint<\/span> <span class=\"nc\">Bernard<\/span>  \r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">b<\/span><span class=\"o\">.<\/span><span class=\"n\">bark<\/span>  \r\n<span class=\"n\">res2<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Boolean<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">true<\/span>  \r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">b<\/span><span class=\"o\">.<\/span><span class=\"n\">bite<\/span>  \r\n<span class=\"n\">res3<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Boolean<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">false<\/span>  \r\n\r\n<span class=\"c1\">\/\/ A trait can also be used as Mixin. The class &quot;extends&quot; the first trait,<\/span>\r\n<span class=\"c1\">\/\/ but the keyword &quot;with&quot; can add additional traits.<\/span>\r\n\r\n<span class=\"k\">trait<\/span> <span class=\"nc\">Bark<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"n\">bark<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span> <span class=\"o\">=<\/span> <span class=\"s\">&quot;Woof&quot;<\/span>\r\n<span class=\"o\">}<\/span>\r\n<span class=\"k\">trait<\/span> <span class=\"nc\">Dog<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"n\">breed<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span>\r\n    <span class=\"k\">def<\/span> <span class=\"n\">color<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span>\r\n<span class=\"o\">}<\/span>\r\n<span class=\"k\">class<\/span> <span class=\"nc\">SaintBernard<\/span> <span class=\"k\">extends<\/span> <span class=\"nc\">Dog<\/span> <span class=\"k\">with<\/span> <span class=\"nc\">Bark<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"k\">val<\/span> <span class=\"n\">breed<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;Saint Bernard&quot;<\/span>\r\n    <span class=\"k\">val<\/span> <span class=\"n\">color<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;brown&quot;<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"k\">val<\/span> <span class=\"n\">b<\/span> <span class=\"k\">=<\/span> <span class=\"k\">new<\/span> <span class=\"nc\">SaintBernard<\/span>\r\n<span class=\"n\">b<\/span><span class=\"k\">:<\/span> <span class=\"kt\">SaintBernard<\/span> <span class=\"o\">=<\/span> <span class=\"nc\">SaintBernard<\/span><span class=\"k\">@<\/span><span class=\"mi\">7<\/span><span class=\"n\">b69c6ba<\/span>\r\n<span class=\"n\">scala<\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">b<\/span><span class=\"o\">.<\/span><span class=\"n\">bark<\/span>\r\n<span class=\"n\">res0<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span> <span class=\"o\">=<\/span> <span class=\"nc\">Woof<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 6. Pattern Matching<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Pattern matching is a powerful and commonly used feature in Scala. Here&#39;s how<\/span>\r\n<span class=\"c1\">\/\/ you pattern match a case class. NB: Unlike other languages, Scala cases do<\/span>\r\n<span class=\"c1\">\/\/ not need breaks, fall-through does not happen.<\/span>\r\n\r\n<span class=\"k\">def<\/span> <span class=\"n\">matchPerson<\/span><span class=\"o\">(<\/span><span class=\"n\">person<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Person<\/span><span class=\"o\">)<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span> <span class=\"o\">=<\/span> <span class=\"n\">person<\/span> <span class=\"k\">match<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"c1\">\/\/ Then you specify the patterns:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;George&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">number<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">&quot;We found George! His number is &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">number<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Kate&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">number<\/span><span class=\"o\">)<\/span>   <span class=\"k\">=&gt;<\/span> <span class=\"s\">&quot;We found Kate! Her number is &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">number<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"n\">name<\/span><span class=\"o\">,<\/span> <span class=\"n\">number<\/span><span class=\"o\">)<\/span>     <span class=\"k\">=&gt;<\/span> <span class=\"s\">&quot;We matched someone : &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">name<\/span> <span class=\"o\">+<\/span> <span class=\"s\">&quot;, phone : &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">number<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Regular expressions are also built in.<\/span>\r\n<span class=\"c1\">\/\/ Create a regex with the `r` method on a string:<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">email<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;(.*)@(.*)&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">r<\/span>\r\n\r\n<span class=\"c1\">\/\/ Pattern matching might look familiar to the switch statements in the C family<\/span>\r\n<span class=\"c1\">\/\/ of languages, but this is much more powerful. In Scala, you can match much<\/span>\r\n<span class=\"c1\">\/\/ more:<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">matchEverything<\/span><span class=\"o\">(<\/span><span class=\"n\">obj<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Any<\/span><span class=\"o\">)<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span> <span class=\"o\">=<\/span> <span class=\"n\">obj<\/span> <span class=\"k\">match<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"c1\">\/\/ You can match values:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"s\">&quot;Hello world&quot;<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">&quot;Got the string Hello world&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can match by type:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Double<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s\">&quot;Got a Double: &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">x<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can specify conditions:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"n\">x<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"kt\">if<\/span> <span class=\"kt\">x<\/span> <span class=\"kt\">&gt;<\/span> <span class=\"err\">10000<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s\">&quot;Got a pretty big number!&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can match case classes as before:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"n\">name<\/span><span class=\"o\">,<\/span> <span class=\"n\">number<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">s&quot;Got contact info for <\/span><span class=\"si\">$name<\/span><span class=\"s\">!&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can match regular expressions:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"n\">email<\/span><span class=\"o\">(<\/span><span class=\"n\">name<\/span><span class=\"o\">,<\/span> <span class=\"n\">domain<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">s&quot;Got email address <\/span><span class=\"si\">$name<\/span><span class=\"s\">@<\/span><span class=\"si\">$domain<\/span><span class=\"s\">&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can match tuples:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"o\">(<\/span><span class=\"n\">a<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">,<\/span> <span class=\"n\">b<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Double<\/span><span class=\"o\">,<\/span> <span class=\"n\">c<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">s&quot;Got a tuple: <\/span><span class=\"si\">$a<\/span><span class=\"s\">, <\/span><span class=\"si\">$b<\/span><span class=\"s\">, <\/span><span class=\"si\">$c<\/span><span class=\"s\">&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can match data structures:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"n\">b<\/span><span class=\"o\">,<\/span> <span class=\"n\">c<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">s&quot;Got a list with three elements and starts with 1: 1, <\/span><span class=\"si\">$b<\/span><span class=\"s\">, <\/span><span class=\"si\">$c<\/span><span class=\"s\">&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ You can nest patterns:<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"nc\">List<\/span><span class=\"o\">((<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;YAY&quot;<\/span><span class=\"o\">)))<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">&quot;Got a list of list of tuple&quot;<\/span>\r\n\r\n  <span class=\"c1\">\/\/ Match any case (default) if all previous haven&#39;t matched<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"k\">_<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">&quot;Got unknown object&quot;<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ In fact, you can pattern match any object with an &quot;unapply&quot; method. This<\/span>\r\n<span class=\"c1\">\/\/ feature is so powerful that Scala lets you define whole functions as<\/span>\r\n<span class=\"c1\">\/\/ patterns:<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">patternFunc<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Person<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"nc\">String<\/span> <span class=\"k\">=<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;George&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">number<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">s&quot;George&#39;s number: <\/span><span class=\"si\">$number<\/span><span class=\"s\">&quot;<\/span>\r\n  <span class=\"k\">case<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"n\">name<\/span><span class=\"o\">,<\/span> <span class=\"n\">number<\/span><span class=\"o\">)<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"s\">s&quot;Random person&#39;s number: <\/span><span class=\"si\">$number<\/span><span class=\"s\">&quot;<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 7. Functional Programming<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Scala allows methods and functions to return, or take as parameters, other<\/span>\r\n<span class=\"c1\">\/\/ functions or methods.<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">add10<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"nc\">Int<\/span> <span class=\"k\">=<\/span> <span class=\"k\">_<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">10<\/span> <span class=\"c1\">\/\/ A function taking an Int and returning an Int<\/span>\r\n<span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span> <span class=\"n\">map<\/span> <span class=\"n\">add10<\/span> <span class=\"c1\">\/\/ List(11, 12, 13) - add10 is applied to each element<\/span>\r\n\r\n",


        "4":"<span class=\"c1\">\/\/ Anonymous functions can be used instead of named functions:<\/span>\r\n<span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span> <span class=\"n\">map<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"n\">x<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ And the underscore symbol, can be used if there is just one argument to the<\/span>\r\n<span class=\"c1\">\/\/ anonymous function. It gets bound as the variable<\/span>\r\n<span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span> <span class=\"n\">map<\/span> <span class=\"o\">(<\/span><span class=\"k\">_<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ If the anonymous block AND the function you are applying both take one<\/span>\r\n<span class=\"c1\">\/\/ argument, you can even omit the underscore<\/span>\r\n<span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Dom&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;Bob&quot;<\/span><span class=\"o\">,<\/span> <span class=\"s\">&quot;Natalia&quot;<\/span><span class=\"o\">)<\/span> <span class=\"n\">foreach<\/span> <span class=\"n\">println<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ Combinators<\/span>\r\n<span class=\"c1\">\/\/ Using `s` from above:<\/span>\r\n<span class=\"c1\">\/\/ val s = Set(1, 3, 7)<\/span>\r\n\r\n<span class=\"n\">s<\/span><span class=\"o\">.<\/span><span class=\"n\">map<\/span><span class=\"o\">(<\/span><span class=\"n\">sq<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">sSquared<\/span> <span class=\"k\">=<\/span> <span class=\"n\">s<\/span><span class=\"o\">.<\/span> <span class=\"n\">map<\/span><span class=\"o\">(<\/span><span class=\"n\">sq<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"n\">sSquared<\/span><span class=\"o\">.<\/span><span class=\"n\">filter<\/span><span class=\"o\">(<\/span><span class=\"k\">_<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"n\">sSquared<\/span><span class=\"o\">.<\/span><span class=\"n\">reduce<\/span> <span class=\"o\">(<\/span><span class=\"k\">_<\/span><span class=\"o\">+<\/span><span class=\"k\">_<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ The filter function takes a predicate (a function from A -&gt; Boolean) and<\/span>\r\n<span class=\"c1\">\/\/ selects all elements which satisfy the predicate<\/span>\r\n<span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">)<\/span> <span class=\"n\">filter<\/span> <span class=\"o\">(<\/span><span class=\"k\">_<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">2<\/span><span class=\"o\">)<\/span> <span class=\"c1\">\/\/ List(3)<\/span>\r\n<span class=\"k\">case<\/span> <span class=\"k\">class<\/span> <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"n\">name<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span><span class=\"o\">,<\/span> <span class=\"n\">age<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span>\r\n<span class=\"nc\">List<\/span><span class=\"o\">(<\/span>\r\n  <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"n\">name<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;Dom&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">age<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">23<\/span><span class=\"o\">),<\/span>\r\n  <span class=\"nc\">Person<\/span><span class=\"o\">(<\/span><span class=\"n\">name<\/span> <span class=\"k\">=<\/span> <span class=\"s\">&quot;Bob&quot;<\/span><span class=\"o\">,<\/span> <span class=\"n\">age<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">30<\/span><span class=\"o\">)<\/span>\r\n<span class=\"o\">).<\/span><span class=\"n\">filter<\/span><span class=\"o\">(<\/span><span class=\"k\">_<\/span><span class=\"o\">.<\/span><span class=\"n\">age<\/span> <span class=\"o\">&gt;<\/span> <span class=\"mi\">25<\/span><span class=\"o\">)<\/span> <span class=\"c1\">\/\/ List(Person(&quot;Bob&quot;, 30))<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ Certain collections (such as List) in Scala have a `foreach` method,<\/span>\r\n<span class=\"c1\">\/\/ which takes as an argument a type returning Unit - that is, a void method<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">aListOfNumbers<\/span> <span class=\"k\">=<\/span> <span class=\"nc\">List<\/span><span class=\"o\">(<\/span><span class=\"mi\">1<\/span><span class=\"o\">,<\/span> <span class=\"mi\">2<\/span><span class=\"o\">,<\/span> <span class=\"mi\">3<\/span><span class=\"o\">,<\/span> <span class=\"mi\">4<\/span><span class=\"o\">,<\/span> <span class=\"mi\">10<\/span><span class=\"o\">,<\/span> <span class=\"mi\">20<\/span><span class=\"o\">,<\/span> <span class=\"mi\">100<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">aListOfNumbers<\/span> <span class=\"n\">foreach<\/span> <span class=\"o\">(<\/span><span class=\"n\">x<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">x<\/span><span class=\"o\">))<\/span>\r\n<span class=\"n\">aListOfNumbers<\/span> <span class=\"n\">foreach<\/span> <span class=\"n\">println<\/span>\r\n\r\n<span class=\"c1\">\/\/ For comprehensions<\/span>\r\n\r\n<span class=\"k\">for<\/span> <span class=\"o\">{<\/span> <span class=\"n\">n<\/span> <span class=\"k\">&lt;-<\/span> <span class=\"n\">s<\/span> <span class=\"o\">}<\/span> <span class=\"k\">yield<\/span> <span class=\"n\">sq<\/span><span class=\"o\">(<\/span><span class=\"n\">n<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"k\">val<\/span> <span class=\"n\">nSquared2<\/span> <span class=\"k\">=<\/span> <span class=\"k\">for<\/span> <span class=\"o\">{<\/span> <span class=\"n\">n<\/span> <span class=\"k\">&lt;-<\/span> <span class=\"n\">s<\/span> <span class=\"o\">}<\/span> <span class=\"k\">yield<\/span> <span class=\"n\">sq<\/span><span class=\"o\">(<\/span><span class=\"n\">n<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"k\">for<\/span> <span class=\"o\">{<\/span> <span class=\"n\">n<\/span> <span class=\"k\">&lt;-<\/span> <span class=\"n\">nSquared2<\/span> <span class=\"k\">if<\/span> <span class=\"n\">n<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span> <span class=\"o\">}<\/span> <span class=\"k\">yield<\/span> <span class=\"n\">n<\/span>\r\n\r\n<span class=\"k\">for<\/span> <span class=\"o\">{<\/span> <span class=\"n\">n<\/span> <span class=\"k\">&lt;-<\/span> <span class=\"n\">s<\/span><span class=\"o\">;<\/span> <span class=\"n\">nSquared<\/span> <span class=\"k\">=<\/span> <span class=\"n\">n<\/span> <span class=\"o\">*<\/span> <span class=\"n\">n<\/span> <span class=\"k\">if<\/span> <span class=\"n\">nSquared<\/span> <span class=\"o\">&lt;<\/span> <span class=\"mi\">10<\/span><span class=\"o\">}<\/span> <span class=\"k\">yield<\/span> <span class=\"n\">nSquared<\/span>\r\n\r\n<span class=\"cm\">\/* NB Those were not for loops. The semantics of a for loop is &#39;repeat&#39;, whereas<\/span>\r\n<span class=\"cm\">   a for-comprehension defines a relationship between two sets of data. *\/<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 8. Implicits<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"cm\">\/* WARNING WARNING: Implicits are a set of powerful features of Scala, and<\/span>\r\n<span class=\"cm\"> * therefore it is easy to abuse them. Beginners to Scala should resist the<\/span>\r\n<span class=\"cm\"> * temptation to use them until they understand not only how they work, but also<\/span>\r\n<span class=\"cm\"> * best practices around them. We only include this section in the tutorial<\/span>\r\n<span class=\"cm\"> * because they are so commonplace in Scala libraries that it is impossible to<\/span>\r\n<span class=\"cm\"> * do anything meaningful without using a library that has implicits. This is<\/span>\r\n<span class=\"cm\"> * meant for you to understand and work with implicits, not declare your own.<\/span>\r\n<span class=\"cm\"> *\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Any value (vals, functions, objects, etc) can be declared to be implicit by<\/span>\r\n<span class=\"c1\">\/\/ using the, you guessed it, &quot;implicit&quot; keyword. Note we are using the Dog<\/span>\r\n<span class=\"c1\">\/\/ class from section 5 in these examples.<\/span>\r\n<span class=\"k\">implicit<\/span> <span class=\"k\">val<\/span> <span class=\"n\">myImplicitInt<\/span> <span class=\"k\">=<\/span> <span class=\"mi\">100<\/span>\r\n<span class=\"k\">implicit<\/span> <span class=\"k\">def<\/span> <span class=\"n\">myImplicitFunction<\/span><span class=\"o\">(<\/span><span class=\"n\">breed<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span><span class=\"o\">)<\/span> <span class=\"k\">=<\/span> <span class=\"k\">new<\/span> <span class=\"nc\">Dog<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Golden &quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">breed<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ By itself, implicit keyword doesn&#39;t change the behavior of the value, so<\/span>\r\n<span class=\"c1\">\/\/ above values can be used as usual.<\/span>\r\n<span class=\"n\">myImplicitInt<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">2<\/span>                   <span class=\"c1\">\/\/ =&gt; 102<\/span>\r\n<span class=\"n\">myImplicitFunction<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Pitbull&quot;<\/span><span class=\"o\">).<\/span><span class=\"n\">breed<\/span> <span class=\"c1\">\/\/ =&gt; &quot;Golden Pitbull&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ The difference is that these values are now eligible to be used when another<\/span>\r\n<span class=\"c1\">\/\/ piece of code &quot;needs&quot; an implicit value. One such situation is implicit<\/span>\r\n<span class=\"c1\">\/\/ function arguments:<\/span>\r\n<span class=\"k\">def<\/span> <span class=\"n\">sendGreetings<\/span><span class=\"o\">(<\/span><span class=\"n\">toWhom<\/span><span class=\"k\">:<\/span> <span class=\"kt\">String<\/span><span class=\"o\">)(<\/span><span class=\"k\">implicit<\/span> <span class=\"n\">howMany<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Int<\/span><span class=\"o\">)<\/span> <span class=\"k\">=<\/span>\r\n  <span class=\"s\">s&quot;Hello <\/span><span class=\"si\">$toWhom<\/span><span class=\"s\">, <\/span><span class=\"si\">$howMany<\/span><span class=\"s\"> blessings to you and yours!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ If we supply a value for &quot;howMany&quot;, the function behaves as usual<\/span>\r\n<span class=\"n\">sendGreetings<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;John&quot;<\/span><span class=\"o\">)(<\/span><span class=\"mi\">1000<\/span><span class=\"o\">)<\/span>  <span class=\"c1\">\/\/ =&gt; &quot;Hello John, 1000 blessings to you and yours!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ But if we omit the implicit parameter, an implicit value of the same type is<\/span>\r\n<span class=\"c1\">\/\/ used, in this case, &quot;myImplicitInt&quot;:<\/span>\r\n<span class=\"n\">sendGreetings<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Jane&quot;<\/span><span class=\"o\">)<\/span>  <span class=\"c1\">\/\/ =&gt; &quot;Hello Jane, 100 blessings to you and yours!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Implicit function parameters enable us to simulate type classes in other<\/span>\r\n<span class=\"c1\">\/\/ functional languages. It is so often used that it gets its own shorthand. The<\/span>\r\n<span class=\"c1\">\/\/ following two lines mean the same thing:<\/span>\r\n<span class=\"c1\">\/\/ def foo[T](implicit c: C[T]) = ...<\/span>\r\n<span class=\"c1\">\/\/ def foo[T : C] = ...<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/ Another situation in which the compiler looks for an implicit is if you have<\/span>\r\n<span class=\"c1\">\/\/   obj.method(...)<\/span>\r\n<span class=\"c1\">\/\/ but &quot;obj&quot; doesn&#39;t have &quot;method&quot; as a method. In this case, if there is an<\/span>\r\n<span class=\"c1\">\/\/ implicit conversion of type A =&gt; B, where A is the type of obj, and B has a<\/span>\r\n<span class=\"c1\">\/\/ method called &quot;method&quot;, that conversion is applied. So having<\/span>\r\n<span class=\"c1\">\/\/ myImplicitFunction above in scope, we can say:<\/span>\r\n<span class=\"s\">&quot;Retriever&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">breed<\/span> <span class=\"c1\">\/\/ =&gt; &quot;Golden Retriever&quot;<\/span>\r\n<span class=\"s\">&quot;Sheperd&quot;<\/span><span class=\"o\">.<\/span><span class=\"n\">bark<\/span>    <span class=\"c1\">\/\/ =&gt; &quot;Woof, woof!&quot;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Here the String is first converted to Dog using our function above, and then<\/span>\r\n<span class=\"c1\">\/\/ the appropriate method is called. This is an extremely powerful feature, but<\/span>\r\n<span class=\"c1\">\/\/ again, it is not to be used lightly. In fact, when you defined the implicit<\/span>\r\n<span class=\"c1\">\/\/ function above, your compiler should have given you a warning, that you<\/span>\r\n<span class=\"c1\">\/\/ shouldn&#39;t do this unless you really know what you&#39;re doing.<\/span>\r\n\r\n\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n<span class=\"c1\">\/\/ 9. Misc<\/span>\r\n<span class=\"c1\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ Importing things<\/span>\r\n<span class=\"k\">import<\/span> <span class=\"nn\">scala.collection.immutable.List<\/span>\r\n\r\n<span class=\"c1\">\/\/ Import all &quot;sub packages&quot;<\/span>\r\n<span class=\"k\">import<\/span> <span class=\"nn\">scala.collection.immutable._<\/span>\r\n\r\n<span class=\"c1\">\/\/ Import multiple classes in one statement<\/span>\r\n<span class=\"k\">import<\/span> <span class=\"nn\">scala.collection.immutable.<\/span><span class=\"o\">{<\/span><span class=\"nc\">List<\/span><span class=\"o\">,<\/span> <span class=\"nc\">Map<\/span><span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Rename an import using &#39;=&gt;&#39;<\/span>\r\n<span class=\"k\">import<\/span> <span class=\"nn\">scala.collection.immutable.<\/span><span class=\"o\">{<\/span><span class=\"nc\">List<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"nc\">ImmutableList<\/span><span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Import all classes, except some. The following excludes Map and Set:<\/span>\r\n<span class=\"k\">import<\/span> <span class=\"nn\">scala.collection.immutable.<\/span><span class=\"o\">{<\/span><span class=\"nc\">Map<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"k\">_<\/span><span class=\"o\">,<\/span> <span class=\"nc\">Set<\/span> <span class=\"k\">=&gt;<\/span> <span class=\"k\">_<\/span><span class=\"o\">,<\/span> <span class=\"k\">_<\/span><span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Java classes can also be imported. Scala syntax can be used<\/span>\r\n<span class=\"k\">import<\/span> <span class=\"nn\">java.swing.<\/span><span class=\"o\">{<\/span><span class=\"nc\">JFrame<\/span><span class=\"o\">,<\/span> <span class=\"nc\">JWindow<\/span><span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Your programs entry point is defined in a scala file using an object, with a<\/span>\r\n<span class=\"c1\">\/\/ single method, main:<\/span>\r\n<span class=\"k\">object<\/span> <span class=\"nc\">Application<\/span> <span class=\"o\">{<\/span>\r\n  <span class=\"k\">def<\/span> <span class=\"n\">main<\/span><span class=\"o\">(<\/span><span class=\"n\">args<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Array<\/span><span class=\"o\">[<\/span><span class=\"kt\">String<\/span><span class=\"o\">])<\/span><span class=\"k\">:<\/span> <span class=\"kt\">Unit<\/span> <span class=\"o\">=<\/span> <span class=\"o\">{<\/span>\r\n    <span class=\"c1\">\/\/ stuff goes here.<\/span>\r\n  <span class=\"o\">}<\/span>\r\n<span class=\"o\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Files can contain multiple classes and objects. Compile with scalac<\/span>\r\n\r\n\r\n\r\n\r\n<span class=\"c1\">\/\/ Input and output<\/span>\r\n\r\n<span class=\"c1\">\/\/ To read a file line by line<\/span>\r\n<span class=\"k\">import<\/span> <span class=\"nn\">scala.io.Source<\/span>\r\n<span class=\"k\">for<\/span><span class=\"o\">(<\/span><span class=\"n\">line<\/span> <span class=\"k\">&lt;-<\/span> <span class=\"nc\">Source<\/span><span class=\"o\">.<\/span><span class=\"n\">fromFile<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;myfile.txt&quot;<\/span><span class=\"o\">).<\/span><span class=\"n\">getLines<\/span><span class=\"o\">())<\/span>\r\n  <span class=\"n\">println<\/span><span class=\"o\">(<\/span><span class=\"n\">line<\/span><span class=\"o\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ To write a file use Java&#39;s PrintWriter<\/span>\r\n<span class=\"k\">val<\/span> <span class=\"n\">writer<\/span> <span class=\"k\">=<\/span> <span class=\"k\">new<\/span> <span class=\"nc\">PrintWriter<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;myfile.txt&quot;<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">writer<\/span><span class=\"o\">.<\/span><span class=\"n\">write<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Writing line for line&quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">util<\/span><span class=\"o\">.<\/span><span class=\"nc\">Properties<\/span><span class=\"o\">.<\/span><span class=\"n\">lineSeparator<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">writer<\/span><span class=\"o\">.<\/span><span class=\"n\">write<\/span><span class=\"o\">(<\/span><span class=\"s\">&quot;Another line here&quot;<\/span> <span class=\"o\">+<\/span> <span class=\"n\">util<\/span><span class=\"o\">.<\/span><span class=\"nc\">Properties<\/span><span class=\"o\">.<\/span><span class=\"n\">lineSeparator<\/span><span class=\"o\">)<\/span>\r\n<span class=\"n\">writer<\/span><span class=\"o\">.<\/span><span class=\"n\">close<\/span><span class=\"o\">()<\/span>\r\n"

    },

























    "go": { "0":"<span><\/span><span class=\"c1\">\/\/ Single line comment<\/span>\r\n<span class=\"cm\">\/* Multi-<\/span>\r\n<span class=\"cm\"> line comment *\/<\/span>\r\n\r\n<span class=\"c1\">\/\/ A package clause starts every source file.<\/span>\r\n<span class=\"c1\">\/\/ Main is a special name declaring an executable rather than a library.<\/span>\r\n<span class=\"kn\">package<\/span> <span class=\"nx\">main<\/span>\r\n\r\n<span class=\"c1\">\/\/ Import declaration declares library packages referenced in this file.<\/span>\r\n<span class=\"kn\">import<\/span> <span class=\"p\">(<\/span>\r\n    <span class=\"s\">&quot;fmt&quot;<\/span>       <span class=\"c1\">\/\/ A package in the Go standard library.<\/span>\r\n    <span class=\"s\">&quot;io\/ioutil&quot;<\/span> <span class=\"c1\">\/\/ Implements some I\/O utility functions.<\/span>\r\n    <span class=\"nx\">m<\/span> <span class=\"s\">&quot;math&quot;<\/span>    <span class=\"c1\">\/\/ Math library with local alias m.<\/span>\r\n    <span class=\"s\">&quot;net\/http&quot;<\/span>  <span class=\"c1\">\/\/ Yes, a web server!<\/span>\r\n    <span class=\"s\">&quot;os&quot;<\/span>        <span class=\"c1\">\/\/ OS functions like working with the file system<\/span>\r\n    <span class=\"s\">&quot;strconv&quot;<\/span>   <span class=\"c1\">\/\/ String conversions.<\/span>\r\n<span class=\"p\">)<\/span>\r\n\r\n<span class=\"c1\">\/\/ A function definition. Main is special. It is the entry point for the<\/span>\r\n<span class=\"c1\">\/\/ executable program. Love it or hate it, Go uses brace brackets.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">main<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Println outputs a line to stdout.<\/span>\r\n    <span class=\"c1\">\/\/ It comes from the package fmt.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Hello world!&quot;<\/span><span class=\"p\">)<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Call another function within this package.<\/span>\r\n    <span class=\"nx\">beyondHello<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Functions have parameters in parentheses.<\/span>\r\n<span class=\"c1\">\/\/ If there are no parameters, empty parentheses are still required.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">beyondHello<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">x<\/span> <span class=\"kt\">int<\/span> <span class=\"c1\">\/\/ Variable declaration. Variables must be declared before use.<\/span>\r\n    <span class=\"nx\">x<\/span> <span class=\"p\">=<\/span> <span class=\"mi\">3<\/span>     <span class=\"c1\">\/\/ Variable assignment.<\/span>\r\n    <span class=\"c1\">\/\/ &quot;Short&quot; declarations use := to infer the type, declare, and assign.<\/span>\r\n    <span class=\"nx\">y<\/span> <span class=\"o\">:=<\/span> <span class=\"mi\">4<\/span>\r\n    <span class=\"nx\">sum<\/span><span class=\"p\">,<\/span> <span class=\"nx\">prod<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">learnMultiple<\/span><span class=\"p\">(<\/span><span class=\"nx\">x<\/span><span class=\"p\">,<\/span> <span class=\"nx\">y<\/span><span class=\"p\">)<\/span>        <span class=\"c1\">\/\/ Function returns two values.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;sum:&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">sum<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;prod:&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">prod<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Simple output.<\/span>\r\n    <span class=\"nx\">learnTypes<\/span><span class=\"p\">()<\/span>                            <span class=\"c1\">\/\/ &lt; y minutes, learn more!<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"cm\">\/* &lt;- multiline comment<\/span>\r\n<span class=\"cm\">Functions can have parameters and (multiple!) return values.<\/span>\r\n<span class=\"cm\">Here `x`, `y` are the arguments and `sum`, `prod` is the signature (what&#39;s returned).<\/span>\r\n<span class=\"cm\">Note that `x` and `sum` receive the type `int`.<\/span>\r\n<span class=\"cm\">*\/<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnMultiple<\/span><span class=\"p\">(<\/span><span class=\"nx\">x<\/span><span class=\"p\">,<\/span> <span class=\"nx\">y<\/span> <span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"p\">(<\/span><span class=\"nx\">sum<\/span><span class=\"p\">,<\/span> <span class=\"nx\">prod<\/span> <span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"nx\">x<\/span> <span class=\"o\">+<\/span> <span class=\"nx\">y<\/span><span class=\"p\">,<\/span> <span class=\"nx\">x<\/span> <span class=\"o\">*<\/span> <span class=\"nx\">y<\/span> <span class=\"c1\">\/\/ Return two values.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Some built-in types and literals.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnTypes<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Short declaration usually gives you what you want.<\/span>\r\n    <span class=\"nx\">str<\/span> <span class=\"o\">:=<\/span> <span class=\"s\">&quot;Learn Go!&quot;<\/span> <span class=\"c1\">\/\/ string type.<\/span>\r\n\r\n    <span class=\"nx\">s2<\/span> <span class=\"o\">:=<\/span> <span class=\"s\">`A &quot;raw&quot; string literal<\/span>\r\n<span class=\"s\">can include line breaks.`<\/span> <span class=\"c1\">\/\/ Same string type.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Non-ASCII literal. Go source is UTF-8.<\/span>\r\n    <span class=\"nx\">g<\/span> <span class=\"o\">:=<\/span> <span class=\"sc\">&#39;\u03A3&#39;<\/span> <span class=\"c1\">\/\/ rune type, an alias for int32, holds a unicode code point.<\/span>\r\n\r\n    <span class=\"nx\">f<\/span> <span class=\"o\">:=<\/span> <span class=\"mf\">3.14195<\/span> <span class=\"c1\">\/\/ float64, an IEEE-754 64-bit floating point number.<\/span>\r\n    <span class=\"nx\">c<\/span> <span class=\"o\">:=<\/span> <span class=\"mi\">3<\/span> <span class=\"o\">+<\/span> <span class=\"m\">4i<\/span>  <span class=\"c1\">\/\/ complex128, represented internally with two float64&#39;s.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ var syntax with initializers.<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">u<\/span> <span class=\"kt\">uint<\/span> <span class=\"p\">=<\/span> <span class=\"mi\">7<\/span> <span class=\"c1\">\/\/ Unsigned, but implementation dependent size as with int.<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">pi<\/span> <span class=\"kt\">float32<\/span> <span class=\"p\">=<\/span> <span class=\"mf\">22.<\/span> <span class=\"o\">\/<\/span> <span class=\"mi\">7<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Conversion syntax with a short declaration.<\/span>\r\n    <span class=\"nx\">n<\/span> <span class=\"o\">:=<\/span> <span class=\"nb\">byte<\/span><span class=\"p\">(<\/span><span class=\"sc\">&#39;\\n&#39;<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ byte is an alias for uint8.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Arrays have size fixed at compile time.<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">a4<\/span> <span class=\"p\">[<\/span><span class=\"mi\">4<\/span><span class=\"p\">]<\/span><span class=\"kt\">int<\/span>           <span class=\"c1\">\/\/ An array of 4 ints, initialized to all 0.<\/span>\r\n    <span class=\"nx\">a5<\/span> <span class=\"o\">:=<\/span> <span class=\"p\">[<\/span><span class=\"o\">...<\/span><span class=\"p\">]<\/span><span class=\"kt\">int<\/span><span class=\"p\">{<\/span><span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">10<\/span><span class=\"p\">,<\/span> <span class=\"mi\">100<\/span><span class=\"p\">}<\/span> <span class=\"c1\">\/\/ An array initialized with a fixed size of five<\/span>\r\n    <span class=\"c1\">\/\/ elements, with values 3, 1, 5, 10, and 100.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Slices have dynamic size. Arrays and slices each have advantages<\/span>\r\n    <span class=\"c1\">\/\/ but use cases for slices are much more common.<\/span>\r\n    <span class=\"nx\">s3<\/span> <span class=\"o\">:=<\/span> <span class=\"p\">[]<\/span><span class=\"kt\">int<\/span><span class=\"p\">{<\/span><span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">9<\/span><span class=\"p\">}<\/span>    <span class=\"c1\">\/\/ Compare to a5. No ellipsis here.<\/span>\r\n    <span class=\"nx\">s4<\/span> <span class=\"o\">:=<\/span> <span class=\"nb\">make<\/span><span class=\"p\">([]<\/span><span class=\"kt\">int<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">)<\/span>    <span class=\"c1\">\/\/ Allocates slice of 4 ints, initialized to all 0.<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">d2<\/span> <span class=\"p\">[][]<\/span><span class=\"kt\">float64<\/span>      <span class=\"c1\">\/\/ Declaration only, nothing allocated here.<\/span>\r\n    <span class=\"nx\">bs<\/span> <span class=\"o\">:=<\/span> <span class=\"p\">[]<\/span><span class=\"nb\">byte<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;a slice&quot;<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Type conversion syntax.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Because they are dynamic, slices can be appended to on-demand.<\/span>\r\n    <span class=\"c1\">\/\/ To append elements to a slice, the built-in append() function is used.<\/span>\r\n    <span class=\"c1\">\/\/ First argument is a slice to which we are appending. Commonly,<\/span>\r\n    <span class=\"c1\">\/\/ the array variable is updated in place, as in example below.<\/span>\r\n    <span class=\"nx\">s<\/span> <span class=\"o\">:=<\/span> <span class=\"p\">[]<\/span><span class=\"kt\">int<\/span><span class=\"p\">{<\/span><span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"mi\">3<\/span><span class=\"p\">}<\/span>     <span class=\"c1\">\/\/ Result is a slice of length 3.<\/span>\r\n    <span class=\"nx\">s<\/span> <span class=\"p\">=<\/span> <span class=\"nb\">append<\/span><span class=\"p\">(<\/span><span class=\"nx\">s<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">,<\/span> <span class=\"mi\">5<\/span><span class=\"p\">,<\/span> <span class=\"mi\">6<\/span><span class=\"p\">)<\/span>  <span class=\"c1\">\/\/ Added 3 elements. Slice now has length of 6.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">s<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Updated slice is now [1 2 3 4 5 6]<\/span>\r\n\r\n    <span class=\"c1\">\/\/ To append another slice, instead of list of atomic elements we can<\/span>\r\n    <span class=\"c1\">\/\/ pass a reference to a slice or a slice literal like this, with a<\/span>\r\n    <span class=\"c1\">\/\/ trailing ellipsis, meaning take a slice and unpack its elements,<\/span>\r\n    <span class=\"c1\">\/\/ appending them to slice s.<\/span>\r\n    <span class=\"nx\">s<\/span> <span class=\"p\">=<\/span> <span class=\"nb\">append<\/span><span class=\"p\">(<\/span><span class=\"nx\">s<\/span><span class=\"p\">,<\/span> <span class=\"p\">[]<\/span><span class=\"kt\">int<\/span><span class=\"p\">{<\/span><span class=\"mi\">7<\/span><span class=\"p\">,<\/span> <span class=\"mi\">8<\/span><span class=\"p\">,<\/span> <span class=\"mi\">9<\/span><span class=\"p\">}<\/span><span class=\"o\">...<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Second argument is a slice literal.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">s<\/span><span class=\"p\">)<\/span>  <span class=\"c1\">\/\/ Updated slice is now [1 2 3 4 5 6 7 8 9]<\/span>\r\n\r\n    <span class=\"nx\">p<\/span><span class=\"p\">,<\/span> <span class=\"nx\">q<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">learnMemory<\/span><span class=\"p\">()<\/span> <span class=\"c1\">\/\/ Declares p, q to be type pointer to int.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"o\">*<\/span><span class=\"nx\">p<\/span><span class=\"p\">,<\/span> <span class=\"o\">*<\/span><span class=\"nx\">q<\/span><span class=\"p\">)<\/span>   <span class=\"c1\">\/\/ * follows a pointer. This prints two ints.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Maps are a dynamically growable associative array type, like the<\/span>\r\n    <span class=\"c1\">\/\/ hash or dictionary types of some other languages.<\/span>\r\n",



    "1":" <span class=\"nx\">m<\/span> <span class=\"o\">:=<\/span> <span class=\"kd\">map<\/span><span class=\"p\">[<\/span><span class=\"kt\">string<\/span><span class=\"p\">]<\/span><span class=\"kt\">int<\/span><span class=\"p\">{<\/span><span class=\"s\">&quot;three&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;four&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">4<\/span><span class=\"p\">}<\/span>\r\n    <span class=\"nx\">m<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;one&quot;<\/span><span class=\"p\">]<\/span> <span class=\"p\">=<\/span> <span class=\"mi\">1<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Unused variables are an error in Go.<\/span>\r\n    <span class=\"c1\">\/\/ The underscore lets you &quot;use&quot; a variable but discard its value.<\/span>\r\n    <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span> <span class=\"p\">=<\/span> <span class=\"nx\">str<\/span><span class=\"p\">,<\/span> <span class=\"nx\">s2<\/span><span class=\"p\">,<\/span> <span class=\"nx\">g<\/span><span class=\"p\">,<\/span> <span class=\"nx\">f<\/span><span class=\"p\">,<\/span> <span class=\"nx\">u<\/span><span class=\"p\">,<\/span> <span class=\"nx\">pi<\/span><span class=\"p\">,<\/span> <span class=\"nx\">n<\/span><span class=\"p\">,<\/span> <span class=\"nx\">a5<\/span><span class=\"p\">,<\/span> <span class=\"nx\">s4<\/span><span class=\"p\">,<\/span> <span class=\"nx\">bs<\/span>\r\n    <span class=\"c1\">\/\/ Usually you use it to ignore one of the return values of a function<\/span>\r\n    <span class=\"c1\">\/\/ For example, in a quick and dirty script you might ignore the<\/span>\r\n    <span class=\"c1\">\/\/ error value returned from os.Create, and expect that the file<\/span>\r\n    <span class=\"c1\">\/\/ will always be created.<\/span>\r\n    <span class=\"nx\">file<\/span><span class=\"p\">,<\/span> <span class=\"nx\">_<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">os<\/span><span class=\"p\">.<\/span><span class=\"nx\">Create<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;output.txt&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Fprint<\/span><span class=\"p\">(<\/span><span class=\"nx\">file<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;This is how you write to a file, by the way&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">file<\/span><span class=\"p\">.<\/span><span class=\"nx\">Close<\/span><span class=\"p\">()<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Output of course counts as using a variable.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">s<\/span><span class=\"p\">,<\/span> <span class=\"nx\">c<\/span><span class=\"p\">,<\/span> <span class=\"nx\">a4<\/span><span class=\"p\">,<\/span> <span class=\"nx\">s3<\/span><span class=\"p\">,<\/span> <span class=\"nx\">d2<\/span><span class=\"p\">,<\/span> <span class=\"nx\">m<\/span><span class=\"p\">)<\/span>\r\n\r\n    <span class=\"nx\">learnFlowControl<\/span><span class=\"p\">()<\/span> <span class=\"c1\">\/\/ Back in the flow.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ It is possible, unlike in many other languages for functions in go<\/span>\r\n<span class=\"c1\">\/\/ to have named return values.<\/span>\r\n<span class=\"c1\">\/\/ Assigning a name to the type being returned in the function declaration line<\/span>\r\n<span class=\"c1\">\/\/ allows us to easily return from multiple points in a function as well as to<\/span>\r\n<span class=\"c1\">\/\/ only use the return keyword, without anything further.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnNamedReturns<\/span><span class=\"p\">(<\/span><span class=\"nx\">x<\/span><span class=\"p\">,<\/span> <span class=\"nx\">y<\/span> <span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"p\">(<\/span><span class=\"nx\">z<\/span> <span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">z<\/span> <span class=\"p\">=<\/span> <span class=\"nx\">x<\/span> <span class=\"o\">*<\/span> <span class=\"nx\">y<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"c1\">\/\/ z is implicit here, because we named it earlier.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Go is fully garbage collected. It has pointers but no pointer arithmetic.<\/span>\r\n<span class=\"c1\">\/\/ You can make a mistake with a nil pointer, but not by incrementing a pointer.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnMemory<\/span><span class=\"p\">()<\/span> <span class=\"p\">(<\/span><span class=\"nx\">p<\/span><span class=\"p\">,<\/span> <span class=\"nx\">q<\/span> <span class=\"o\">*<\/span><span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Named return values p and q have type pointer to int.<\/span>\r\n    <span class=\"nx\">p<\/span> <span class=\"p\">=<\/span> <span class=\"nb\">new<\/span><span class=\"p\">(<\/span><span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Built-in function new allocates memory.<\/span>\r\n    <span class=\"c1\">\/\/ The allocated int is initialized to 0, p is no longer nil.<\/span>\r\n    <span class=\"nx\">s<\/span> <span class=\"o\">:=<\/span> <span class=\"nb\">make<\/span><span class=\"p\">([]<\/span><span class=\"kt\">int<\/span><span class=\"p\">,<\/span> <span class=\"mi\">20<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Allocate 20 ints as a single block of memory.<\/span>\r\n    <span class=\"nx\">s<\/span><span class=\"p\">[<\/span><span class=\"mi\">3<\/span><span class=\"p\">]<\/span> <span class=\"p\">=<\/span> <span class=\"mi\">7<\/span>             <span class=\"c1\">\/\/ Assign one of them.<\/span>\r\n    <span class=\"nx\">r<\/span> <span class=\"o\">:=<\/span> <span class=\"o\">-<\/span><span class=\"mi\">2<\/span>              <span class=\"c1\">\/\/ Declare another local variable.<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"o\">&amp;<\/span><span class=\"nx\">s<\/span><span class=\"p\">[<\/span><span class=\"mi\">3<\/span><span class=\"p\">],<\/span> <span class=\"o\">&amp;<\/span><span class=\"nx\">r<\/span>     <span class=\"c1\">\/\/ &amp; takes the address of an object.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">expensiveComputation<\/span><span class=\"p\">()<\/span> <span class=\"kt\">float64<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"nx\">m<\/span><span class=\"p\">.<\/span><span class=\"nx\">Exp<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnFlowControl<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ If statements require brace brackets, and do not require parentheses.<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"kc\">true<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;told ya&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ Formatting is standardized by the command line command &quot;go fmt&quot;.<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"kc\">false<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"c1\">\/\/ Pout.<\/span>\r\n    <span class=\"p\">}<\/span> <span class=\"k\">else<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"c1\">\/\/ Gloat.<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ Use switch in preference to chained if statements.<\/span>\r\n    <span class=\"nx\">x<\/span> <span class=\"o\">:=<\/span> <span class=\"mf\">42.0<\/span>\r\n    <span class=\"k\">switch<\/span> <span class=\"nx\">x<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"k\">case<\/span> <span class=\"mi\">0<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"k\">case<\/span> <span class=\"mi\">1<\/span><span class=\"p\">:<\/span>\r\n    <span class=\"k\">case<\/span> <span class=\"mi\">42<\/span><span class=\"p\">:<\/span>\r\n        <span class=\"c1\">\/\/ Cases don&#39;t &quot;fall through&quot;.<\/span>\r\n        <span class=\"cm\">\/*<\/span>\r\n<span class=\"cm\">        There is a `fallthrough` keyword however, see:<\/span>\r\n<span class=\"cm\">          https:\/\/github.com\/golang\/go\/wiki\/Switch#fall-through<\/span>\r\n<span class=\"cm\">        *\/<\/span>\r\n    <span class=\"k\">case<\/span> <span class=\"mi\">43<\/span><span class=\"p\">:<\/span>\r\n        <span class=\"c1\">\/\/ Unreached.<\/span>\r\n    <span class=\"k\">default<\/span><span class=\"p\">:<\/span>\r\n        <span class=\"c1\">\/\/ Default case is optional.<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ Like if, for doesn&#39;t use parens either.<\/span>\r\n    <span class=\"c1\">\/\/ Variables declared in for and if are local to their scope.<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"nx\">x<\/span> <span class=\"o\">:=<\/span> <span class=\"mi\">0<\/span><span class=\"p\">;<\/span> <span class=\"nx\">x<\/span> <span class=\"p\">&lt;<\/span> <span class=\"mi\">3<\/span><span class=\"p\">;<\/span> <span class=\"nx\">x<\/span><span class=\"o\">++<\/span> <span class=\"p\">{<\/span> <span class=\"c1\">\/\/ ++ is a statement.<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;iteration&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">x<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ x == 42 here.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ For is the only loop statement in Go, but it has alternate forms.<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"p\">{<\/span> <span class=\"c1\">\/\/ Infinite loop.<\/span>\r\n        <span class=\"k\">break<\/span>    <span class=\"c1\">\/\/ Just kidding.<\/span>\r\n        <span class=\"k\">continue<\/span> <span class=\"c1\">\/\/ Unreached.<\/span>\r\n    <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ You can use range to iterate over an array, a slice, a string, a map, or a channel.<\/span>\r\n    <span class=\"c1\">\/\/ range returns one (channel) or two values (array, slice, string and map).<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"nx\">key<\/span><span class=\"p\">,<\/span> <span class=\"nx\">value<\/span> <span class=\"o\">:=<\/span> <span class=\"k\">range<\/span> <span class=\"kd\">map<\/span><span class=\"p\">[<\/span><span class=\"kt\">string<\/span><span class=\"p\">]<\/span><span class=\"kt\">int<\/span><span class=\"p\">{<\/span><span class=\"s\">&quot;one&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">1<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;two&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">2<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;three&quot;<\/span><span class=\"p\">:<\/span> <span class=\"mi\">3<\/span><span class=\"p\">}<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"c1\">\/\/ for each pair in the map, print key and value<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;key=%s, value=%d\\n&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">key<\/span><span class=\"p\">,<\/span> <span class=\"nx\">value<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ If you only need the value, use the underscore as the key<\/span>\r\n  <span class=\"k\">for<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">name<\/span> <span class=\"o\">:=<\/span> <span class=\"k\">range<\/span> <span class=\"p\">[]<\/span><span class=\"kt\">string<\/span><span class=\"p\">{<\/span><span class=\"s\">&quot;Bob&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;Bill&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;Joe&quot;<\/span><span class=\"p\">}<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Hello, %s\\n&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">name<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ As with for, := in an if statement means to declare and assign<\/span>\r\n    <span class=\"c1\">\/\/ y first, then test y &gt; x.<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"nx\">y<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">expensiveComputation<\/span><span class=\"p\">();<\/span> <span class=\"nx\">y<\/span> <span class=\"p\">&gt;<\/span> <span class=\"nx\">x<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nx\">x<\/span> <span class=\"p\">=<\/span> <span class=\"nx\">y<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ Function literals are closures.<\/span>\r\n    <span class=\"nx\">xBig<\/span> <span class=\"o\">:=<\/span> <span class=\"kd\">func<\/span><span class=\"p\">()<\/span> <span class=\"kt\">bool<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"nx\">x<\/span> <span class=\"p\">&gt;<\/span> <span class=\"mi\">10000<\/span> <span class=\"c1\">\/\/ References x declared above switch statement.<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"nx\">x<\/span> <span class=\"p\">=<\/span> <span class=\"mi\">99999<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;xBig:&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">xBig<\/span><span class=\"p\">())<\/span> <span class=\"c1\">\/\/ true<\/span>\r\n    <span class=\"nx\">x<\/span> <span class=\"p\">=<\/span> <span class=\"mf\">1.3e3<\/span>                    <span class=\"c1\">\/\/ This makes x == 1300<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;xBig:&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">xBig<\/span><span class=\"p\">())<\/span> <span class=\"c1\">\/\/ false now.<\/span>\r\n\r\n    <span class=\"c1\">\/\/ What&#39;s more is function literals may be defined and called inline,<\/span>\r\n    <span class=\"c1\">\/\/ acting as an argument to function, as long as:<\/span>\r\n    <span class=\"c1\">\/\/ a) function literal is called immediately (),<\/span>\r\n    <span class=\"c1\">\/\/ b) result type matches expected type of argument.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Add + double two numbers: &quot;<\/span><span class=\"p\">,<\/span>\r\n        <span class=\"kd\">func<\/span><span class=\"p\">(<\/span><span class=\"nx\">a<\/span><span class=\"p\">,<\/span> <span class=\"nx\">b<\/span> <span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"kt\">int<\/span> <span class=\"p\">{<\/span>\r\n            <span class=\"k\">return<\/span> <span class=\"p\">(<\/span><span class=\"nx\">a<\/span> <span class=\"o\">+<\/span> <span class=\"nx\">b<\/span><span class=\"p\">)<\/span> <span class=\"o\">*<\/span> <span class=\"mi\">2<\/span>\r\n        <span class=\"p\">}(<\/span><span class=\"mi\">10<\/span><span class=\"p\">,<\/span> <span class=\"mi\">2<\/span><span class=\"p\">))<\/span> <span class=\"c1\">\/\/ Called with args 10 and 2<\/span>\r\n    <span class=\"c1\">\/\/ =&gt; Add + double two numbers: 24<\/span>\r\n\r\n    <span class=\"c1\">\/\/ When you need it, you&#39;ll love it.<\/span>\r\n    <span class=\"k\">goto<\/span> <span class=\"nx\">love<\/span>\r\n<span class=\"nx\">love<\/span><span class=\"p\">:<\/span>\r\n\r\n    <span class=\"nx\">learnFunctionFactory<\/span><span class=\"p\">()<\/span> <span class=\"c1\">\/\/ func returning func is fun(3)(3)<\/span>\r\n    <span class=\"nx\">learnDefer<\/span><span class=\"p\">()<\/span>      <span class=\"c1\">\/\/ A quick detour to an important keyword.<\/span>\r\n    <span class=\"nx\">learnInterfaces<\/span><span class=\"p\">()<\/span> <span class=\"c1\">\/\/ Good stuff coming up!<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnFunctionFactory<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Next two are equivalent, with second being more practical<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">sentenceFactory<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;summer&quot;<\/span><span class=\"p\">)(<\/span><span class=\"s\">&quot;A beautiful&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;day!&quot;<\/span><span class=\"p\">))<\/span>\r\n\r\n    <span class=\"nx\">d<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">sentenceFactory<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;summer&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">d<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;A beautiful&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;day!&quot;<\/span><span class=\"p\">))<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">d<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;A lazy&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;afternoon!&quot;<\/span><span class=\"p\">))<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Decorators are common in other languages. Same can be done in Go<\/span>\r\n<span class=\"c1\">\/\/ with function literals that accept arguments.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">sentenceFactory<\/span><span class=\"p\">(<\/span><span class=\"nx\">mystring<\/span> <span class=\"kt\">string<\/span><span class=\"p\">)<\/span> <span class=\"kd\">func<\/span><span class=\"p\">(<\/span><span class=\"nx\">before<\/span><span class=\"p\">,<\/span> <span class=\"nx\">after<\/span> <span class=\"kt\">string<\/span><span class=\"p\">)<\/span> <span class=\"kt\">string<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"kd\">func<\/span><span class=\"p\">(<\/span><span class=\"nx\">before<\/span><span class=\"p\">,<\/span> <span class=\"nx\">after<\/span> <span class=\"kt\">string<\/span><span class=\"p\">)<\/span> <span class=\"kt\">string<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"k\">return<\/span> <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Sprintf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;%s %s %s&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">before<\/span><span class=\"p\">,<\/span> <span class=\"nx\">mystring<\/span><span class=\"p\">,<\/span> <span class=\"nx\">after<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ new string<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnDefer<\/span><span class=\"p\">()<\/span> <span class=\"p\">(<\/span><span class=\"nx\">ok<\/span> <span class=\"kt\">bool<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ A defer statement pushes a function call onto a list. The list of saved<\/span>\r\n    <span class=\"c1\">\/\/ calls is executed AFTER the surrounding function returns.<\/span>\r\n    <span class=\"k\">defer<\/span> <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;deferred statements execute in reverse (LIFO) order.&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">defer<\/span> <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;\\nThis line is being printed first because&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"c1\">\/\/ Defer is commonly used to close a file, so the function closing the<\/span>\r\n    <span class=\"c1\">\/\/ file stays close to the function opening the file.<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"kc\">true<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Define Stringer as an interface type with one method, String.<\/span>\r\n<span class=\"kd\">type<\/span> <span class=\"nx\">Stringer<\/span> <span class=\"kd\">interface<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">String<\/span><span class=\"p\">()<\/span> <span class=\"kt\">string<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Define pair as a struct with two fields, ints named x and y.<\/span>\r\n<span class=\"kd\">type<\/span> <span class=\"nx\">pair<\/span> <span class=\"kd\">struct<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">x<\/span><span class=\"p\">,<\/span> <span class=\"nx\">y<\/span> <span class=\"kt\">int<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Define a method on type pair. Pair now implements Stringer because Pair has defined all the methods in the interface.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"p\">(<\/span><span class=\"nx\">p<\/span> <span class=\"nx\">pair<\/span><span class=\"p\">)<\/span> <span class=\"nx\">String<\/span><span class=\"p\">()<\/span> <span class=\"kt\">string<\/span> <span class=\"p\">{<\/span> <span class=\"c1\">\/\/ p is called the &quot;receiver&quot;<\/span>\r\n    <span class=\"c1\">\/\/ Sprintf is another public function in package fmt.<\/span>\r\n    <span class=\"c1\">\/\/ Dot syntax references fields of p.<\/span>\r\n    <span class=\"k\">return<\/span> <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Sprintf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;(%d, %d)&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">p<\/span><span class=\"p\">.<\/span><span class=\"nx\">x<\/span><span class=\"p\">,<\/span> <span class=\"nx\">p<\/span><span class=\"p\">.<\/span><span class=\"nx\">y<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnInterfaces<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Brace syntax is a &quot;struct literal&quot;. It evaluates to an initialized<\/span>\r\n    <span class=\"c1\">\/\/ struct. The := syntax declares and initializes p to this struct.<\/span>\r\n    <span class=\"nx\">p<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">pair<\/span><span class=\"p\">{<\/span><span class=\"mi\">3<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">}<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">p<\/span><span class=\"p\">.<\/span><span class=\"nx\">String<\/span><span class=\"p\">())<\/span> <span class=\"c1\">\/\/ Call String method of p, of type pair.<\/span>\r\n    <span class=\"kd\">var<\/span> <span class=\"nx\">i<\/span> <span class=\"nx\">Stringer<\/span>          <span class=\"c1\">\/\/ Declare i of interface type Stringer.<\/span>\r\n    <span class=\"nx\">i<\/span> <span class=\"p\">=<\/span> <span class=\"nx\">p<\/span>                   <span class=\"c1\">\/\/ Valid because pair implements Stringer<\/span>\r\n    <span class=\"c1\">\/\/ Call String method of i, of type Stringer. Output same as above.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">i<\/span><span class=\"p\">.<\/span><span class=\"nx\">String<\/span><span class=\"p\">())<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Functions in the fmt package call the String method to ask an object<\/span>\r\n    <span class=\"c1\">\/\/ for a printable representation of itself.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">p<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Output same as above. Println calls String method.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">i<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ Output same as above.<\/span>\r\n\r\n    <span class=\"nx\">learnVariadicParams<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;great&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;learning&quot;<\/span><span class=\"p\">,<\/span> <span class=\"s\">&quot;here!&quot;<\/span><span class=\"p\">)<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Functions can have variadic parameters.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnVariadicParams<\/span><span class=\"p\">(<\/span><span class=\"nx\">myStrings<\/span> <span class=\"o\">...<\/span><span class=\"kd\">interface<\/span><span class=\"p\">{})<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Iterate each value of the variadic.<\/span>\r\n    <span class=\"c1\">\/\/ The underbar here is ignoring the index argument of the array.<\/span>\r\n    <span class=\"k\">for<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">param<\/span> <span class=\"o\">:=<\/span> <span class=\"k\">range<\/span> <span class=\"nx\">myStrings<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;param:&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">param<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"c1\">\/\/ Pass variadic value as a variadic parameter.<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;params:&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Sprintln<\/span><span class=\"p\">(<\/span><span class=\"nx\">myStrings<\/span><span class=\"o\">...<\/span><span class=\"p\">))<\/span>\r\n\r\n    <span class=\"nx\">learnErrorHandling<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnErrorHandling<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ &quot;, ok&quot; idiom used to tell if something worked or not.<\/span>\r\n", 


    "3":"<span class=\"nx\">m<\/span> <span class=\"o\">:=<\/span> <span class=\"kd\">map<\/span><span class=\"p\">[<\/span><span class=\"kt\">int<\/span><span class=\"p\">]<\/span><span class=\"kt\">string<\/span><span class=\"p\">{<\/span><span class=\"mi\">3<\/span><span class=\"p\">:<\/span> <span class=\"s\">&quot;three&quot;<\/span><span class=\"p\">,<\/span> <span class=\"mi\">4<\/span><span class=\"p\">:<\/span> <span class=\"s\">&quot;four&quot;<\/span><span class=\"p\">}<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"nx\">x<\/span><span class=\"p\">,<\/span> <span class=\"nx\">ok<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">m<\/span><span class=\"p\">[<\/span><span class=\"mi\">1<\/span><span class=\"p\">];<\/span> <span class=\"p\">!<\/span><span class=\"nx\">ok<\/span> <span class=\"p\">{<\/span> <span class=\"c1\">\/\/ ok will be false because 1 is not in the map.<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;no one there&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">}<\/span> <span class=\"k\">else<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Print<\/span><span class=\"p\">(<\/span><span class=\"nx\">x<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ x would be the value, if it were in the map.<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ An error value communicates not just &quot;ok&quot; but more about the problem.<\/span>\r\n    <span class=\"k\">if<\/span> <span class=\"nx\">_<\/span><span class=\"p\">,<\/span> <span class=\"nx\">err<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">strconv<\/span><span class=\"p\">.<\/span><span class=\"nx\">Atoi<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;non-int&quot;<\/span><span class=\"p\">);<\/span> <span class=\"nx\">err<\/span> <span class=\"o\">!=<\/span> <span class=\"kc\">nil<\/span> <span class=\"p\">{<\/span> <span class=\"c1\">\/\/ _ discards value<\/span>\r\n        <span class=\"c1\">\/\/ prints &#39;strconv.ParseInt: parsing &quot;non-int&quot;: invalid syntax&#39;<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">err<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ We&#39;ll revisit interfaces a little later. Meanwhile,<\/span>\r\n    <span class=\"nx\">learnConcurrency<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ c is a channel, a concurrency-safe communication object.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">inc<\/span><span class=\"p\">(<\/span><span class=\"nx\">i<\/span> <span class=\"kt\">int<\/span><span class=\"p\">,<\/span> <span class=\"nx\">c<\/span> <span class=\"kd\">chan<\/span> <span class=\"kt\">int<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">c<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nx\">i<\/span> <span class=\"o\">+<\/span> <span class=\"mi\">1<\/span> <span class=\"c1\">\/\/ &lt;- is the &quot;send&quot; operator when a channel appears on the left.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ We&#39;ll use inc to increment some numbers concurrently.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnConcurrency<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Same make function used earlier to make a slice. Make allocates and<\/span>\r\n    <span class=\"c1\">\/\/ initializes slices, maps, and channels.<\/span>\r\n    <span class=\"nx\">c<\/span> <span class=\"o\">:=<\/span> <span class=\"nb\">make<\/span><span class=\"p\">(<\/span><span class=\"kd\">chan<\/span> <span class=\"kt\">int<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"c1\">\/\/ Start three concurrent goroutines. Numbers will be incremented<\/span>\r\n    <span class=\"c1\">\/\/ concurrently, perhaps in parallel if the machine is capable and<\/span>\r\n    <span class=\"c1\">\/\/ properly configured. All three send to the same channel.<\/span>\r\n    <span class=\"k\">go<\/span> <span class=\"nx\">inc<\/span><span class=\"p\">(<\/span><span class=\"mi\">0<\/span><span class=\"p\">,<\/span> <span class=\"nx\">c<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ go is a statement that starts a new goroutine.<\/span>\r\n    <span class=\"k\">go<\/span> <span class=\"nx\">inc<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">,<\/span> <span class=\"nx\">c<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">go<\/span> <span class=\"nx\">inc<\/span><span class=\"p\">(<\/span><span class=\"o\">-<\/span><span class=\"mi\">805<\/span><span class=\"p\">,<\/span> <span class=\"nx\">c<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"c1\">\/\/ Read three results from the channel and print them out.<\/span>\r\n    <span class=\"c1\">\/\/ There is no telling in what order the results will arrive!<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"o\">&lt;-<\/span><span class=\"nx\">c<\/span><span class=\"p\">,<\/span> <span class=\"o\">&lt;-<\/span><span class=\"nx\">c<\/span><span class=\"p\">,<\/span> <span class=\"o\">&lt;-<\/span><span class=\"nx\">c<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ channel on right, &lt;- is &quot;receive&quot; operator.<\/span>\r\n\r\n    <span class=\"nx\">cs<\/span> <span class=\"o\">:=<\/span> <span class=\"nb\">make<\/span><span class=\"p\">(<\/span><span class=\"kd\">chan<\/span> <span class=\"kt\">string<\/span><span class=\"p\">)<\/span>       <span class=\"c1\">\/\/ Another channel, this one handles strings.<\/span>\r\n    <span class=\"nx\">ccs<\/span> <span class=\"o\">:=<\/span> <span class=\"nb\">make<\/span><span class=\"p\">(<\/span><span class=\"kd\">chan<\/span> <span class=\"kd\">chan<\/span> <span class=\"kt\">string<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ A channel of string channels.<\/span>\r\n    <span class=\"k\">go<\/span> <span class=\"kd\">func<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span> <span class=\"nx\">c<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"mi\">84<\/span> <span class=\"p\">}()<\/span>       <span class=\"c1\">\/\/ Start a new goroutine just to send a value.<\/span>\r\n    <span class=\"k\">go<\/span> <span class=\"kd\">func<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span> <span class=\"nx\">cs<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">&quot;wordy&quot;<\/span> <span class=\"p\">}()<\/span> <span class=\"c1\">\/\/ Again, for cs this time.<\/span>\r\n    <span class=\"c1\">\/\/ Select has syntax like a switch statement but each case involves<\/span>\r\n    <span class=\"c1\">\/\/ a channel operation. It selects a case at random out of the cases<\/span>\r\n    <span class=\"c1\">\/\/ that are ready to communicate.<\/span>\r\n    <span class=\"k\">select<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"k\">case<\/span> <span class=\"nx\">i<\/span> <span class=\"o\">:=<\/span> <span class=\"o\">&lt;-<\/span><span class=\"nx\">c<\/span><span class=\"p\">:<\/span> <span class=\"c1\">\/\/ The value received can be assigned to a variable,<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;it&#39;s a %T&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">i<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">case<\/span> <span class=\"o\">&lt;-<\/span><span class=\"nx\">cs<\/span><span class=\"p\">:<\/span> <span class=\"c1\">\/\/ or the value received can be discarded.<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;it&#39;s a string&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">case<\/span> <span class=\"o\">&lt;-<\/span><span class=\"nx\">ccs<\/span><span class=\"p\">:<\/span> <span class=\"c1\">\/\/ Empty channel, not ready for communication.<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;didn&#39;t happen.&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"p\">}<\/span>\r\n    <span class=\"c1\">\/\/ At this point a value was taken from either c or cs. One of the two<\/span>\r\n    <span class=\"c1\">\/\/ goroutines started above has completed, the other will remain blocked.<\/span>\r\n\r\n    <span class=\"nx\">learnWebProgramming<\/span><span class=\"p\">()<\/span> <span class=\"c1\">\/\/ Go does it. You want to do it too.<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ A single function from package http starts a web server.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">learnWebProgramming<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n\r\n    <span class=\"c1\">\/\/ First parameter of ListenAndServe is TCP address to listen to.<\/span>\r\n    <span class=\"c1\">\/\/ Second parameter is an interface, specifically http.Handler.<\/span>\r\n    <span class=\"k\">go<\/span> <span class=\"kd\">func<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nx\">err<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">http<\/span><span class=\"p\">.<\/span><span class=\"nx\">ListenAndServe<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;:8080&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nx\">pair<\/span><span class=\"p\">{})<\/span>\r\n        <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">err<\/span><span class=\"p\">)<\/span> <span class=\"c1\">\/\/ don&#39;t ignore errors<\/span>\r\n    <span class=\"p\">}()<\/span>\r\n\r\n    <span class=\"nx\">requestServer<\/span><span class=\"p\">()<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"c1\">\/\/ Make pair an http.Handler by implementing its only method, ServeHTTP.<\/span>\r\n<span class=\"kd\">func<\/span> <span class=\"p\">(<\/span><span class=\"nx\">p<\/span> <span class=\"nx\">pair<\/span><span class=\"p\">)<\/span> <span class=\"nx\">ServeHTTP<\/span><span class=\"p\">(<\/span><span class=\"nx\">w<\/span> <span class=\"nx\">http<\/span><span class=\"p\">.<\/span><span class=\"nx\">ResponseWriter<\/span><span class=\"p\">,<\/span> <span class=\"nx\">r<\/span> <span class=\"o\">*<\/span><span class=\"nx\">http<\/span><span class=\"p\">.<\/span><span class=\"nx\">Request<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"c1\">\/\/ Serve data with a method of http.ResponseWriter.<\/span>\r\n    <span class=\"nx\">w<\/span><span class=\"p\">.<\/span><span class=\"nx\">Write<\/span><span class=\"p\">([]<\/span><span class=\"nb\">byte<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;You learned Go in Y minutes!&quot;<\/span><span class=\"p\">))<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"kd\">func<\/span> <span class=\"nx\">requestServer<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">resp<\/span><span class=\"p\">,<\/span> <span class=\"nx\">err<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">http<\/span><span class=\"p\">.<\/span><span class=\"nx\">Get<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;http:\/\/localhost:8080&quot;<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Println<\/span><span class=\"p\">(<\/span><span class=\"nx\">err<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"k\">defer<\/span> <span class=\"nx\">resp<\/span><span class=\"p\">.<\/span><span class=\"nx\">Body<\/span><span class=\"p\">.<\/span><span class=\"nx\">Close<\/span><span class=\"p\">()<\/span>\r\n    <span class=\"nx\">body<\/span><span class=\"p\">,<\/span> <span class=\"nx\">err<\/span> <span class=\"o\">:=<\/span> <span class=\"nx\">ioutil<\/span><span class=\"p\">.<\/span><span class=\"nx\">ReadAll<\/span><span class=\"p\">(<\/span><span class=\"nx\">resp<\/span><span class=\"p\">.<\/span><span class=\"nx\">Body<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">fmt<\/span><span class=\"p\">.<\/span><span class=\"nx\">Printf<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;\\nWebserver said: `%s`&quot;<\/span><span class=\"p\">,<\/span> <span class=\"nb\">string<\/span><span class=\"p\">(<\/span><span class=\"nx\">body<\/span><span class=\"p\">))<\/span>\r\n<span class=\"p\">}<\/span>\r\n"}
}